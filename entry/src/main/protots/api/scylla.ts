/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.26.1
 * source: api/scylla.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../google/protobuf/descriptor";
import * as pb_1 from "google-protobuf";
export namespace api {
    export enum TombstoneGCMode {
        TIMEOUT = 0,
        REPAIR = 1,
        DISABLED = 2,
        IMMEDIATE = 3
    }
    export enum CompactionWindowUnit {
        DAYS = 0,
        HOURS = 1,
        MINUTES = 2
    }
    export enum CompressionMode {
        LZ4Compressor = 0,
        SnappyCompressor = 1,
        DeflateCompressor = 2
    }
    export enum OrderBy {
        OB_AES = 0,
        OB_DESC = 1
    }
    export enum NativeType {
        NT_UNKNOWN = 0,
        NT_BOOLEAN = 1,
        NT_TINY_INT = 2,
        NT_SMALL_INT = 3,
        NT_INT = 4,
        NT_BIG_INT = 5,
        NT_VAR_INT = 6,
        NT_COUNTER = 7,
        NT_DECIMAL = 8,
        NT_FLOAT = 9,
        NT_DOUBLE = 10,
        NT_DURATION = 11,
        NT_DATE = 12,
        NT_TIME = 13,
        NT_TIMESTAMP = 14,
        NT_UUID = 15,
        NT_TIME_UUID = 16,
        NT_ASCII = 17,
        NT_VARCHAR = 18,
        NT_BLOB = 19,
        NT_INET = 20
    }
    export class SimpleStrategy extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            replication_factor?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("replication_factor" in data && data.replication_factor != undefined) {
                    this.replication_factor = data.replication_factor;
                }
            }
        }
        get replication_factor() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set replication_factor(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            replication_factor?: number;
        }): SimpleStrategy {
            const message = new SimpleStrategy({});
            if (data.replication_factor != null) {
                message.replication_factor = data.replication_factor;
            }
            return message;
        }
        toObject() {
            const data: {
                replication_factor?: number;
            } = {};
            if (this.replication_factor != null) {
                data.replication_factor = this.replication_factor;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.replication_factor != 0)
                writer.writeInt32(1, this.replication_factor);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SimpleStrategy {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SimpleStrategy();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.replication_factor = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SimpleStrategy {
            return SimpleStrategy.deserialize(bytes);
        }
    }
    export class NetworkTopologyStrategy extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            replication_factor?: Map<string, number>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("replication_factor" in data && data.replication_factor != undefined) {
                    this.replication_factor = data.replication_factor;
                }
            }
            if (!this.replication_factor)
                this.replication_factor = new Map();
        }
        get replication_factor() {
            return pb_1.Message.getField(this, 1) as any as Map<string, number>;
        }
        set replication_factor(value: Map<string, number>) {
            pb_1.Message.setField(this, 1, value as any);
        }
        static fromObject(data: {
            replication_factor?: {
                [key: string]: number;
            };
        }): NetworkTopologyStrategy {
            const message = new NetworkTopologyStrategy({});
            if (typeof data.replication_factor == "object") {
                message.replication_factor = new Map(Object.entries(data.replication_factor));
            }
            return message;
        }
        toObject() {
            const data: {
                replication_factor?: {
                    [key: string]: number;
                };
            } = {};
            if (this.replication_factor != null) {
                data.replication_factor = (Object.fromEntries)(this.replication_factor);
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            for (const [key, value] of this.replication_factor) {
                writer.writeMessage(1, this.replication_factor, () => {
                    writer.writeString(1, key);
                    writer.writeInt32(2, value);
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NetworkTopologyStrategy {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NetworkTopologyStrategy();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.replication_factor as any, reader, reader.readString, reader.readInt32));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): NetworkTopologyStrategy {
            return NetworkTopologyStrategy.deserialize(bytes);
        }
    }
    export class KeySpaceOption extends pb_1.Message {
        #one_of_decls: number[][] = [[2, 3], [4]];
        constructor(data?: any[] | ({
            name?: string;
        } & (({
            ss?: SimpleStrategy;
            nts?: never;
        } | {
            ss?: never;
            nts?: NetworkTopologyStrategy;
        }) | ({
            durable_writes?: boolean;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("ss" in data && data.ss != undefined) {
                    this.ss = data.ss;
                }
                if ("nts" in data && data.nts != undefined) {
                    this.nts = data.nts;
                }
                if ("durable_writes" in data && data.durable_writes != undefined) {
                    this.durable_writes = data.durable_writes;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get ss() {
            return pb_1.Message.getWrapperField(this, SimpleStrategy, 2) as SimpleStrategy;
        }
        set ss(value: SimpleStrategy) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_ss() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get nts() {
            return pb_1.Message.getWrapperField(this, NetworkTopologyStrategy, 3) as NetworkTopologyStrategy;
        }
        set nts(value: NetworkTopologyStrategy) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_nts() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get durable_writes() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set durable_writes(value: boolean) {
            pb_1.Message.setOneofField(this, 4, this.#one_of_decls[1], value);
        }
        get has_durable_writes() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get strategy() {
            const cases: {
                [index: number]: "none" | "ss" | "nts";
            } = {
                0: "none",
                2: "ss",
                3: "nts"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2, 3])];
        }
        get _durable_writes() {
            const cases: {
                [index: number]: "none" | "durable_writes";
            } = {
                0: "none",
                4: "durable_writes"
            };
            return cases[pb_1.Message.computeOneofCase(this, [4])];
        }
        static fromObject(data: {
            name?: string;
            ss?: ReturnType<typeof SimpleStrategy.prototype.toObject>;
            nts?: ReturnType<typeof NetworkTopologyStrategy.prototype.toObject>;
            durable_writes?: boolean;
        }): KeySpaceOption {
            const message = new KeySpaceOption({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.ss != null) {
                message.ss = SimpleStrategy.fromObject(data.ss);
            }
            if (data.nts != null) {
                message.nts = NetworkTopologyStrategy.fromObject(data.nts);
            }
            if (data.durable_writes != null) {
                message.durable_writes = data.durable_writes;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                ss?: ReturnType<typeof SimpleStrategy.prototype.toObject>;
                nts?: ReturnType<typeof NetworkTopologyStrategy.prototype.toObject>;
                durable_writes?: boolean;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.ss != null) {
                data.ss = this.ss.toObject();
            }
            if (this.nts != null) {
                data.nts = this.nts.toObject();
            }
            if (this.durable_writes != null) {
                data.durable_writes = this.durable_writes;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.has_ss)
                writer.writeMessage(2, this.ss, () => this.ss.serialize(writer));
            if (this.has_nts)
                writer.writeMessage(3, this.nts, () => this.nts.serialize(writer));
            if (this.has_durable_writes)
                writer.writeBool(4, this.durable_writes);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): KeySpaceOption {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new KeySpaceOption();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.ss, () => message.ss = SimpleStrategy.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.nts, () => message.nts = NetworkTopologyStrategy.deserialize(reader));
                        break;
                    case 4:
                        message.durable_writes = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): KeySpaceOption {
            return KeySpaceOption.deserialize(bytes);
        }
    }
    export class SpeculativeRetry extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2, 3, 4]];
        constructor(data?: any[] | ({} & (({
            percentile?: number;
            milliseconds?: never;
            always?: never;
            none?: never;
        } | {
            percentile?: never;
            milliseconds?: number;
            always?: never;
            none?: never;
        } | {
            percentile?: never;
            milliseconds?: never;
            always?: boolean;
            none?: never;
        } | {
            percentile?: never;
            milliseconds?: never;
            always?: never;
            none?: boolean;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("percentile" in data && data.percentile != undefined) {
                    this.percentile = data.percentile;
                }
                if ("milliseconds" in data && data.milliseconds != undefined) {
                    this.milliseconds = data.milliseconds;
                }
                if ("always" in data && data.always != undefined) {
                    this.always = data.always;
                }
                if ("none" in data && data.none != undefined) {
                    this.none = data.none;
                }
            }
        }
        get percentile() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set percentile(value: number) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_percentile() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get milliseconds() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set milliseconds(value: number) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
        }
        get has_milliseconds() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get always() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set always(value: boolean) {
            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[0], value);
        }
        get has_always() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get none() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set none(value: boolean) {
            pb_1.Message.setOneofField(this, 4, this.#one_of_decls[0], value);
        }
        get has_none() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get options() {
            const cases: {
                [index: number]: "none" | "percentile" | "milliseconds" | "always" | "none";
            } = {
                0: "none",
                1: "percentile",
                2: "milliseconds",
                3: "always",
                4: "none"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3, 4])];
        }
        static fromObject(data: {
            percentile?: number;
            milliseconds?: number;
            always?: boolean;
            none?: boolean;
        }): SpeculativeRetry {
            const message = new SpeculativeRetry({});
            if (data.percentile != null) {
                message.percentile = data.percentile;
            }
            if (data.milliseconds != null) {
                message.milliseconds = data.milliseconds;
            }
            if (data.always != null) {
                message.always = data.always;
            }
            if (data.none != null) {
                message.none = data.none;
            }
            return message;
        }
        toObject() {
            const data: {
                percentile?: number;
                milliseconds?: number;
                always?: boolean;
                none?: boolean;
            } = {};
            if (this.percentile != null) {
                data.percentile = this.percentile;
            }
            if (this.milliseconds != null) {
                data.milliseconds = this.milliseconds;
            }
            if (this.always != null) {
                data.always = this.always;
            }
            if (this.none != null) {
                data.none = this.none;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_percentile)
                writer.writeDouble(1, this.percentile);
            if (this.has_milliseconds)
                writer.writeInt64(2, this.milliseconds);
            if (this.has_always)
                writer.writeBool(3, this.always);
            if (this.has_none)
                writer.writeBool(4, this.none);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SpeculativeRetry {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SpeculativeRetry();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.percentile = reader.readDouble();
                        break;
                    case 2:
                        message.milliseconds = reader.readInt64();
                        break;
                    case 3:
                        message.always = reader.readBool();
                        break;
                    case 4:
                        message.none = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SpeculativeRetry {
            return SpeculativeRetry.deserialize(bytes);
        }
    }
    export class STCS extends pb_1.Message {
        #one_of_decls: number[][] = [[1], [2], [3], [4], [5]];
        constructor(data?: any[] | ({} & (({
            bucket_high?: number;
        }) | ({
            bucket_low?: number;
        }) | ({
            min_sstable_size?: number;
        }) | ({
            min_threshold?: number;
        }) | ({
            max_threshold?: number;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("bucket_high" in data && data.bucket_high != undefined) {
                    this.bucket_high = data.bucket_high;
                }
                if ("bucket_low" in data && data.bucket_low != undefined) {
                    this.bucket_low = data.bucket_low;
                }
                if ("min_sstable_size" in data && data.min_sstable_size != undefined) {
                    this.min_sstable_size = data.min_sstable_size;
                }
                if ("min_threshold" in data && data.min_threshold != undefined) {
                    this.min_threshold = data.min_threshold;
                }
                if ("max_threshold" in data && data.max_threshold != undefined) {
                    this.max_threshold = data.max_threshold;
                }
            }
        }
        get bucket_high() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set bucket_high(value: number) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_bucket_high() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get bucket_low() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set bucket_low(value: number) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[1], value);
        }
        get has_bucket_low() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get min_sstable_size() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set min_sstable_size(value: number) {
            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[2], value);
        }
        get has_min_sstable_size() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get min_threshold() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set min_threshold(value: number) {
            pb_1.Message.setOneofField(this, 4, this.#one_of_decls[3], value);
        }
        get has_min_threshold() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get max_threshold() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set max_threshold(value: number) {
            pb_1.Message.setOneofField(this, 5, this.#one_of_decls[4], value);
        }
        get has_max_threshold() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get _bucket_high() {
            const cases: {
                [index: number]: "none" | "bucket_high";
            } = {
                0: "none",
                1: "bucket_high"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1])];
        }
        get _bucket_low() {
            const cases: {
                [index: number]: "none" | "bucket_low";
            } = {
                0: "none",
                2: "bucket_low"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        get _min_sstable_size() {
            const cases: {
                [index: number]: "none" | "min_sstable_size";
            } = {
                0: "none",
                3: "min_sstable_size"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3])];
        }
        get _min_threshold() {
            const cases: {
                [index: number]: "none" | "min_threshold";
            } = {
                0: "none",
                4: "min_threshold"
            };
            return cases[pb_1.Message.computeOneofCase(this, [4])];
        }
        get _max_threshold() {
            const cases: {
                [index: number]: "none" | "max_threshold";
            } = {
                0: "none",
                5: "max_threshold"
            };
            return cases[pb_1.Message.computeOneofCase(this, [5])];
        }
        static fromObject(data: {
            bucket_high?: number;
            bucket_low?: number;
            min_sstable_size?: number;
            min_threshold?: number;
            max_threshold?: number;
        }): STCS {
            const message = new STCS({});
            if (data.bucket_high != null) {
                message.bucket_high = data.bucket_high;
            }
            if (data.bucket_low != null) {
                message.bucket_low = data.bucket_low;
            }
            if (data.min_sstable_size != null) {
                message.min_sstable_size = data.min_sstable_size;
            }
            if (data.min_threshold != null) {
                message.min_threshold = data.min_threshold;
            }
            if (data.max_threshold != null) {
                message.max_threshold = data.max_threshold;
            }
            return message;
        }
        toObject() {
            const data: {
                bucket_high?: number;
                bucket_low?: number;
                min_sstable_size?: number;
                min_threshold?: number;
                max_threshold?: number;
            } = {};
            if (this.bucket_high != null) {
                data.bucket_high = this.bucket_high;
            }
            if (this.bucket_low != null) {
                data.bucket_low = this.bucket_low;
            }
            if (this.min_sstable_size != null) {
                data.min_sstable_size = this.min_sstable_size;
            }
            if (this.min_threshold != null) {
                data.min_threshold = this.min_threshold;
            }
            if (this.max_threshold != null) {
                data.max_threshold = this.max_threshold;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_bucket_high)
                writer.writeDouble(1, this.bucket_high);
            if (this.has_bucket_low)
                writer.writeDouble(2, this.bucket_low);
            if (this.has_min_sstable_size)
                writer.writeInt64(3, this.min_sstable_size);
            if (this.has_min_threshold)
                writer.writeInt64(4, this.min_threshold);
            if (this.has_max_threshold)
                writer.writeInt64(5, this.max_threshold);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): STCS {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new STCS();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.bucket_high = reader.readDouble();
                        break;
                    case 2:
                        message.bucket_low = reader.readDouble();
                        break;
                    case 3:
                        message.min_sstable_size = reader.readInt64();
                        break;
                    case 4:
                        message.min_threshold = reader.readInt64();
                        break;
                    case 5:
                        message.max_threshold = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): STCS {
            return STCS.deserialize(bytes);
        }
    }
    export class LCS extends pb_1.Message {
        #one_of_decls: number[][] = [[1]];
        constructor(data?: any[] | ({} & (({
            sstable_size_in_mb?: number;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("sstable_size_in_mb" in data && data.sstable_size_in_mb != undefined) {
                    this.sstable_size_in_mb = data.sstable_size_in_mb;
                }
            }
        }
        get sstable_size_in_mb() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set sstable_size_in_mb(value: number) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_sstable_size_in_mb() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get _sstable_size_in_mb() {
            const cases: {
                [index: number]: "none" | "sstable_size_in_mb";
            } = {
                0: "none",
                1: "sstable_size_in_mb"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1])];
        }
        static fromObject(data: {
            sstable_size_in_mb?: number;
        }): LCS {
            const message = new LCS({});
            if (data.sstable_size_in_mb != null) {
                message.sstable_size_in_mb = data.sstable_size_in_mb;
            }
            return message;
        }
        toObject() {
            const data: {
                sstable_size_in_mb?: number;
            } = {};
            if (this.sstable_size_in_mb != null) {
                data.sstable_size_in_mb = this.sstable_size_in_mb;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_sstable_size_in_mb)
                writer.writeInt64(1, this.sstable_size_in_mb);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LCS {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LCS();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sstable_size_in_mb = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LCS {
            return LCS.deserialize(bytes);
        }
    }
    export class ICS extends pb_1.Message {
        #one_of_decls: number[][] = [[1], [2], [3], [4], [5], [6], [7]];
        constructor(data?: any[] | ({} & (({
            bucket_high?: number;
        }) | ({
            bucket_low?: number;
        }) | ({
            min_sstable_size?: number;
        }) | ({
            min_threshold?: number;
        }) | ({
            max_threshold?: number;
        }) | ({
            sstable_size_in_mb?: number;
        }) | ({
            space_amplification_goal?: number;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("bucket_high" in data && data.bucket_high != undefined) {
                    this.bucket_high = data.bucket_high;
                }
                if ("bucket_low" in data && data.bucket_low != undefined) {
                    this.bucket_low = data.bucket_low;
                }
                if ("min_sstable_size" in data && data.min_sstable_size != undefined) {
                    this.min_sstable_size = data.min_sstable_size;
                }
                if ("min_threshold" in data && data.min_threshold != undefined) {
                    this.min_threshold = data.min_threshold;
                }
                if ("max_threshold" in data && data.max_threshold != undefined) {
                    this.max_threshold = data.max_threshold;
                }
                if ("sstable_size_in_mb" in data && data.sstable_size_in_mb != undefined) {
                    this.sstable_size_in_mb = data.sstable_size_in_mb;
                }
                if ("space_amplification_goal" in data && data.space_amplification_goal != undefined) {
                    this.space_amplification_goal = data.space_amplification_goal;
                }
            }
        }
        get bucket_high() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set bucket_high(value: number) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_bucket_high() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get bucket_low() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set bucket_low(value: number) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[1], value);
        }
        get has_bucket_low() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get min_sstable_size() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set min_sstable_size(value: number) {
            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[2], value);
        }
        get has_min_sstable_size() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get min_threshold() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set min_threshold(value: number) {
            pb_1.Message.setOneofField(this, 4, this.#one_of_decls[3], value);
        }
        get has_min_threshold() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get max_threshold() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set max_threshold(value: number) {
            pb_1.Message.setOneofField(this, 5, this.#one_of_decls[4], value);
        }
        get has_max_threshold() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get sstable_size_in_mb() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set sstable_size_in_mb(value: number) {
            pb_1.Message.setOneofField(this, 6, this.#one_of_decls[5], value);
        }
        get has_sstable_size_in_mb() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get space_amplification_goal() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set space_amplification_goal(value: number) {
            pb_1.Message.setOneofField(this, 7, this.#one_of_decls[6], value);
        }
        get has_space_amplification_goal() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get _bucket_high() {
            const cases: {
                [index: number]: "none" | "bucket_high";
            } = {
                0: "none",
                1: "bucket_high"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1])];
        }
        get _bucket_low() {
            const cases: {
                [index: number]: "none" | "bucket_low";
            } = {
                0: "none",
                2: "bucket_low"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        get _min_sstable_size() {
            const cases: {
                [index: number]: "none" | "min_sstable_size";
            } = {
                0: "none",
                3: "min_sstable_size"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3])];
        }
        get _min_threshold() {
            const cases: {
                [index: number]: "none" | "min_threshold";
            } = {
                0: "none",
                4: "min_threshold"
            };
            return cases[pb_1.Message.computeOneofCase(this, [4])];
        }
        get _max_threshold() {
            const cases: {
                [index: number]: "none" | "max_threshold";
            } = {
                0: "none",
                5: "max_threshold"
            };
            return cases[pb_1.Message.computeOneofCase(this, [5])];
        }
        get _sstable_size_in_mb() {
            const cases: {
                [index: number]: "none" | "sstable_size_in_mb";
            } = {
                0: "none",
                6: "sstable_size_in_mb"
            };
            return cases[pb_1.Message.computeOneofCase(this, [6])];
        }
        get _space_amplification_goal() {
            const cases: {
                [index: number]: "none" | "space_amplification_goal";
            } = {
                0: "none",
                7: "space_amplification_goal"
            };
            return cases[pb_1.Message.computeOneofCase(this, [7])];
        }
        static fromObject(data: {
            bucket_high?: number;
            bucket_low?: number;
            min_sstable_size?: number;
            min_threshold?: number;
            max_threshold?: number;
            sstable_size_in_mb?: number;
            space_amplification_goal?: number;
        }): ICS {
            const message = new ICS({});
            if (data.bucket_high != null) {
                message.bucket_high = data.bucket_high;
            }
            if (data.bucket_low != null) {
                message.bucket_low = data.bucket_low;
            }
            if (data.min_sstable_size != null) {
                message.min_sstable_size = data.min_sstable_size;
            }
            if (data.min_threshold != null) {
                message.min_threshold = data.min_threshold;
            }
            if (data.max_threshold != null) {
                message.max_threshold = data.max_threshold;
            }
            if (data.sstable_size_in_mb != null) {
                message.sstable_size_in_mb = data.sstable_size_in_mb;
            }
            if (data.space_amplification_goal != null) {
                message.space_amplification_goal = data.space_amplification_goal;
            }
            return message;
        }
        toObject() {
            const data: {
                bucket_high?: number;
                bucket_low?: number;
                min_sstable_size?: number;
                min_threshold?: number;
                max_threshold?: number;
                sstable_size_in_mb?: number;
                space_amplification_goal?: number;
            } = {};
            if (this.bucket_high != null) {
                data.bucket_high = this.bucket_high;
            }
            if (this.bucket_low != null) {
                data.bucket_low = this.bucket_low;
            }
            if (this.min_sstable_size != null) {
                data.min_sstable_size = this.min_sstable_size;
            }
            if (this.min_threshold != null) {
                data.min_threshold = this.min_threshold;
            }
            if (this.max_threshold != null) {
                data.max_threshold = this.max_threshold;
            }
            if (this.sstable_size_in_mb != null) {
                data.sstable_size_in_mb = this.sstable_size_in_mb;
            }
            if (this.space_amplification_goal != null) {
                data.space_amplification_goal = this.space_amplification_goal;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_bucket_high)
                writer.writeDouble(1, this.bucket_high);
            if (this.has_bucket_low)
                writer.writeDouble(2, this.bucket_low);
            if (this.has_min_sstable_size)
                writer.writeInt64(3, this.min_sstable_size);
            if (this.has_min_threshold)
                writer.writeInt64(4, this.min_threshold);
            if (this.has_max_threshold)
                writer.writeInt64(5, this.max_threshold);
            if (this.has_sstable_size_in_mb)
                writer.writeInt64(6, this.sstable_size_in_mb);
            if (this.has_space_amplification_goal)
                writer.writeDouble(7, this.space_amplification_goal);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ICS {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ICS();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.bucket_high = reader.readDouble();
                        break;
                    case 2:
                        message.bucket_low = reader.readDouble();
                        break;
                    case 3:
                        message.min_sstable_size = reader.readInt64();
                        break;
                    case 4:
                        message.min_threshold = reader.readInt64();
                        break;
                    case 5:
                        message.max_threshold = reader.readInt64();
                        break;
                    case 6:
                        message.sstable_size_in_mb = reader.readInt64();
                        break;
                    case 7:
                        message.space_amplification_goal = reader.readDouble();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ICS {
            return ICS.deserialize(bytes);
        }
    }
    export class TWCS extends pb_1.Message {
        #one_of_decls: number[][] = [[1], [2], [3], [4], [5]];
        constructor(data?: any[] | ({} & (({
            compaction_window_unit?: CompactionWindowUnit;
        }) | ({
            compaction_window_size?: number;
        }) | ({
            expired_sstable_check_frequency_seconds?: number;
        }) | ({
            min_threshold?: number;
        }) | ({
            max_threshold?: number;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("compaction_window_unit" in data && data.compaction_window_unit != undefined) {
                    this.compaction_window_unit = data.compaction_window_unit;
                }
                if ("compaction_window_size" in data && data.compaction_window_size != undefined) {
                    this.compaction_window_size = data.compaction_window_size;
                }
                if ("expired_sstable_check_frequency_seconds" in data && data.expired_sstable_check_frequency_seconds != undefined) {
                    this.expired_sstable_check_frequency_seconds = data.expired_sstable_check_frequency_seconds;
                }
                if ("min_threshold" in data && data.min_threshold != undefined) {
                    this.min_threshold = data.min_threshold;
                }
                if ("max_threshold" in data && data.max_threshold != undefined) {
                    this.max_threshold = data.max_threshold;
                }
            }
        }
        get compaction_window_unit() {
            return pb_1.Message.getFieldWithDefault(this, 1, CompactionWindowUnit.DAYS) as CompactionWindowUnit;
        }
        set compaction_window_unit(value: CompactionWindowUnit) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_compaction_window_unit() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get compaction_window_size() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set compaction_window_size(value: number) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[1], value);
        }
        get has_compaction_window_size() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get expired_sstable_check_frequency_seconds() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set expired_sstable_check_frequency_seconds(value: number) {
            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[2], value);
        }
        get has_expired_sstable_check_frequency_seconds() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get min_threshold() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set min_threshold(value: number) {
            pb_1.Message.setOneofField(this, 4, this.#one_of_decls[3], value);
        }
        get has_min_threshold() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get max_threshold() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set max_threshold(value: number) {
            pb_1.Message.setOneofField(this, 5, this.#one_of_decls[4], value);
        }
        get has_max_threshold() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get _compaction_window_unit() {
            const cases: {
                [index: number]: "none" | "compaction_window_unit";
            } = {
                0: "none",
                1: "compaction_window_unit"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1])];
        }
        get _compaction_window_size() {
            const cases: {
                [index: number]: "none" | "compaction_window_size";
            } = {
                0: "none",
                2: "compaction_window_size"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        get _expired_sstable_check_frequency_seconds() {
            const cases: {
                [index: number]: "none" | "expired_sstable_check_frequency_seconds";
            } = {
                0: "none",
                3: "expired_sstable_check_frequency_seconds"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3])];
        }
        get _min_threshold() {
            const cases: {
                [index: number]: "none" | "min_threshold";
            } = {
                0: "none",
                4: "min_threshold"
            };
            return cases[pb_1.Message.computeOneofCase(this, [4])];
        }
        get _max_threshold() {
            const cases: {
                [index: number]: "none" | "max_threshold";
            } = {
                0: "none",
                5: "max_threshold"
            };
            return cases[pb_1.Message.computeOneofCase(this, [5])];
        }
        static fromObject(data: {
            compaction_window_unit?: CompactionWindowUnit;
            compaction_window_size?: number;
            expired_sstable_check_frequency_seconds?: number;
            min_threshold?: number;
            max_threshold?: number;
        }): TWCS {
            const message = new TWCS({});
            if (data.compaction_window_unit != null) {
                message.compaction_window_unit = data.compaction_window_unit;
            }
            if (data.compaction_window_size != null) {
                message.compaction_window_size = data.compaction_window_size;
            }
            if (data.expired_sstable_check_frequency_seconds != null) {
                message.expired_sstable_check_frequency_seconds = data.expired_sstable_check_frequency_seconds;
            }
            if (data.min_threshold != null) {
                message.min_threshold = data.min_threshold;
            }
            if (data.max_threshold != null) {
                message.max_threshold = data.max_threshold;
            }
            return message;
        }
        toObject() {
            const data: {
                compaction_window_unit?: CompactionWindowUnit;
                compaction_window_size?: number;
                expired_sstable_check_frequency_seconds?: number;
                min_threshold?: number;
                max_threshold?: number;
            } = {};
            if (this.compaction_window_unit != null) {
                data.compaction_window_unit = this.compaction_window_unit;
            }
            if (this.compaction_window_size != null) {
                data.compaction_window_size = this.compaction_window_size;
            }
            if (this.expired_sstable_check_frequency_seconds != null) {
                data.expired_sstable_check_frequency_seconds = this.expired_sstable_check_frequency_seconds;
            }
            if (this.min_threshold != null) {
                data.min_threshold = this.min_threshold;
            }
            if (this.max_threshold != null) {
                data.max_threshold = this.max_threshold;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_compaction_window_unit)
                writer.writeEnum(1, this.compaction_window_unit);
            if (this.has_compaction_window_size)
                writer.writeInt64(2, this.compaction_window_size);
            if (this.has_expired_sstable_check_frequency_seconds)
                writer.writeInt64(3, this.expired_sstable_check_frequency_seconds);
            if (this.has_min_threshold)
                writer.writeInt64(4, this.min_threshold);
            if (this.has_max_threshold)
                writer.writeInt64(5, this.max_threshold);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TWCS {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TWCS();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.compaction_window_unit = reader.readEnum();
                        break;
                    case 2:
                        message.compaction_window_size = reader.readInt64();
                        break;
                    case 3:
                        message.expired_sstable_check_frequency_seconds = reader.readInt64();
                        break;
                    case 4:
                        message.min_threshold = reader.readInt64();
                        break;
                    case 5:
                        message.max_threshold = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TWCS {
            return TWCS.deserialize(bytes);
        }
    }
    export class CompactionMode extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2, 3, 4]];
        constructor(data?: any[] | ({} & (({
            stcs?: STCS;
            lcs?: never;
            ics?: never;
            twcs?: never;
        } | {
            stcs?: never;
            lcs?: LCS;
            ics?: never;
            twcs?: never;
        } | {
            stcs?: never;
            lcs?: never;
            ics?: ICS;
            twcs?: never;
        } | {
            stcs?: never;
            lcs?: never;
            ics?: never;
            twcs?: TWCS;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("stcs" in data && data.stcs != undefined) {
                    this.stcs = data.stcs;
                }
                if ("lcs" in data && data.lcs != undefined) {
                    this.lcs = data.lcs;
                }
                if ("ics" in data && data.ics != undefined) {
                    this.ics = data.ics;
                }
                if ("twcs" in data && data.twcs != undefined) {
                    this.twcs = data.twcs;
                }
            }
        }
        get stcs() {
            return pb_1.Message.getWrapperField(this, STCS, 1) as STCS;
        }
        set stcs(value: STCS) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_stcs() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get lcs() {
            return pb_1.Message.getWrapperField(this, LCS, 2) as LCS;
        }
        set lcs(value: LCS) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_lcs() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get ics() {
            return pb_1.Message.getWrapperField(this, ICS, 3) as ICS;
        }
        set ics(value: ICS) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_ics() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get twcs() {
            return pb_1.Message.getWrapperField(this, TWCS, 4) as TWCS;
        }
        set twcs(value: TWCS) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_twcs() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get mode() {
            const cases: {
                [index: number]: "none" | "stcs" | "lcs" | "ics" | "twcs";
            } = {
                0: "none",
                1: "stcs",
                2: "lcs",
                3: "ics",
                4: "twcs"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3, 4])];
        }
        static fromObject(data: {
            stcs?: ReturnType<typeof STCS.prototype.toObject>;
            lcs?: ReturnType<typeof LCS.prototype.toObject>;
            ics?: ReturnType<typeof ICS.prototype.toObject>;
            twcs?: ReturnType<typeof TWCS.prototype.toObject>;
        }): CompactionMode {
            const message = new CompactionMode({});
            if (data.stcs != null) {
                message.stcs = STCS.fromObject(data.stcs);
            }
            if (data.lcs != null) {
                message.lcs = LCS.fromObject(data.lcs);
            }
            if (data.ics != null) {
                message.ics = ICS.fromObject(data.ics);
            }
            if (data.twcs != null) {
                message.twcs = TWCS.fromObject(data.twcs);
            }
            return message;
        }
        toObject() {
            const data: {
                stcs?: ReturnType<typeof STCS.prototype.toObject>;
                lcs?: ReturnType<typeof LCS.prototype.toObject>;
                ics?: ReturnType<typeof ICS.prototype.toObject>;
                twcs?: ReturnType<typeof TWCS.prototype.toObject>;
            } = {};
            if (this.stcs != null) {
                data.stcs = this.stcs.toObject();
            }
            if (this.lcs != null) {
                data.lcs = this.lcs.toObject();
            }
            if (this.ics != null) {
                data.ics = this.ics.toObject();
            }
            if (this.twcs != null) {
                data.twcs = this.twcs.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_stcs)
                writer.writeMessage(1, this.stcs, () => this.stcs.serialize(writer));
            if (this.has_lcs)
                writer.writeMessage(2, this.lcs, () => this.lcs.serialize(writer));
            if (this.has_ics)
                writer.writeMessage(3, this.ics, () => this.ics.serialize(writer));
            if (this.has_twcs)
                writer.writeMessage(4, this.twcs, () => this.twcs.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CompactionMode {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CompactionMode();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.stcs, () => message.stcs = STCS.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.lcs, () => message.lcs = LCS.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.ics, () => message.ics = ICS.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.twcs, () => message.twcs = TWCS.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CompactionMode {
            return CompactionMode.deserialize(bytes);
        }
    }
    export class CompressionOption extends pb_1.Message {
        #one_of_decls: number[][] = [[1], [2]];
        constructor(data?: any[] | ({} & (({
            sstable_compression?: CompressionMode;
        }) | ({
            chunk_length_in_kb?: number;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("sstable_compression" in data && data.sstable_compression != undefined) {
                    this.sstable_compression = data.sstable_compression;
                }
                if ("chunk_length_in_kb" in data && data.chunk_length_in_kb != undefined) {
                    this.chunk_length_in_kb = data.chunk_length_in_kb;
                }
            }
        }
        get sstable_compression() {
            return pb_1.Message.getFieldWithDefault(this, 1, CompressionMode.LZ4Compressor) as CompressionMode;
        }
        set sstable_compression(value: CompressionMode) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_sstable_compression() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get chunk_length_in_kb() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set chunk_length_in_kb(value: number) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[1], value);
        }
        get has_chunk_length_in_kb() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get _sstable_compression() {
            const cases: {
                [index: number]: "none" | "sstable_compression";
            } = {
                0: "none",
                1: "sstable_compression"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1])];
        }
        get _chunk_length_in_kb() {
            const cases: {
                [index: number]: "none" | "chunk_length_in_kb";
            } = {
                0: "none",
                2: "chunk_length_in_kb"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        static fromObject(data: {
            sstable_compression?: CompressionMode;
            chunk_length_in_kb?: number;
        }): CompressionOption {
            const message = new CompressionOption({});
            if (data.sstable_compression != null) {
                message.sstable_compression = data.sstable_compression;
            }
            if (data.chunk_length_in_kb != null) {
                message.chunk_length_in_kb = data.chunk_length_in_kb;
            }
            return message;
        }
        toObject() {
            const data: {
                sstable_compression?: CompressionMode;
                chunk_length_in_kb?: number;
            } = {};
            if (this.sstable_compression != null) {
                data.sstable_compression = this.sstable_compression;
            }
            if (this.chunk_length_in_kb != null) {
                data.chunk_length_in_kb = this.chunk_length_in_kb;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_sstable_compression)
                writer.writeEnum(1, this.sstable_compression);
            if (this.has_chunk_length_in_kb)
                writer.writeInt64(2, this.chunk_length_in_kb);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CompressionOption {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CompressionOption();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sstable_compression = reader.readEnum();
                        break;
                    case 2:
                        message.chunk_length_in_kb = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CompressionOption {
            return CompressionOption.deserialize(bytes);
        }
    }
    export class CDCOption extends pb_1.Message {
        #one_of_decls: number[][] = [[1], [2], [3]];
        constructor(data?: any[] | ({} & (({
            enabled?: boolean;
        }) | ({
            preimage?: boolean;
        }) | ({
            ttl_sec?: number;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("enabled" in data && data.enabled != undefined) {
                    this.enabled = data.enabled;
                }
                if ("preimage" in data && data.preimage != undefined) {
                    this.preimage = data.preimage;
                }
                if ("ttl_sec" in data && data.ttl_sec != undefined) {
                    this.ttl_sec = data.ttl_sec;
                }
            }
        }
        get enabled() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set enabled(value: boolean) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_enabled() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get preimage() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set preimage(value: boolean) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[1], value);
        }
        get has_preimage() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get ttl_sec() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set ttl_sec(value: number) {
            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[2], value);
        }
        get has_ttl_sec() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get _enabled() {
            const cases: {
                [index: number]: "none" | "enabled";
            } = {
                0: "none",
                1: "enabled"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1])];
        }
        get _preimage() {
            const cases: {
                [index: number]: "none" | "preimage";
            } = {
                0: "none",
                2: "preimage"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        get _ttl_sec() {
            const cases: {
                [index: number]: "none" | "ttl_sec";
            } = {
                0: "none",
                3: "ttl_sec"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3])];
        }
        static fromObject(data: {
            enabled?: boolean;
            preimage?: boolean;
            ttl_sec?: number;
        }): CDCOption {
            const message = new CDCOption({});
            if (data.enabled != null) {
                message.enabled = data.enabled;
            }
            if (data.preimage != null) {
                message.preimage = data.preimage;
            }
            if (data.ttl_sec != null) {
                message.ttl_sec = data.ttl_sec;
            }
            return message;
        }
        toObject() {
            const data: {
                enabled?: boolean;
                preimage?: boolean;
                ttl_sec?: number;
            } = {};
            if (this.enabled != null) {
                data.enabled = this.enabled;
            }
            if (this.preimage != null) {
                data.preimage = this.preimage;
            }
            if (this.ttl_sec != null) {
                data.ttl_sec = this.ttl_sec;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_enabled)
                writer.writeBool(1, this.enabled);
            if (this.has_preimage)
                writer.writeBool(2, this.preimage);
            if (this.has_ttl_sec)
                writer.writeInt64(3, this.ttl_sec);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CDCOption {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CDCOption();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.enabled = reader.readBool();
                        break;
                    case 2:
                        message.preimage = reader.readBool();
                        break;
                    case 3:
                        message.ttl_sec = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CDCOption {
            return CDCOption.deserialize(bytes);
        }
    }
    export class PrimaryKey extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            part_key?: string[];
            sort_key?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [13, 14], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("part_key" in data && data.part_key != undefined) {
                    this.part_key = data.part_key;
                }
                if ("sort_key" in data && data.sort_key != undefined) {
                    this.sort_key = data.sort_key;
                }
            }
        }
        get part_key() {
            return pb_1.Message.getFieldWithDefault(this, 13, []) as string[];
        }
        set part_key(value: string[]) {
            pb_1.Message.setField(this, 13, value);
        }
        get sort_key() {
            return pb_1.Message.getFieldWithDefault(this, 14, []) as string[];
        }
        set sort_key(value: string[]) {
            pb_1.Message.setField(this, 14, value);
        }
        static fromObject(data: {
            part_key?: string[];
            sort_key?: string[];
        }): PrimaryKey {
            const message = new PrimaryKey({});
            if (data.part_key != null) {
                message.part_key = data.part_key;
            }
            if (data.sort_key != null) {
                message.sort_key = data.sort_key;
            }
            return message;
        }
        toObject() {
            const data: {
                part_key?: string[];
                sort_key?: string[];
            } = {};
            if (this.part_key != null) {
                data.part_key = this.part_key;
            }
            if (this.sort_key != null) {
                data.sort_key = this.sort_key;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.part_key.length)
                writer.writeRepeatedString(13, this.part_key);
            if (this.sort_key.length)
                writer.writeRepeatedString(14, this.sort_key);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PrimaryKey {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PrimaryKey();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 13:
                        pb_1.Message.addToRepeatedField(message, 13, reader.readString());
                        break;
                    case 14:
                        pb_1.Message.addToRepeatedField(message, 14, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PrimaryKey {
            return PrimaryKey.deserialize(bytes);
        }
    }
    export class MaterializedView extends pb_1.Message {
        #one_of_decls: number[][] = [[1], [3]];
        constructor(data?: any[] | ({
            primary_key?: PrimaryKey;
        } & (({
            name?: string;
        }) | ({
            option?: TableNativeOption;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("primary_key" in data && data.primary_key != undefined) {
                    this.primary_key = data.primary_key;
                }
                if ("option" in data && data.option != undefined) {
                    this.option = data.option;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_name() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get primary_key() {
            return pb_1.Message.getWrapperField(this, PrimaryKey, 2) as PrimaryKey;
        }
        set primary_key(value: PrimaryKey) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_primary_key() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get option() {
            return pb_1.Message.getWrapperField(this, TableNativeOption, 3) as TableNativeOption;
        }
        set option(value: TableNativeOption) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[1], value);
        }
        get has_option() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get _name() {
            const cases: {
                [index: number]: "none" | "name";
            } = {
                0: "none",
                1: "name"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1])];
        }
        get _option() {
            const cases: {
                [index: number]: "none" | "option";
            } = {
                0: "none",
                3: "option"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3])];
        }
        static fromObject(data: {
            name?: string;
            primary_key?: ReturnType<typeof PrimaryKey.prototype.toObject>;
            option?: ReturnType<typeof TableNativeOption.prototype.toObject>;
        }): MaterializedView {
            const message = new MaterializedView({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.primary_key != null) {
                message.primary_key = PrimaryKey.fromObject(data.primary_key);
            }
            if (data.option != null) {
                message.option = TableNativeOption.fromObject(data.option);
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                primary_key?: ReturnType<typeof PrimaryKey.prototype.toObject>;
                option?: ReturnType<typeof TableNativeOption.prototype.toObject>;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.primary_key != null) {
                data.primary_key = this.primary_key.toObject();
            }
            if (this.option != null) {
                data.option = this.option.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_name)
                writer.writeString(1, this.name);
            if (this.has_primary_key)
                writer.writeMessage(2, this.primary_key, () => this.primary_key.serialize(writer));
            if (this.has_option)
                writer.writeMessage(3, this.option, () => this.option.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MaterializedView {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MaterializedView();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.primary_key, () => message.primary_key = PrimaryKey.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.option, () => message.option = TableNativeOption.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MaterializedView {
            return MaterializedView.deserialize(bytes);
        }
    }
    export class TableNativeOption extends pb_1.Message {
        #one_of_decls: number[][] = [[1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12]];
        constructor(data?: any[] | ({
            clustering_order_by?: ClusteringOrderBy[];
        } & (({
            comment?: string;
        }) | ({
            read_repair_chance?: number;
        }) | ({
            dclocal_read_repair_chance?: number;
        }) | ({
            speculative_retry?: SpeculativeRetry;
        }) | ({
            gc_grace_seconds?: number;
        }) | ({
            tombstone_gc?: TombstoneGCMode;
        }) | ({
            bloom_filter_fp_chance?: number;
        }) | ({
            default_time_to_live?: number;
        }) | ({
            compaction?: CompactionMode;
        }) | ({
            compress?: CompressionOption;
        }) | ({
            caching?: boolean;
        }) | ({
            cdc?: CDCOption;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [13], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("comment" in data && data.comment != undefined) {
                    this.comment = data.comment;
                }
                if ("read_repair_chance" in data && data.read_repair_chance != undefined) {
                    this.read_repair_chance = data.read_repair_chance;
                }
                if ("dclocal_read_repair_chance" in data && data.dclocal_read_repair_chance != undefined) {
                    this.dclocal_read_repair_chance = data.dclocal_read_repair_chance;
                }
                if ("speculative_retry" in data && data.speculative_retry != undefined) {
                    this.speculative_retry = data.speculative_retry;
                }
                if ("gc_grace_seconds" in data && data.gc_grace_seconds != undefined) {
                    this.gc_grace_seconds = data.gc_grace_seconds;
                }
                if ("tombstone_gc" in data && data.tombstone_gc != undefined) {
                    this.tombstone_gc = data.tombstone_gc;
                }
                if ("bloom_filter_fp_chance" in data && data.bloom_filter_fp_chance != undefined) {
                    this.bloom_filter_fp_chance = data.bloom_filter_fp_chance;
                }
                if ("default_time_to_live" in data && data.default_time_to_live != undefined) {
                    this.default_time_to_live = data.default_time_to_live;
                }
                if ("compaction" in data && data.compaction != undefined) {
                    this.compaction = data.compaction;
                }
                if ("compress" in data && data.compress != undefined) {
                    this.compress = data.compress;
                }
                if ("caching" in data && data.caching != undefined) {
                    this.caching = data.caching;
                }
                if ("cdc" in data && data.cdc != undefined) {
                    this.cdc = data.cdc;
                }
                if ("clustering_order_by" in data && data.clustering_order_by != undefined) {
                    this.clustering_order_by = data.clustering_order_by;
                }
            }
        }
        get comment() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set comment(value: string) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_comment() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get read_repair_chance() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set read_repair_chance(value: number) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[1], value);
        }
        get has_read_repair_chance() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get dclocal_read_repair_chance() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set dclocal_read_repair_chance(value: number) {
            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[2], value);
        }
        get has_dclocal_read_repair_chance() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get speculative_retry() {
            return pb_1.Message.getWrapperField(this, SpeculativeRetry, 4) as SpeculativeRetry;
        }
        set speculative_retry(value: SpeculativeRetry) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[3], value);
        }
        get has_speculative_retry() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get gc_grace_seconds() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set gc_grace_seconds(value: number) {
            pb_1.Message.setOneofField(this, 5, this.#one_of_decls[4], value);
        }
        get has_gc_grace_seconds() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get tombstone_gc() {
            return pb_1.Message.getFieldWithDefault(this, 6, TombstoneGCMode.TIMEOUT) as TombstoneGCMode;
        }
        set tombstone_gc(value: TombstoneGCMode) {
            pb_1.Message.setOneofField(this, 6, this.#one_of_decls[5], value);
        }
        get has_tombstone_gc() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get bloom_filter_fp_chance() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set bloom_filter_fp_chance(value: number) {
            pb_1.Message.setOneofField(this, 7, this.#one_of_decls[6], value);
        }
        get has_bloom_filter_fp_chance() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get default_time_to_live() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set default_time_to_live(value: number) {
            pb_1.Message.setOneofField(this, 8, this.#one_of_decls[7], value);
        }
        get has_default_time_to_live() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get compaction() {
            return pb_1.Message.getWrapperField(this, CompactionMode, 9) as CompactionMode;
        }
        set compaction(value: CompactionMode) {
            pb_1.Message.setOneofWrapperField(this, 9, this.#one_of_decls[8], value);
        }
        get has_compaction() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get compress() {
            return pb_1.Message.getWrapperField(this, CompressionOption, 10) as CompressionOption;
        }
        set compress(value: CompressionOption) {
            pb_1.Message.setOneofWrapperField(this, 10, this.#one_of_decls[9], value);
        }
        get has_compress() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get caching() {
            return pb_1.Message.getFieldWithDefault(this, 11, false) as boolean;
        }
        set caching(value: boolean) {
            pb_1.Message.setOneofField(this, 11, this.#one_of_decls[10], value);
        }
        get has_caching() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get cdc() {
            return pb_1.Message.getWrapperField(this, CDCOption, 12) as CDCOption;
        }
        set cdc(value: CDCOption) {
            pb_1.Message.setOneofWrapperField(this, 12, this.#one_of_decls[11], value);
        }
        get has_cdc() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get clustering_order_by() {
            return pb_1.Message.getRepeatedWrapperField(this, ClusteringOrderBy, 13) as ClusteringOrderBy[];
        }
        set clustering_order_by(value: ClusteringOrderBy[]) {
            pb_1.Message.setRepeatedWrapperField(this, 13, value);
        }
        get _comment() {
            const cases: {
                [index: number]: "none" | "comment";
            } = {
                0: "none",
                1: "comment"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1])];
        }
        get _read_repair_chance() {
            const cases: {
                [index: number]: "none" | "read_repair_chance";
            } = {
                0: "none",
                2: "read_repair_chance"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        get _dclocal_read_repair_chance() {
            const cases: {
                [index: number]: "none" | "dclocal_read_repair_chance";
            } = {
                0: "none",
                3: "dclocal_read_repair_chance"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3])];
        }
        get _speculative_retry() {
            const cases: {
                [index: number]: "none" | "speculative_retry";
            } = {
                0: "none",
                4: "speculative_retry"
            };
            return cases[pb_1.Message.computeOneofCase(this, [4])];
        }
        get _gc_grace_seconds() {
            const cases: {
                [index: number]: "none" | "gc_grace_seconds";
            } = {
                0: "none",
                5: "gc_grace_seconds"
            };
            return cases[pb_1.Message.computeOneofCase(this, [5])];
        }
        get _tombstone_gc() {
            const cases: {
                [index: number]: "none" | "tombstone_gc";
            } = {
                0: "none",
                6: "tombstone_gc"
            };
            return cases[pb_1.Message.computeOneofCase(this, [6])];
        }
        get _bloom_filter_fp_chance() {
            const cases: {
                [index: number]: "none" | "bloom_filter_fp_chance";
            } = {
                0: "none",
                7: "bloom_filter_fp_chance"
            };
            return cases[pb_1.Message.computeOneofCase(this, [7])];
        }
        get _default_time_to_live() {
            const cases: {
                [index: number]: "none" | "default_time_to_live";
            } = {
                0: "none",
                8: "default_time_to_live"
            };
            return cases[pb_1.Message.computeOneofCase(this, [8])];
        }
        get _compaction() {
            const cases: {
                [index: number]: "none" | "compaction";
            } = {
                0: "none",
                9: "compaction"
            };
            return cases[pb_1.Message.computeOneofCase(this, [9])];
        }
        get _compress() {
            const cases: {
                [index: number]: "none" | "compress";
            } = {
                0: "none",
                10: "compress"
            };
            return cases[pb_1.Message.computeOneofCase(this, [10])];
        }
        get _caching() {
            const cases: {
                [index: number]: "none" | "caching";
            } = {
                0: "none",
                11: "caching"
            };
            return cases[pb_1.Message.computeOneofCase(this, [11])];
        }
        get _cdc() {
            const cases: {
                [index: number]: "none" | "cdc";
            } = {
                0: "none",
                12: "cdc"
            };
            return cases[pb_1.Message.computeOneofCase(this, [12])];
        }
        static fromObject(data: {
            comment?: string;
            read_repair_chance?: number;
            dclocal_read_repair_chance?: number;
            speculative_retry?: ReturnType<typeof SpeculativeRetry.prototype.toObject>;
            gc_grace_seconds?: number;
            tombstone_gc?: TombstoneGCMode;
            bloom_filter_fp_chance?: number;
            default_time_to_live?: number;
            compaction?: ReturnType<typeof CompactionMode.prototype.toObject>;
            compress?: ReturnType<typeof CompressionOption.prototype.toObject>;
            caching?: boolean;
            cdc?: ReturnType<typeof CDCOption.prototype.toObject>;
            clustering_order_by?: ReturnType<typeof ClusteringOrderBy.prototype.toObject>[];
        }): TableNativeOption {
            const message = new TableNativeOption({});
            if (data.comment != null) {
                message.comment = data.comment;
            }
            if (data.read_repair_chance != null) {
                message.read_repair_chance = data.read_repair_chance;
            }
            if (data.dclocal_read_repair_chance != null) {
                message.dclocal_read_repair_chance = data.dclocal_read_repair_chance;
            }
            if (data.speculative_retry != null) {
                message.speculative_retry = SpeculativeRetry.fromObject(data.speculative_retry);
            }
            if (data.gc_grace_seconds != null) {
                message.gc_grace_seconds = data.gc_grace_seconds;
            }
            if (data.tombstone_gc != null) {
                message.tombstone_gc = data.tombstone_gc;
            }
            if (data.bloom_filter_fp_chance != null) {
                message.bloom_filter_fp_chance = data.bloom_filter_fp_chance;
            }
            if (data.default_time_to_live != null) {
                message.default_time_to_live = data.default_time_to_live;
            }
            if (data.compaction != null) {
                message.compaction = CompactionMode.fromObject(data.compaction);
            }
            if (data.compress != null) {
                message.compress = CompressionOption.fromObject(data.compress);
            }
            if (data.caching != null) {
                message.caching = data.caching;
            }
            if (data.cdc != null) {
                message.cdc = CDCOption.fromObject(data.cdc);
            }
            if (data.clustering_order_by != null) {
                message.clustering_order_by = data.clustering_order_by.map(item => ClusteringOrderBy.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                comment?: string;
                read_repair_chance?: number;
                dclocal_read_repair_chance?: number;
                speculative_retry?: ReturnType<typeof SpeculativeRetry.prototype.toObject>;
                gc_grace_seconds?: number;
                tombstone_gc?: TombstoneGCMode;
                bloom_filter_fp_chance?: number;
                default_time_to_live?: number;
                compaction?: ReturnType<typeof CompactionMode.prototype.toObject>;
                compress?: ReturnType<typeof CompressionOption.prototype.toObject>;
                caching?: boolean;
                cdc?: ReturnType<typeof CDCOption.prototype.toObject>;
                clustering_order_by?: ReturnType<typeof ClusteringOrderBy.prototype.toObject>[];
            } = {};
            if (this.comment != null) {
                data.comment = this.comment;
            }
            if (this.read_repair_chance != null) {
                data.read_repair_chance = this.read_repair_chance;
            }
            if (this.dclocal_read_repair_chance != null) {
                data.dclocal_read_repair_chance = this.dclocal_read_repair_chance;
            }
            if (this.speculative_retry != null) {
                data.speculative_retry = this.speculative_retry.toObject();
            }
            if (this.gc_grace_seconds != null) {
                data.gc_grace_seconds = this.gc_grace_seconds;
            }
            if (this.tombstone_gc != null) {
                data.tombstone_gc = this.tombstone_gc;
            }
            if (this.bloom_filter_fp_chance != null) {
                data.bloom_filter_fp_chance = this.bloom_filter_fp_chance;
            }
            if (this.default_time_to_live != null) {
                data.default_time_to_live = this.default_time_to_live;
            }
            if (this.compaction != null) {
                data.compaction = this.compaction.toObject();
            }
            if (this.compress != null) {
                data.compress = this.compress.toObject();
            }
            if (this.caching != null) {
                data.caching = this.caching;
            }
            if (this.cdc != null) {
                data.cdc = this.cdc.toObject();
            }
            if (this.clustering_order_by != null) {
                data.clustering_order_by = this.clustering_order_by.map((item: ClusteringOrderBy) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_comment)
                writer.writeString(1, this.comment);
            if (this.has_read_repair_chance)
                writer.writeDouble(2, this.read_repair_chance);
            if (this.has_dclocal_read_repair_chance)
                writer.writeDouble(3, this.dclocal_read_repair_chance);
            if (this.has_speculative_retry)
                writer.writeMessage(4, this.speculative_retry, () => this.speculative_retry.serialize(writer));
            if (this.has_gc_grace_seconds)
                writer.writeInt64(5, this.gc_grace_seconds);
            if (this.has_tombstone_gc)
                writer.writeEnum(6, this.tombstone_gc);
            if (this.has_bloom_filter_fp_chance)
                writer.writeDouble(7, this.bloom_filter_fp_chance);
            if (this.has_default_time_to_live)
                writer.writeInt64(8, this.default_time_to_live);
            if (this.has_compaction)
                writer.writeMessage(9, this.compaction, () => this.compaction.serialize(writer));
            if (this.has_compress)
                writer.writeMessage(10, this.compress, () => this.compress.serialize(writer));
            if (this.has_caching)
                writer.writeBool(11, this.caching);
            if (this.has_cdc)
                writer.writeMessage(12, this.cdc, () => this.cdc.serialize(writer));
            if (this.clustering_order_by.length)
                writer.writeRepeatedMessage(13, this.clustering_order_by, (item: ClusteringOrderBy) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TableNativeOption {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TableNativeOption();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.comment = reader.readString();
                        break;
                    case 2:
                        message.read_repair_chance = reader.readDouble();
                        break;
                    case 3:
                        message.dclocal_read_repair_chance = reader.readDouble();
                        break;
                    case 4:
                        reader.readMessage(message.speculative_retry, () => message.speculative_retry = SpeculativeRetry.deserialize(reader));
                        break;
                    case 5:
                        message.gc_grace_seconds = reader.readInt64();
                        break;
                    case 6:
                        message.tombstone_gc = reader.readEnum();
                        break;
                    case 7:
                        message.bloom_filter_fp_chance = reader.readDouble();
                        break;
                    case 8:
                        message.default_time_to_live = reader.readInt64();
                        break;
                    case 9:
                        reader.readMessage(message.compaction, () => message.compaction = CompactionMode.deserialize(reader));
                        break;
                    case 10:
                        reader.readMessage(message.compress, () => message.compress = CompressionOption.deserialize(reader));
                        break;
                    case 11:
                        message.caching = reader.readBool();
                        break;
                    case 12:
                        reader.readMessage(message.cdc, () => message.cdc = CDCOption.deserialize(reader));
                        break;
                    case 13:
                        reader.readMessage(message.clustering_order_by, () => pb_1.Message.addToRepeatedWrapperField(message, 13, ClusteringOrderBy.deserialize(reader), ClusteringOrderBy));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TableNativeOption {
            return TableNativeOption.deserialize(bytes);
        }
    }
    export class ClusteringOrderBy extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            sort_key?: string;
            order_by?: OrderBy;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("sort_key" in data && data.sort_key != undefined) {
                    this.sort_key = data.sort_key;
                }
                if ("order_by" in data && data.order_by != undefined) {
                    this.order_by = data.order_by;
                }
            }
        }
        get sort_key() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set sort_key(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get order_by() {
            return pb_1.Message.getFieldWithDefault(this, 2, OrderBy.OB_AES) as OrderBy;
        }
        set order_by(value: OrderBy) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            sort_key?: string;
            order_by?: OrderBy;
        }): ClusteringOrderBy {
            const message = new ClusteringOrderBy({});
            if (data.sort_key != null) {
                message.sort_key = data.sort_key;
            }
            if (data.order_by != null) {
                message.order_by = data.order_by;
            }
            return message;
        }
        toObject() {
            const data: {
                sort_key?: string;
                order_by?: OrderBy;
            } = {};
            if (this.sort_key != null) {
                data.sort_key = this.sort_key;
            }
            if (this.order_by != null) {
                data.order_by = this.order_by;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sort_key.length)
                writer.writeString(1, this.sort_key);
            if (this.order_by != OrderBy.OB_AES)
                writer.writeEnum(2, this.order_by);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ClusteringOrderBy {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ClusteringOrderBy();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sort_key = reader.readString();
                        break;
                    case 2:
                        message.order_by = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ClusteringOrderBy {
            return ClusteringOrderBy.deserialize(bytes);
        }
    }
    export class TableOption extends pb_1.Message {
        #one_of_decls: number[][] = [[1], [2], [3]];
        constructor(data?: any[] | ({
            mv?: MaterializedView[];
            local_secondary_index?: string[];
            global_secondary_index?: string[];
        } & (({
            name?: string;
        }) | ({
            option?: TableNativeOption;
        }) | ({
            primary_key?: PrimaryKey;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4, 5, 6], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("option" in data && data.option != undefined) {
                    this.option = data.option;
                }
                if ("primary_key" in data && data.primary_key != undefined) {
                    this.primary_key = data.primary_key;
                }
                if ("mv" in data && data.mv != undefined) {
                    this.mv = data.mv;
                }
                if ("local_secondary_index" in data && data.local_secondary_index != undefined) {
                    this.local_secondary_index = data.local_secondary_index;
                }
                if ("global_secondary_index" in data && data.global_secondary_index != undefined) {
                    this.global_secondary_index = data.global_secondary_index;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_name() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get option() {
            return pb_1.Message.getWrapperField(this, TableNativeOption, 2) as TableNativeOption;
        }
        set option(value: TableNativeOption) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[1], value);
        }
        get has_option() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get primary_key() {
            return pb_1.Message.getWrapperField(this, PrimaryKey, 3) as PrimaryKey;
        }
        set primary_key(value: PrimaryKey) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[2], value);
        }
        get has_primary_key() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get mv() {
            return pb_1.Message.getRepeatedWrapperField(this, MaterializedView, 4) as MaterializedView[];
        }
        set mv(value: MaterializedView[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get local_secondary_index() {
            return pb_1.Message.getFieldWithDefault(this, 5, []) as string[];
        }
        set local_secondary_index(value: string[]) {
            pb_1.Message.setField(this, 5, value);
        }
        get global_secondary_index() {
            return pb_1.Message.getFieldWithDefault(this, 6, []) as string[];
        }
        set global_secondary_index(value: string[]) {
            pb_1.Message.setField(this, 6, value);
        }
        get _name() {
            const cases: {
                [index: number]: "none" | "name";
            } = {
                0: "none",
                1: "name"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1])];
        }
        get _option() {
            const cases: {
                [index: number]: "none" | "option";
            } = {
                0: "none",
                2: "option"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        get _primary_key() {
            const cases: {
                [index: number]: "none" | "primary_key";
            } = {
                0: "none",
                3: "primary_key"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3])];
        }
        static fromObject(data: {
            name?: string;
            option?: ReturnType<typeof TableNativeOption.prototype.toObject>;
            primary_key?: ReturnType<typeof PrimaryKey.prototype.toObject>;
            mv?: ReturnType<typeof MaterializedView.prototype.toObject>[];
            local_secondary_index?: string[];
            global_secondary_index?: string[];
        }): TableOption {
            const message = new TableOption({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.option != null) {
                message.option = TableNativeOption.fromObject(data.option);
            }
            if (data.primary_key != null) {
                message.primary_key = PrimaryKey.fromObject(data.primary_key);
            }
            if (data.mv != null) {
                message.mv = data.mv.map(item => MaterializedView.fromObject(item));
            }
            if (data.local_secondary_index != null) {
                message.local_secondary_index = data.local_secondary_index;
            }
            if (data.global_secondary_index != null) {
                message.global_secondary_index = data.global_secondary_index;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                option?: ReturnType<typeof TableNativeOption.prototype.toObject>;
                primary_key?: ReturnType<typeof PrimaryKey.prototype.toObject>;
                mv?: ReturnType<typeof MaterializedView.prototype.toObject>[];
                local_secondary_index?: string[];
                global_secondary_index?: string[];
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.option != null) {
                data.option = this.option.toObject();
            }
            if (this.primary_key != null) {
                data.primary_key = this.primary_key.toObject();
            }
            if (this.mv != null) {
                data.mv = this.mv.map((item: MaterializedView) => item.toObject());
            }
            if (this.local_secondary_index != null) {
                data.local_secondary_index = this.local_secondary_index;
            }
            if (this.global_secondary_index != null) {
                data.global_secondary_index = this.global_secondary_index;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_name)
                writer.writeString(1, this.name);
            if (this.has_option)
                writer.writeMessage(2, this.option, () => this.option.serialize(writer));
            if (this.has_primary_key)
                writer.writeMessage(3, this.primary_key, () => this.primary_key.serialize(writer));
            if (this.mv.length)
                writer.writeRepeatedMessage(4, this.mv, (item: MaterializedView) => item.serialize(writer));
            if (this.local_secondary_index.length)
                writer.writeRepeatedString(5, this.local_secondary_index);
            if (this.global_secondary_index.length)
                writer.writeRepeatedString(6, this.global_secondary_index);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TableOption {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TableOption();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.option, () => message.option = TableNativeOption.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.primary_key, () => message.primary_key = PrimaryKey.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.mv, () => pb_1.Message.addToRepeatedWrapperField(message, 4, MaterializedView.deserialize(reader), MaterializedView));
                        break;
                    case 5:
                        pb_1.Message.addToRepeatedField(message, 5, reader.readString());
                        break;
                    case 6:
                        pb_1.Message.addToRepeatedField(message, 6, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TableOption {
            return TableOption.deserialize(bytes);
        }
    }
    export class FieldOption extends pb_1.Message {
        #one_of_decls: number[][] = [[2, 3], [1], [4]];
        constructor(data?: any[] | ({} & (({
            base?: NativeType;
            udt?: never;
        } | {
            base?: never;
            udt?: string;
        }) | ({
            name?: string;
        }) | ({
            exclude?: boolean;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("base" in data && data.base != undefined) {
                    this.base = data.base;
                }
                if ("udt" in data && data.udt != undefined) {
                    this.udt = data.udt;
                }
                if ("exclude" in data && data.exclude != undefined) {
                    this.exclude = data.exclude;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[1], value);
        }
        get has_name() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get base() {
            return pb_1.Message.getFieldWithDefault(this, 2, NativeType.NT_UNKNOWN) as NativeType;
        }
        set base(value: NativeType) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
        }
        get has_base() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get udt() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set udt(value: string) {
            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[0], value);
        }
        get has_udt() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get exclude() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set exclude(value: boolean) {
            pb_1.Message.setOneofField(this, 4, this.#one_of_decls[2], value);
        }
        get has_exclude() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get ty() {
            const cases: {
                [index: number]: "none" | "base" | "udt";
            } = {
                0: "none",
                2: "base",
                3: "udt"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2, 3])];
        }
        get _name() {
            const cases: {
                [index: number]: "none" | "name";
            } = {
                0: "none",
                1: "name"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1])];
        }
        get _exclude() {
            const cases: {
                [index: number]: "none" | "exclude";
            } = {
                0: "none",
                4: "exclude"
            };
            return cases[pb_1.Message.computeOneofCase(this, [4])];
        }
        static fromObject(data: {
            name?: string;
            base?: NativeType;
            udt?: string;
            exclude?: boolean;
        }): FieldOption {
            const message = new FieldOption({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.base != null) {
                message.base = data.base;
            }
            if (data.udt != null) {
                message.udt = data.udt;
            }
            if (data.exclude != null) {
                message.exclude = data.exclude;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                base?: NativeType;
                udt?: string;
                exclude?: boolean;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.base != null) {
                data.base = this.base;
            }
            if (this.udt != null) {
                data.udt = this.udt;
            }
            if (this.exclude != null) {
                data.exclude = this.exclude;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_name)
                writer.writeString(1, this.name);
            if (this.has_base)
                writer.writeEnum(2, this.base);
            if (this.has_udt)
                writer.writeString(3, this.udt);
            if (this.has_exclude)
                writer.writeBool(4, this.exclude);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FieldOption {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FieldOption();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.base = reader.readEnum();
                        break;
                    case 3:
                        message.udt = reader.readString();
                        break;
                    case 4:
                        message.exclude = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FieldOption {
            return FieldOption.deserialize(bytes);
        }
    }
}
