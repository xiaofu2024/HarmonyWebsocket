/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.26.1
 * source: api/core/tenant.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../option";
import * as dependency_2 from "./../../google/protobuf/empty";
import * as dependency_3 from "./../../google/protobuf/timestamp";
import * as dependency_4 from "./../../validate/validate";
import * as dependency_5 from "./../common/c_worker";
import * as dependency_6 from "./../common/c_base";
import * as dependency_7 from "./../common/c_entrance";
import * as dependency_8 from "./../common/c_tenant";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace api.core {
    export enum RoleRoute {
        Role_ROUTE_WORKER = 0,
        Role_ROUTE_CUSTOMER = 1,
        Role_ROUTE_ALL = 2
    }
    export class PageParam extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            size?: number;
            page?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("size" in data && data.size != undefined) {
                    this.size = data.size;
                }
                if ("page" in data && data.page != undefined) {
                    this.page = data.page;
                }
            }
        }
        get size() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set size(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get page() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set page(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            size?: number;
            page?: number;
        }): PageParam {
            const message = new PageParam({});
            if (data.size != null) {
                message.size = data.size;
            }
            if (data.page != null) {
                message.page = data.page;
            }
            return message;
        }
        toObject() {
            const data: {
                size?: number;
                page?: number;
            } = {};
            if (this.size != null) {
                data.size = this.size;
            }
            if (this.page != null) {
                data.page = this.page;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.size != 0)
                writer.writeUint32(1, this.size);
            if (this.page != 0)
                writer.writeInt64(2, this.page);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PageParam {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PageParam();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.size = reader.readUint32();
                        break;
                    case 2:
                        message.page = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PageParam {
            return PageParam.deserialize(bytes);
        }
    }
    export class RouteRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            role_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("role_id" in data && data.role_id != undefined) {
                    this.role_id = data.role_id;
                }
            }
        }
        get role_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set role_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            role_id?: number;
        }): RouteRequest {
            const message = new RouteRequest({});
            if (data.role_id != null) {
                message.role_id = data.role_id;
            }
            return message;
        }
        toObject() {
            const data: {
                role_id?: number;
            } = {};
            if (this.role_id != null) {
                data.role_id = this.role_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.role_id != 0)
                writer.writeInt32(1, this.role_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RouteRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RouteRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.role_id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RouteRequest {
            return RouteRequest.deserialize(bytes);
        }
    }
    export class RouteItem extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            route_name?: string;
            route_url?: string;
            route_role?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("route_name" in data && data.route_name != undefined) {
                    this.route_name = data.route_name;
                }
                if ("route_url" in data && data.route_url != undefined) {
                    this.route_url = data.route_url;
                }
                if ("route_role" in data && data.route_role != undefined) {
                    this.route_role = data.route_role;
                }
            }
        }
        get route_name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set route_name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get route_url() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set route_url(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get route_role() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set route_role(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            route_name?: string;
            route_url?: string;
            route_role?: number;
        }): RouteItem {
            const message = new RouteItem({});
            if (data.route_name != null) {
                message.route_name = data.route_name;
            }
            if (data.route_url != null) {
                message.route_url = data.route_url;
            }
            if (data.route_role != null) {
                message.route_role = data.route_role;
            }
            return message;
        }
        toObject() {
            const data: {
                route_name?: string;
                route_url?: string;
                route_role?: number;
            } = {};
            if (this.route_name != null) {
                data.route_name = this.route_name;
            }
            if (this.route_url != null) {
                data.route_url = this.route_url;
            }
            if (this.route_role != null) {
                data.route_role = this.route_role;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.route_name.length)
                writer.writeString(1, this.route_name);
            if (this.route_url.length)
                writer.writeString(2, this.route_url);
            if (this.route_role != 0)
                writer.writeInt32(3, this.route_role);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RouteItem {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RouteItem();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.route_name = reader.readString();
                        break;
                    case 2:
                        message.route_url = reader.readString();
                        break;
                    case 3:
                        message.route_role = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RouteItem {
            return RouteItem.deserialize(bytes);
        }
    }
    export class RouteResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            routes?: RouteItem[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("routes" in data && data.routes != undefined) {
                    this.routes = data.routes;
                }
            }
        }
        get routes() {
            return pb_1.Message.getRepeatedWrapperField(this, RouteItem, 1) as RouteItem[];
        }
        set routes(value: RouteItem[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            routes?: ReturnType<typeof RouteItem.prototype.toObject>[];
        }): RouteResponse {
            const message = new RouteResponse({});
            if (data.routes != null) {
                message.routes = data.routes.map(item => RouteItem.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                routes?: ReturnType<typeof RouteItem.prototype.toObject>[];
            } = {};
            if (this.routes != null) {
                data.routes = this.routes.map((item: RouteItem) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.routes.length)
                writer.writeRepeatedMessage(1, this.routes, (item: RouteItem) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RouteResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RouteResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.routes, () => pb_1.Message.addToRepeatedWrapperField(message, 1, RouteItem.deserialize(reader), RouteItem));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RouteResponse {
            return RouteResponse.deserialize(bytes);
        }
    }
    export class LoginRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            account?: string;
            password?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("account" in data && data.account != undefined) {
                    this.account = data.account;
                }
                if ("password" in data && data.password != undefined) {
                    this.password = data.password;
                }
            }
        }
        get account() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set account(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get password() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set password(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            account?: string;
            password?: string;
        }): LoginRequest {
            const message = new LoginRequest({});
            if (data.account != null) {
                message.account = data.account;
            }
            if (data.password != null) {
                message.password = data.password;
            }
            return message;
        }
        toObject() {
            const data: {
                account?: string;
                password?: string;
            } = {};
            if (this.account != null) {
                data.account = this.account;
            }
            if (this.password != null) {
                data.password = this.password;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.account.length)
                writer.writeString(1, this.account);
            if (this.password.length)
                writer.writeString(2, this.password);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LoginRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LoginRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.account = reader.readString();
                        break;
                    case 2:
                        message.password = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LoginRequest {
            return LoginRequest.deserialize(bytes);
        }
    }
    export class LoginResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            token?: string;
            items?: dependency_5.api.common.Worker;
            chat_expire_time?: number;
            bind_gl?: boolean;
            background_line?: string;
            clique?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
                if ("items" in data && data.items != undefined) {
                    this.items = data.items;
                }
                if ("chat_expire_time" in data && data.chat_expire_time != undefined) {
                    this.chat_expire_time = data.chat_expire_time;
                }
                if ("bind_gl" in data && data.bind_gl != undefined) {
                    this.bind_gl = data.bind_gl;
                }
                if ("background_line" in data && data.background_line != undefined) {
                    this.background_line = data.background_line;
                }
                if ("clique" in data && data.clique != undefined) {
                    this.clique = data.clique;
                }
            }
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get items() {
            return pb_1.Message.getWrapperField(this, dependency_5.api.common.Worker, 2) as dependency_5.api.common.Worker;
        }
        set items(value: dependency_5.api.common.Worker) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_items() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get chat_expire_time() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set chat_expire_time(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get bind_gl() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set bind_gl(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        get background_line() {
            return pb_1.Message.getFieldWithDefault(this, 21, "") as string;
        }
        set background_line(value: string) {
            pb_1.Message.setField(this, 21, value);
        }
        get clique() {
            return pb_1.Message.getFieldWithDefault(this, 22, 0) as number;
        }
        set clique(value: number) {
            pb_1.Message.setField(this, 22, value);
        }
        static fromObject(data: {
            token?: string;
            items?: ReturnType<typeof dependency_5.api.common.Worker.prototype.toObject>;
            chat_expire_time?: number;
            bind_gl?: boolean;
            background_line?: string;
            clique?: number;
        }): LoginResponse {
            const message = new LoginResponse({});
            if (data.token != null) {
                message.token = data.token;
            }
            if (data.items != null) {
                message.items = dependency_5.api.common.Worker.fromObject(data.items);
            }
            if (data.chat_expire_time != null) {
                message.chat_expire_time = data.chat_expire_time;
            }
            if (data.bind_gl != null) {
                message.bind_gl = data.bind_gl;
            }
            if (data.background_line != null) {
                message.background_line = data.background_line;
            }
            if (data.clique != null) {
                message.clique = data.clique;
            }
            return message;
        }
        toObject() {
            const data: {
                token?: string;
                items?: ReturnType<typeof dependency_5.api.common.Worker.prototype.toObject>;
                chat_expire_time?: number;
                bind_gl?: boolean;
                background_line?: string;
                clique?: number;
            } = {};
            if (this.token != null) {
                data.token = this.token;
            }
            if (this.items != null) {
                data.items = this.items.toObject();
            }
            if (this.chat_expire_time != null) {
                data.chat_expire_time = this.chat_expire_time;
            }
            if (this.bind_gl != null) {
                data.bind_gl = this.bind_gl;
            }
            if (this.background_line != null) {
                data.background_line = this.background_line;
            }
            if (this.clique != null) {
                data.clique = this.clique;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.token.length)
                writer.writeString(1, this.token);
            if (this.has_items)
                writer.writeMessage(2, this.items, () => this.items.serialize(writer));
            if (this.chat_expire_time != 0)
                writer.writeInt32(3, this.chat_expire_time);
            if (this.bind_gl != false)
                writer.writeBool(4, this.bind_gl);
            if (this.background_line.length)
                writer.writeString(21, this.background_line);
            if (this.clique != 0)
                writer.writeInt32(22, this.clique);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LoginResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LoginResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.token = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.items, () => message.items = dependency_5.api.common.Worker.deserialize(reader));
                        break;
                    case 3:
                        message.chat_expire_time = reader.readInt32();
                        break;
                    case 4:
                        message.bind_gl = reader.readBool();
                        break;
                    case 21:
                        message.background_line = reader.readString();
                        break;
                    case 22:
                        message.clique = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LoginResponse {
            return LoginResponse.deserialize(bytes);
        }
    }
    export class ManagerLoginRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            worker_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("worker_id" in data && data.worker_id != undefined) {
                    this.worker_id = data.worker_id;
                }
            }
        }
        get worker_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set worker_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            worker_id?: number;
        }): ManagerLoginRequest {
            const message = new ManagerLoginRequest({});
            if (data.worker_id != null) {
                message.worker_id = data.worker_id;
            }
            return message;
        }
        toObject() {
            const data: {
                worker_id?: number;
            } = {};
            if (this.worker_id != null) {
                data.worker_id = this.worker_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.worker_id != 0)
                writer.writeInt32(1, this.worker_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ManagerLoginRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ManagerLoginRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.worker_id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ManagerLoginRequest {
            return ManagerLoginRequest.deserialize(bytes);
        }
    }
    export class ManagerLoginResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            token?: string;
            items?: dependency_5.api.common.Worker;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
                if ("items" in data && data.items != undefined) {
                    this.items = data.items;
                }
            }
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get items() {
            return pb_1.Message.getWrapperField(this, dependency_5.api.common.Worker, 2) as dependency_5.api.common.Worker;
        }
        set items(value: dependency_5.api.common.Worker) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_items() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            token?: string;
            items?: ReturnType<typeof dependency_5.api.common.Worker.prototype.toObject>;
        }): ManagerLoginResponse {
            const message = new ManagerLoginResponse({});
            if (data.token != null) {
                message.token = data.token;
            }
            if (data.items != null) {
                message.items = dependency_5.api.common.Worker.fromObject(data.items);
            }
            return message;
        }
        toObject() {
            const data: {
                token?: string;
                items?: ReturnType<typeof dependency_5.api.common.Worker.prototype.toObject>;
            } = {};
            if (this.token != null) {
                data.token = this.token;
            }
            if (this.items != null) {
                data.items = this.items.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.token.length)
                writer.writeString(1, this.token);
            if (this.has_items)
                writer.writeMessage(2, this.items, () => this.items.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ManagerLoginResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ManagerLoginResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.token = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.items, () => message.items = dependency_5.api.common.Worker.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ManagerLoginResponse {
            return ManagerLoginResponse.deserialize(bytes);
        }
    }
    export class TenantCreateRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            account?: string;
            password?: string;
            worker_capacity?: number;
            daily_service_capacity?: number;
            clique_id?: number;
            line_group_id?: number;
            h5_line?: string;
            background_line?: string;
            remark?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("account" in data && data.account != undefined) {
                    this.account = data.account;
                }
                if ("password" in data && data.password != undefined) {
                    this.password = data.password;
                }
                if ("worker_capacity" in data && data.worker_capacity != undefined) {
                    this.worker_capacity = data.worker_capacity;
                }
                if ("daily_service_capacity" in data && data.daily_service_capacity != undefined) {
                    this.daily_service_capacity = data.daily_service_capacity;
                }
                if ("clique_id" in data && data.clique_id != undefined) {
                    this.clique_id = data.clique_id;
                }
                if ("line_group_id" in data && data.line_group_id != undefined) {
                    this.line_group_id = data.line_group_id;
                }
                if ("h5_line" in data && data.h5_line != undefined) {
                    this.h5_line = data.h5_line;
                }
                if ("background_line" in data && data.background_line != undefined) {
                    this.background_line = data.background_line;
                }
                if ("remark" in data && data.remark != undefined) {
                    this.remark = data.remark;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get account() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set account(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get password() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set password(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get worker_capacity() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set worker_capacity(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get daily_service_capacity() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set daily_service_capacity(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get clique_id() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set clique_id(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get line_group_id() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set line_group_id(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get h5_line() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set h5_line(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get background_line() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set background_line(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get remark() {
            return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
        }
        set remark(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        static fromObject(data: {
            name?: string;
            account?: string;
            password?: string;
            worker_capacity?: number;
            daily_service_capacity?: number;
            clique_id?: number;
            line_group_id?: number;
            h5_line?: string;
            background_line?: string;
            remark?: string;
        }): TenantCreateRequest {
            const message = new TenantCreateRequest({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.account != null) {
                message.account = data.account;
            }
            if (data.password != null) {
                message.password = data.password;
            }
            if (data.worker_capacity != null) {
                message.worker_capacity = data.worker_capacity;
            }
            if (data.daily_service_capacity != null) {
                message.daily_service_capacity = data.daily_service_capacity;
            }
            if (data.clique_id != null) {
                message.clique_id = data.clique_id;
            }
            if (data.line_group_id != null) {
                message.line_group_id = data.line_group_id;
            }
            if (data.h5_line != null) {
                message.h5_line = data.h5_line;
            }
            if (data.background_line != null) {
                message.background_line = data.background_line;
            }
            if (data.remark != null) {
                message.remark = data.remark;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                account?: string;
                password?: string;
                worker_capacity?: number;
                daily_service_capacity?: number;
                clique_id?: number;
                line_group_id?: number;
                h5_line?: string;
                background_line?: string;
                remark?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.account != null) {
                data.account = this.account;
            }
            if (this.password != null) {
                data.password = this.password;
            }
            if (this.worker_capacity != null) {
                data.worker_capacity = this.worker_capacity;
            }
            if (this.daily_service_capacity != null) {
                data.daily_service_capacity = this.daily_service_capacity;
            }
            if (this.clique_id != null) {
                data.clique_id = this.clique_id;
            }
            if (this.line_group_id != null) {
                data.line_group_id = this.line_group_id;
            }
            if (this.h5_line != null) {
                data.h5_line = this.h5_line;
            }
            if (this.background_line != null) {
                data.background_line = this.background_line;
            }
            if (this.remark != null) {
                data.remark = this.remark;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.account.length)
                writer.writeString(2, this.account);
            if (this.password.length)
                writer.writeString(3, this.password);
            if (this.worker_capacity != 0)
                writer.writeInt32(4, this.worker_capacity);
            if (this.daily_service_capacity != 0)
                writer.writeInt32(5, this.daily_service_capacity);
            if (this.clique_id != 0)
                writer.writeInt32(6, this.clique_id);
            if (this.line_group_id != 0)
                writer.writeInt32(7, this.line_group_id);
            if (this.h5_line.length)
                writer.writeString(8, this.h5_line);
            if (this.background_line.length)
                writer.writeString(9, this.background_line);
            if (this.remark.length)
                writer.writeString(10, this.remark);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TenantCreateRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TenantCreateRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.account = reader.readString();
                        break;
                    case 3:
                        message.password = reader.readString();
                        break;
                    case 4:
                        message.worker_capacity = reader.readInt32();
                        break;
                    case 5:
                        message.daily_service_capacity = reader.readInt32();
                        break;
                    case 6:
                        message.clique_id = reader.readInt32();
                        break;
                    case 7:
                        message.line_group_id = reader.readInt32();
                        break;
                    case 8:
                        message.h5_line = reader.readString();
                        break;
                    case 9:
                        message.background_line = reader.readString();
                        break;
                    case 10:
                        message.remark = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TenantCreateRequest {
            return TenantCreateRequest.deserialize(bytes);
        }
    }
    export class TenantQueryRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            batch?: dependency_6.api.common.Batch;
            group_id?: number;
            keyword?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("batch" in data && data.batch != undefined) {
                    this.batch = data.batch;
                }
                if ("group_id" in data && data.group_id != undefined) {
                    this.group_id = data.group_id;
                }
                if ("keyword" in data && data.keyword != undefined) {
                    this.keyword = data.keyword;
                }
            }
        }
        get batch() {
            return pb_1.Message.getWrapperField(this, dependency_6.api.common.Batch, 1) as dependency_6.api.common.Batch;
        }
        set batch(value: dependency_6.api.common.Batch) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_batch() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get group_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set group_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get keyword() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set keyword(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            batch?: ReturnType<typeof dependency_6.api.common.Batch.prototype.toObject>;
            group_id?: number;
            keyword?: string;
        }): TenantQueryRequest {
            const message = new TenantQueryRequest({});
            if (data.batch != null) {
                message.batch = dependency_6.api.common.Batch.fromObject(data.batch);
            }
            if (data.group_id != null) {
                message.group_id = data.group_id;
            }
            if (data.keyword != null) {
                message.keyword = data.keyword;
            }
            return message;
        }
        toObject() {
            const data: {
                batch?: ReturnType<typeof dependency_6.api.common.Batch.prototype.toObject>;
                group_id?: number;
                keyword?: string;
            } = {};
            if (this.batch != null) {
                data.batch = this.batch.toObject();
            }
            if (this.group_id != null) {
                data.group_id = this.group_id;
            }
            if (this.keyword != null) {
                data.keyword = this.keyword;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_batch)
                writer.writeMessage(1, this.batch, () => this.batch.serialize(writer));
            if (this.group_id != 0)
                writer.writeInt32(2, this.group_id);
            if (this.keyword.length)
                writer.writeString(3, this.keyword);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TenantQueryRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TenantQueryRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.batch, () => message.batch = dependency_6.api.common.Batch.deserialize(reader));
                        break;
                    case 2:
                        message.group_id = reader.readInt32();
                        break;
                    case 3:
                        message.keyword = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TenantQueryRequest {
            return TenantQueryRequest.deserialize(bytes);
        }
    }
    export class TenantQueryResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            batch?: dependency_6.api.common.Batch;
            group_id?: number;
            keyword?: string;
            tenant_item?: TenantItem[];
            total?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("batch" in data && data.batch != undefined) {
                    this.batch = data.batch;
                }
                if ("group_id" in data && data.group_id != undefined) {
                    this.group_id = data.group_id;
                }
                if ("keyword" in data && data.keyword != undefined) {
                    this.keyword = data.keyword;
                }
                if ("tenant_item" in data && data.tenant_item != undefined) {
                    this.tenant_item = data.tenant_item;
                }
                if ("total" in data && data.total != undefined) {
                    this.total = data.total;
                }
            }
        }
        get batch() {
            return pb_1.Message.getWrapperField(this, dependency_6.api.common.Batch, 1) as dependency_6.api.common.Batch;
        }
        set batch(value: dependency_6.api.common.Batch) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_batch() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get group_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set group_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get keyword() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set keyword(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get tenant_item() {
            return pb_1.Message.getRepeatedWrapperField(this, TenantItem, 4) as TenantItem[];
        }
        set tenant_item(value: TenantItem[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get total() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set total(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            batch?: ReturnType<typeof dependency_6.api.common.Batch.prototype.toObject>;
            group_id?: number;
            keyword?: string;
            tenant_item?: ReturnType<typeof TenantItem.prototype.toObject>[];
            total?: number;
        }): TenantQueryResponse {
            const message = new TenantQueryResponse({});
            if (data.batch != null) {
                message.batch = dependency_6.api.common.Batch.fromObject(data.batch);
            }
            if (data.group_id != null) {
                message.group_id = data.group_id;
            }
            if (data.keyword != null) {
                message.keyword = data.keyword;
            }
            if (data.tenant_item != null) {
                message.tenant_item = data.tenant_item.map(item => TenantItem.fromObject(item));
            }
            if (data.total != null) {
                message.total = data.total;
            }
            return message;
        }
        toObject() {
            const data: {
                batch?: ReturnType<typeof dependency_6.api.common.Batch.prototype.toObject>;
                group_id?: number;
                keyword?: string;
                tenant_item?: ReturnType<typeof TenantItem.prototype.toObject>[];
                total?: number;
            } = {};
            if (this.batch != null) {
                data.batch = this.batch.toObject();
            }
            if (this.group_id != null) {
                data.group_id = this.group_id;
            }
            if (this.keyword != null) {
                data.keyword = this.keyword;
            }
            if (this.tenant_item != null) {
                data.tenant_item = this.tenant_item.map((item: TenantItem) => item.toObject());
            }
            if (this.total != null) {
                data.total = this.total;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_batch)
                writer.writeMessage(1, this.batch, () => this.batch.serialize(writer));
            if (this.group_id != 0)
                writer.writeInt32(2, this.group_id);
            if (this.keyword.length)
                writer.writeString(3, this.keyword);
            if (this.tenant_item.length)
                writer.writeRepeatedMessage(4, this.tenant_item, (item: TenantItem) => item.serialize(writer));
            if (this.total != 0)
                writer.writeInt32(5, this.total);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TenantQueryResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TenantQueryResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.batch, () => message.batch = dependency_6.api.common.Batch.deserialize(reader));
                        break;
                    case 2:
                        message.group_id = reader.readInt32();
                        break;
                    case 3:
                        message.keyword = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.tenant_item, () => pb_1.Message.addToRepeatedWrapperField(message, 4, TenantItem.deserialize(reader), TenantItem));
                        break;
                    case 5:
                        message.total = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TenantQueryResponse {
            return TenantQueryResponse.deserialize(bytes);
        }
    }
    export class DeleteTenantRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            tenant_id?: number;
            password?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("tenant_id" in data && data.tenant_id != undefined) {
                    this.tenant_id = data.tenant_id;
                }
                if ("password" in data && data.password != undefined) {
                    this.password = data.password;
                }
            }
        }
        get tenant_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set tenant_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get password() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set password(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            tenant_id?: number;
            password?: string;
        }): DeleteTenantRequest {
            const message = new DeleteTenantRequest({});
            if (data.tenant_id != null) {
                message.tenant_id = data.tenant_id;
            }
            if (data.password != null) {
                message.password = data.password;
            }
            return message;
        }
        toObject() {
            const data: {
                tenant_id?: number;
                password?: string;
            } = {};
            if (this.tenant_id != null) {
                data.tenant_id = this.tenant_id;
            }
            if (this.password != null) {
                data.password = this.password;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.tenant_id != 0)
                writer.writeUint32(1, this.tenant_id);
            if (this.password.length)
                writer.writeString(2, this.password);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteTenantRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteTenantRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.tenant_id = reader.readUint32();
                        break;
                    case 2:
                        message.password = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteTenantRequest {
            return DeleteTenantRequest.deserialize(bytes);
        }
    }
    export class TenantItem extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            tenant_id?: number;
            tenant_public_key?: string;
            name?: string;
            workers_capacity?: number;
            daily_service_capacity?: number;
            entrance_num?: number;
            user_name?: string;
            average_monthly?: number;
            cumulative_volume?: number;
            password?: string;
            create_at?: dependency_3.google.protobuf.Timestamp;
            delete_at?: dependency_3.google.protobuf.Timestamp;
            group_name?: string;
            clique_Id?: number;
            api_request_url?: string;
            api_name?: string;
            api_pwd?: string;
            api_pubKey?: string;
            api_recharge_request_url?: string;
            line_group_id?: number;
            h5_line?: string;
            background_line?: string;
            line_group?: dependency_8.api.common.TenantsLineGroup;
            update_at?: dependency_3.google.protobuf.Timestamp;
            h5_domain_cert?: string;
            remark?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("tenant_id" in data && data.tenant_id != undefined) {
                    this.tenant_id = data.tenant_id;
                }
                if ("tenant_public_key" in data && data.tenant_public_key != undefined) {
                    this.tenant_public_key = data.tenant_public_key;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("workers_capacity" in data && data.workers_capacity != undefined) {
                    this.workers_capacity = data.workers_capacity;
                }
                if ("daily_service_capacity" in data && data.daily_service_capacity != undefined) {
                    this.daily_service_capacity = data.daily_service_capacity;
                }
                if ("entrance_num" in data && data.entrance_num != undefined) {
                    this.entrance_num = data.entrance_num;
                }
                if ("user_name" in data && data.user_name != undefined) {
                    this.user_name = data.user_name;
                }
                if ("average_monthly" in data && data.average_monthly != undefined) {
                    this.average_monthly = data.average_monthly;
                }
                if ("cumulative_volume" in data && data.cumulative_volume != undefined) {
                    this.cumulative_volume = data.cumulative_volume;
                }
                if ("password" in data && data.password != undefined) {
                    this.password = data.password;
                }
                if ("create_at" in data && data.create_at != undefined) {
                    this.create_at = data.create_at;
                }
                if ("delete_at" in data && data.delete_at != undefined) {
                    this.delete_at = data.delete_at;
                }
                if ("group_name" in data && data.group_name != undefined) {
                    this.group_name = data.group_name;
                }
                if ("clique_Id" in data && data.clique_Id != undefined) {
                    this.clique_Id = data.clique_Id;
                }
                if ("api_request_url" in data && data.api_request_url != undefined) {
                    this.api_request_url = data.api_request_url;
                }
                if ("api_name" in data && data.api_name != undefined) {
                    this.api_name = data.api_name;
                }
                if ("api_pwd" in data && data.api_pwd != undefined) {
                    this.api_pwd = data.api_pwd;
                }
                if ("api_pubKey" in data && data.api_pubKey != undefined) {
                    this.api_pubKey = data.api_pubKey;
                }
                if ("api_recharge_request_url" in data && data.api_recharge_request_url != undefined) {
                    this.api_recharge_request_url = data.api_recharge_request_url;
                }
                if ("line_group_id" in data && data.line_group_id != undefined) {
                    this.line_group_id = data.line_group_id;
                }
                if ("h5_line" in data && data.h5_line != undefined) {
                    this.h5_line = data.h5_line;
                }
                if ("background_line" in data && data.background_line != undefined) {
                    this.background_line = data.background_line;
                }
                if ("line_group" in data && data.line_group != undefined) {
                    this.line_group = data.line_group;
                }
                if ("update_at" in data && data.update_at != undefined) {
                    this.update_at = data.update_at;
                }
                if ("h5_domain_cert" in data && data.h5_domain_cert != undefined) {
                    this.h5_domain_cert = data.h5_domain_cert;
                }
                if ("remark" in data && data.remark != undefined) {
                    this.remark = data.remark;
                }
            }
        }
        get tenant_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set tenant_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get tenant_public_key() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set tenant_public_key(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get workers_capacity() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set workers_capacity(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get daily_service_capacity() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set daily_service_capacity(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get entrance_num() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set entrance_num(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get user_name() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set user_name(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get average_monthly() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set average_monthly(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get cumulative_volume() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set cumulative_volume(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get password() {
            return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
        }
        set password(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        get create_at() {
            return pb_1.Message.getWrapperField(this, dependency_3.google.protobuf.Timestamp, 11) as dependency_3.google.protobuf.Timestamp;
        }
        set create_at(value: dependency_3.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 11, value);
        }
        get has_create_at() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get delete_at() {
            return pb_1.Message.getWrapperField(this, dependency_3.google.protobuf.Timestamp, 12) as dependency_3.google.protobuf.Timestamp;
        }
        set delete_at(value: dependency_3.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 12, value);
        }
        get has_delete_at() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get group_name() {
            return pb_1.Message.getFieldWithDefault(this, 13, "") as string;
        }
        set group_name(value: string) {
            pb_1.Message.setField(this, 13, value);
        }
        get clique_Id() {
            return pb_1.Message.getFieldWithDefault(this, 14, 0) as number;
        }
        set clique_Id(value: number) {
            pb_1.Message.setField(this, 14, value);
        }
        get api_request_url() {
            return pb_1.Message.getFieldWithDefault(this, 15, "") as string;
        }
        set api_request_url(value: string) {
            pb_1.Message.setField(this, 15, value);
        }
        get api_name() {
            return pb_1.Message.getFieldWithDefault(this, 16, "") as string;
        }
        set api_name(value: string) {
            pb_1.Message.setField(this, 16, value);
        }
        get api_pwd() {
            return pb_1.Message.getFieldWithDefault(this, 17, "") as string;
        }
        set api_pwd(value: string) {
            pb_1.Message.setField(this, 17, value);
        }
        get api_pubKey() {
            return pb_1.Message.getFieldWithDefault(this, 18, "") as string;
        }
        set api_pubKey(value: string) {
            pb_1.Message.setField(this, 18, value);
        }
        get api_recharge_request_url() {
            return pb_1.Message.getFieldWithDefault(this, 19, "") as string;
        }
        set api_recharge_request_url(value: string) {
            pb_1.Message.setField(this, 19, value);
        }
        get line_group_id() {
            return pb_1.Message.getFieldWithDefault(this, 20, 0) as number;
        }
        set line_group_id(value: number) {
            pb_1.Message.setField(this, 20, value);
        }
        get h5_line() {
            return pb_1.Message.getFieldWithDefault(this, 21, "") as string;
        }
        set h5_line(value: string) {
            pb_1.Message.setField(this, 21, value);
        }
        get background_line() {
            return pb_1.Message.getFieldWithDefault(this, 22, "") as string;
        }
        set background_line(value: string) {
            pb_1.Message.setField(this, 22, value);
        }
        get line_group() {
            return pb_1.Message.getWrapperField(this, dependency_8.api.common.TenantsLineGroup, 23) as dependency_8.api.common.TenantsLineGroup;
        }
        set line_group(value: dependency_8.api.common.TenantsLineGroup) {
            pb_1.Message.setWrapperField(this, 23, value);
        }
        get has_line_group() {
            return pb_1.Message.getField(this, 23) != null;
        }
        get update_at() {
            return pb_1.Message.getWrapperField(this, dependency_3.google.protobuf.Timestamp, 24) as dependency_3.google.protobuf.Timestamp;
        }
        set update_at(value: dependency_3.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 24, value);
        }
        get has_update_at() {
            return pb_1.Message.getField(this, 24) != null;
        }
        get h5_domain_cert() {
            return pb_1.Message.getFieldWithDefault(this, 25, "") as string;
        }
        set h5_domain_cert(value: string) {
            pb_1.Message.setField(this, 25, value);
        }
        get remark() {
            return pb_1.Message.getFieldWithDefault(this, 26, "") as string;
        }
        set remark(value: string) {
            pb_1.Message.setField(this, 26, value);
        }
        static fromObject(data: {
            tenant_id?: number;
            tenant_public_key?: string;
            name?: string;
            workers_capacity?: number;
            daily_service_capacity?: number;
            entrance_num?: number;
            user_name?: string;
            average_monthly?: number;
            cumulative_volume?: number;
            password?: string;
            create_at?: ReturnType<typeof dependency_3.google.protobuf.Timestamp.prototype.toObject>;
            delete_at?: ReturnType<typeof dependency_3.google.protobuf.Timestamp.prototype.toObject>;
            group_name?: string;
            clique_Id?: number;
            api_request_url?: string;
            api_name?: string;
            api_pwd?: string;
            api_pubKey?: string;
            api_recharge_request_url?: string;
            line_group_id?: number;
            h5_line?: string;
            background_line?: string;
            line_group?: ReturnType<typeof dependency_8.api.common.TenantsLineGroup.prototype.toObject>;
            update_at?: ReturnType<typeof dependency_3.google.protobuf.Timestamp.prototype.toObject>;
            h5_domain_cert?: string;
            remark?: string;
        }): TenantItem {
            const message = new TenantItem({});
            if (data.tenant_id != null) {
                message.tenant_id = data.tenant_id;
            }
            if (data.tenant_public_key != null) {
                message.tenant_public_key = data.tenant_public_key;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.workers_capacity != null) {
                message.workers_capacity = data.workers_capacity;
            }
            if (data.daily_service_capacity != null) {
                message.daily_service_capacity = data.daily_service_capacity;
            }
            if (data.entrance_num != null) {
                message.entrance_num = data.entrance_num;
            }
            if (data.user_name != null) {
                message.user_name = data.user_name;
            }
            if (data.average_monthly != null) {
                message.average_monthly = data.average_monthly;
            }
            if (data.cumulative_volume != null) {
                message.cumulative_volume = data.cumulative_volume;
            }
            if (data.password != null) {
                message.password = data.password;
            }
            if (data.create_at != null) {
                message.create_at = dependency_3.google.protobuf.Timestamp.fromObject(data.create_at);
            }
            if (data.delete_at != null) {
                message.delete_at = dependency_3.google.protobuf.Timestamp.fromObject(data.delete_at);
            }
            if (data.group_name != null) {
                message.group_name = data.group_name;
            }
            if (data.clique_Id != null) {
                message.clique_Id = data.clique_Id;
            }
            if (data.api_request_url != null) {
                message.api_request_url = data.api_request_url;
            }
            if (data.api_name != null) {
                message.api_name = data.api_name;
            }
            if (data.api_pwd != null) {
                message.api_pwd = data.api_pwd;
            }
            if (data.api_pubKey != null) {
                message.api_pubKey = data.api_pubKey;
            }
            if (data.api_recharge_request_url != null) {
                message.api_recharge_request_url = data.api_recharge_request_url;
            }
            if (data.line_group_id != null) {
                message.line_group_id = data.line_group_id;
            }
            if (data.h5_line != null) {
                message.h5_line = data.h5_line;
            }
            if (data.background_line != null) {
                message.background_line = data.background_line;
            }
            if (data.line_group != null) {
                message.line_group = dependency_8.api.common.TenantsLineGroup.fromObject(data.line_group);
            }
            if (data.update_at != null) {
                message.update_at = dependency_3.google.protobuf.Timestamp.fromObject(data.update_at);
            }
            if (data.h5_domain_cert != null) {
                message.h5_domain_cert = data.h5_domain_cert;
            }
            if (data.remark != null) {
                message.remark = data.remark;
            }
            return message;
        }
        toObject() {
            const data: {
                tenant_id?: number;
                tenant_public_key?: string;
                name?: string;
                workers_capacity?: number;
                daily_service_capacity?: number;
                entrance_num?: number;
                user_name?: string;
                average_monthly?: number;
                cumulative_volume?: number;
                password?: string;
                create_at?: ReturnType<typeof dependency_3.google.protobuf.Timestamp.prototype.toObject>;
                delete_at?: ReturnType<typeof dependency_3.google.protobuf.Timestamp.prototype.toObject>;
                group_name?: string;
                clique_Id?: number;
                api_request_url?: string;
                api_name?: string;
                api_pwd?: string;
                api_pubKey?: string;
                api_recharge_request_url?: string;
                line_group_id?: number;
                h5_line?: string;
                background_line?: string;
                line_group?: ReturnType<typeof dependency_8.api.common.TenantsLineGroup.prototype.toObject>;
                update_at?: ReturnType<typeof dependency_3.google.protobuf.Timestamp.prototype.toObject>;
                h5_domain_cert?: string;
                remark?: string;
            } = {};
            if (this.tenant_id != null) {
                data.tenant_id = this.tenant_id;
            }
            if (this.tenant_public_key != null) {
                data.tenant_public_key = this.tenant_public_key;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.workers_capacity != null) {
                data.workers_capacity = this.workers_capacity;
            }
            if (this.daily_service_capacity != null) {
                data.daily_service_capacity = this.daily_service_capacity;
            }
            if (this.entrance_num != null) {
                data.entrance_num = this.entrance_num;
            }
            if (this.user_name != null) {
                data.user_name = this.user_name;
            }
            if (this.average_monthly != null) {
                data.average_monthly = this.average_monthly;
            }
            if (this.cumulative_volume != null) {
                data.cumulative_volume = this.cumulative_volume;
            }
            if (this.password != null) {
                data.password = this.password;
            }
            if (this.create_at != null) {
                data.create_at = this.create_at.toObject();
            }
            if (this.delete_at != null) {
                data.delete_at = this.delete_at.toObject();
            }
            if (this.group_name != null) {
                data.group_name = this.group_name;
            }
            if (this.clique_Id != null) {
                data.clique_Id = this.clique_Id;
            }
            if (this.api_request_url != null) {
                data.api_request_url = this.api_request_url;
            }
            if (this.api_name != null) {
                data.api_name = this.api_name;
            }
            if (this.api_pwd != null) {
                data.api_pwd = this.api_pwd;
            }
            if (this.api_pubKey != null) {
                data.api_pubKey = this.api_pubKey;
            }
            if (this.api_recharge_request_url != null) {
                data.api_recharge_request_url = this.api_recharge_request_url;
            }
            if (this.line_group_id != null) {
                data.line_group_id = this.line_group_id;
            }
            if (this.h5_line != null) {
                data.h5_line = this.h5_line;
            }
            if (this.background_line != null) {
                data.background_line = this.background_line;
            }
            if (this.line_group != null) {
                data.line_group = this.line_group.toObject();
            }
            if (this.update_at != null) {
                data.update_at = this.update_at.toObject();
            }
            if (this.h5_domain_cert != null) {
                data.h5_domain_cert = this.h5_domain_cert;
            }
            if (this.remark != null) {
                data.remark = this.remark;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.tenant_id != 0)
                writer.writeUint32(1, this.tenant_id);
            if (this.tenant_public_key.length)
                writer.writeString(2, this.tenant_public_key);
            if (this.name.length)
                writer.writeString(3, this.name);
            if (this.workers_capacity != 0)
                writer.writeInt32(4, this.workers_capacity);
            if (this.daily_service_capacity != 0)
                writer.writeInt32(5, this.daily_service_capacity);
            if (this.entrance_num != 0)
                writer.writeInt32(6, this.entrance_num);
            if (this.user_name.length)
                writer.writeString(7, this.user_name);
            if (this.average_monthly != 0)
                writer.writeInt32(8, this.average_monthly);
            if (this.cumulative_volume != 0)
                writer.writeInt32(9, this.cumulative_volume);
            if (this.password.length)
                writer.writeString(10, this.password);
            if (this.has_create_at)
                writer.writeMessage(11, this.create_at, () => this.create_at.serialize(writer));
            if (this.has_delete_at)
                writer.writeMessage(12, this.delete_at, () => this.delete_at.serialize(writer));
            if (this.group_name.length)
                writer.writeString(13, this.group_name);
            if (this.clique_Id != 0)
                writer.writeInt32(14, this.clique_Id);
            if (this.api_request_url.length)
                writer.writeString(15, this.api_request_url);
            if (this.api_name.length)
                writer.writeString(16, this.api_name);
            if (this.api_pwd.length)
                writer.writeString(17, this.api_pwd);
            if (this.api_pubKey.length)
                writer.writeString(18, this.api_pubKey);
            if (this.api_recharge_request_url.length)
                writer.writeString(19, this.api_recharge_request_url);
            if (this.line_group_id != 0)
                writer.writeInt32(20, this.line_group_id);
            if (this.h5_line.length)
                writer.writeString(21, this.h5_line);
            if (this.background_line.length)
                writer.writeString(22, this.background_line);
            if (this.has_line_group)
                writer.writeMessage(23, this.line_group, () => this.line_group.serialize(writer));
            if (this.has_update_at)
                writer.writeMessage(24, this.update_at, () => this.update_at.serialize(writer));
            if (this.h5_domain_cert.length)
                writer.writeString(25, this.h5_domain_cert);
            if (this.remark.length)
                writer.writeString(26, this.remark);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TenantItem {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TenantItem();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.tenant_id = reader.readUint32();
                        break;
                    case 2:
                        message.tenant_public_key = reader.readString();
                        break;
                    case 3:
                        message.name = reader.readString();
                        break;
                    case 4:
                        message.workers_capacity = reader.readInt32();
                        break;
                    case 5:
                        message.daily_service_capacity = reader.readInt32();
                        break;
                    case 6:
                        message.entrance_num = reader.readInt32();
                        break;
                    case 7:
                        message.user_name = reader.readString();
                        break;
                    case 8:
                        message.average_monthly = reader.readInt32();
                        break;
                    case 9:
                        message.cumulative_volume = reader.readInt32();
                        break;
                    case 10:
                        message.password = reader.readString();
                        break;
                    case 11:
                        reader.readMessage(message.create_at, () => message.create_at = dependency_3.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 12:
                        reader.readMessage(message.delete_at, () => message.delete_at = dependency_3.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 13:
                        message.group_name = reader.readString();
                        break;
                    case 14:
                        message.clique_Id = reader.readInt32();
                        break;
                    case 15:
                        message.api_request_url = reader.readString();
                        break;
                    case 16:
                        message.api_name = reader.readString();
                        break;
                    case 17:
                        message.api_pwd = reader.readString();
                        break;
                    case 18:
                        message.api_pubKey = reader.readString();
                        break;
                    case 19:
                        message.api_recharge_request_url = reader.readString();
                        break;
                    case 20:
                        message.line_group_id = reader.readInt32();
                        break;
                    case 21:
                        message.h5_line = reader.readString();
                        break;
                    case 22:
                        message.background_line = reader.readString();
                        break;
                    case 23:
                        reader.readMessage(message.line_group, () => message.line_group = dependency_8.api.common.TenantsLineGroup.deserialize(reader));
                        break;
                    case 24:
                        reader.readMessage(message.update_at, () => message.update_at = dependency_3.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 25:
                        message.h5_domain_cert = reader.readString();
                        break;
                    case 26:
                        message.remark = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TenantItem {
            return TenantItem.deserialize(bytes);
        }
    }
    export class AdminLoginRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            account?: string;
            password?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("account" in data && data.account != undefined) {
                    this.account = data.account;
                }
                if ("password" in data && data.password != undefined) {
                    this.password = data.password;
                }
            }
        }
        get account() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set account(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get password() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set password(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            account?: string;
            password?: string;
        }): AdminLoginRequest {
            const message = new AdminLoginRequest({});
            if (data.account != null) {
                message.account = data.account;
            }
            if (data.password != null) {
                message.password = data.password;
            }
            return message;
        }
        toObject() {
            const data: {
                account?: string;
                password?: string;
            } = {};
            if (this.account != null) {
                data.account = this.account;
            }
            if (this.password != null) {
                data.password = this.password;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.account.length)
                writer.writeString(1, this.account);
            if (this.password.length)
                writer.writeString(2, this.password);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AdminLoginRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AdminLoginRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.account = reader.readString();
                        break;
                    case 2:
                        message.password = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AdminLoginRequest {
            return AdminLoginRequest.deserialize(bytes);
        }
    }
    export class AdminLoginResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
            }
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            token?: string;
        }): AdminLoginResponse {
            const message = new AdminLoginResponse({});
            if (data.token != null) {
                message.token = data.token;
            }
            return message;
        }
        toObject() {
            const data: {
                token?: string;
            } = {};
            if (this.token != null) {
                data.token = this.token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.token.length)
                writer.writeString(1, this.token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AdminLoginResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AdminLoginResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AdminLoginResponse {
            return AdminLoginResponse.deserialize(bytes);
        }
    }
    export class UpdateTenantRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            tenant_id?: number;
            name?: string;
            worker_capacity?: number;
            daily_service_capacity?: number;
            password?: string;
            clique_id?: number;
            nimprex?: string;
            line_group_id?: number;
            h5_line?: string;
            background_line?: string;
            remark?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("tenant_id" in data && data.tenant_id != undefined) {
                    this.tenant_id = data.tenant_id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("worker_capacity" in data && data.worker_capacity != undefined) {
                    this.worker_capacity = data.worker_capacity;
                }
                if ("daily_service_capacity" in data && data.daily_service_capacity != undefined) {
                    this.daily_service_capacity = data.daily_service_capacity;
                }
                if ("password" in data && data.password != undefined) {
                    this.password = data.password;
                }
                if ("clique_id" in data && data.clique_id != undefined) {
                    this.clique_id = data.clique_id;
                }
                if ("nimprex" in data && data.nimprex != undefined) {
                    this.nimprex = data.nimprex;
                }
                if ("line_group_id" in data && data.line_group_id != undefined) {
                    this.line_group_id = data.line_group_id;
                }
                if ("h5_line" in data && data.h5_line != undefined) {
                    this.h5_line = data.h5_line;
                }
                if ("background_line" in data && data.background_line != undefined) {
                    this.background_line = data.background_line;
                }
                if ("remark" in data && data.remark != undefined) {
                    this.remark = data.remark;
                }
            }
        }
        get tenant_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set tenant_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get worker_capacity() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set worker_capacity(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get daily_service_capacity() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set daily_service_capacity(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get password() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set password(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get clique_id() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set clique_id(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get nimprex() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set nimprex(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get line_group_id() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set line_group_id(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get h5_line() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set h5_line(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get background_line() {
            return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
        }
        set background_line(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        get remark() {
            return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
        }
        set remark(value: string) {
            pb_1.Message.setField(this, 11, value);
        }
        static fromObject(data: {
            tenant_id?: number;
            name?: string;
            worker_capacity?: number;
            daily_service_capacity?: number;
            password?: string;
            clique_id?: number;
            nimprex?: string;
            line_group_id?: number;
            h5_line?: string;
            background_line?: string;
            remark?: string;
        }): UpdateTenantRequest {
            const message = new UpdateTenantRequest({});
            if (data.tenant_id != null) {
                message.tenant_id = data.tenant_id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.worker_capacity != null) {
                message.worker_capacity = data.worker_capacity;
            }
            if (data.daily_service_capacity != null) {
                message.daily_service_capacity = data.daily_service_capacity;
            }
            if (data.password != null) {
                message.password = data.password;
            }
            if (data.clique_id != null) {
                message.clique_id = data.clique_id;
            }
            if (data.nimprex != null) {
                message.nimprex = data.nimprex;
            }
            if (data.line_group_id != null) {
                message.line_group_id = data.line_group_id;
            }
            if (data.h5_line != null) {
                message.h5_line = data.h5_line;
            }
            if (data.background_line != null) {
                message.background_line = data.background_line;
            }
            if (data.remark != null) {
                message.remark = data.remark;
            }
            return message;
        }
        toObject() {
            const data: {
                tenant_id?: number;
                name?: string;
                worker_capacity?: number;
                daily_service_capacity?: number;
                password?: string;
                clique_id?: number;
                nimprex?: string;
                line_group_id?: number;
                h5_line?: string;
                background_line?: string;
                remark?: string;
            } = {};
            if (this.tenant_id != null) {
                data.tenant_id = this.tenant_id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.worker_capacity != null) {
                data.worker_capacity = this.worker_capacity;
            }
            if (this.daily_service_capacity != null) {
                data.daily_service_capacity = this.daily_service_capacity;
            }
            if (this.password != null) {
                data.password = this.password;
            }
            if (this.clique_id != null) {
                data.clique_id = this.clique_id;
            }
            if (this.nimprex != null) {
                data.nimprex = this.nimprex;
            }
            if (this.line_group_id != null) {
                data.line_group_id = this.line_group_id;
            }
            if (this.h5_line != null) {
                data.h5_line = this.h5_line;
            }
            if (this.background_line != null) {
                data.background_line = this.background_line;
            }
            if (this.remark != null) {
                data.remark = this.remark;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.tenant_id != 0)
                writer.writeUint32(1, this.tenant_id);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.worker_capacity != 0)
                writer.writeInt32(3, this.worker_capacity);
            if (this.daily_service_capacity != 0)
                writer.writeInt32(4, this.daily_service_capacity);
            if (this.password.length)
                writer.writeString(5, this.password);
            if (this.clique_id != 0)
                writer.writeInt32(6, this.clique_id);
            if (this.nimprex.length)
                writer.writeString(7, this.nimprex);
            if (this.line_group_id != 0)
                writer.writeInt32(8, this.line_group_id);
            if (this.h5_line.length)
                writer.writeString(9, this.h5_line);
            if (this.background_line.length)
                writer.writeString(10, this.background_line);
            if (this.remark.length)
                writer.writeString(11, this.remark);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateTenantRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateTenantRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.tenant_id = reader.readUint32();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.worker_capacity = reader.readInt32();
                        break;
                    case 4:
                        message.daily_service_capacity = reader.readInt32();
                        break;
                    case 5:
                        message.password = reader.readString();
                        break;
                    case 6:
                        message.clique_id = reader.readInt32();
                        break;
                    case 7:
                        message.nimprex = reader.readString();
                        break;
                    case 8:
                        message.line_group_id = reader.readInt32();
                        break;
                    case 9:
                        message.h5_line = reader.readString();
                        break;
                    case 10:
                        message.background_line = reader.readString();
                        break;
                    case 11:
                        message.remark = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateTenantRequest {
            return UpdateTenantRequest.deserialize(bytes);
        }
    }
    export class PublicKeyResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
            }
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            token?: string;
        }): PublicKeyResponse {
            const message = new PublicKeyResponse({});
            if (data.token != null) {
                message.token = data.token;
            }
            return message;
        }
        toObject() {
            const data: {
                token?: string;
            } = {};
            if (this.token != null) {
                data.token = this.token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.token.length)
                writer.writeString(1, this.token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PublicKeyResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PublicKeyResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PublicKeyResponse {
            return PublicKeyResponse.deserialize(bytes);
        }
    }
    export class QueryTenantInfoResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            item?: TenantItem;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("item" in data && data.item != undefined) {
                    this.item = data.item;
                }
            }
        }
        get item() {
            return pb_1.Message.getWrapperField(this, TenantItem, 1) as TenantItem;
        }
        set item(value: TenantItem) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_item() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            item?: ReturnType<typeof TenantItem.prototype.toObject>;
        }): QueryTenantInfoResponse {
            const message = new QueryTenantInfoResponse({});
            if (data.item != null) {
                message.item = TenantItem.fromObject(data.item);
            }
            return message;
        }
        toObject() {
            const data: {
                item?: ReturnType<typeof TenantItem.prototype.toObject>;
            } = {};
            if (this.item != null) {
                data.item = this.item.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_item)
                writer.writeMessage(1, this.item, () => this.item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryTenantInfoResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryTenantInfoResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.item, () => message.item = TenantItem.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryTenantInfoResponse {
            return QueryTenantInfoResponse.deserialize(bytes);
        }
    }
    export class UpdateNimInfoRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            workerId?: number;
            nimid?: string;
            nimsession?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("workerId" in data && data.workerId != undefined) {
                    this.workerId = data.workerId;
                }
                if ("nimid" in data && data.nimid != undefined) {
                    this.nimid = data.nimid;
                }
                if ("nimsession" in data && data.nimsession != undefined) {
                    this.nimsession = data.nimsession;
                }
            }
        }
        get workerId() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set workerId(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get nimid() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set nimid(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get nimsession() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set nimsession(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            workerId?: number;
            nimid?: string;
            nimsession?: string;
        }): UpdateNimInfoRequest {
            const message = new UpdateNimInfoRequest({});
            if (data.workerId != null) {
                message.workerId = data.workerId;
            }
            if (data.nimid != null) {
                message.nimid = data.nimid;
            }
            if (data.nimsession != null) {
                message.nimsession = data.nimsession;
            }
            return message;
        }
        toObject() {
            const data: {
                workerId?: number;
                nimid?: string;
                nimsession?: string;
            } = {};
            if (this.workerId != null) {
                data.workerId = this.workerId;
            }
            if (this.nimid != null) {
                data.nimid = this.nimid;
            }
            if (this.nimsession != null) {
                data.nimsession = this.nimsession;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.workerId != 0)
                writer.writeInt32(1, this.workerId);
            if (this.nimid.length)
                writer.writeString(2, this.nimid);
            if (this.nimsession.length)
                writer.writeString(3, this.nimsession);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateNimInfoRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateNimInfoRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.workerId = reader.readInt32();
                        break;
                    case 2:
                        message.nimid = reader.readString();
                        break;
                    case 3:
                        message.nimsession = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateNimInfoRequest {
            return UpdateNimInfoRequest.deserialize(bytes);
        }
    }
    export class VersionRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[1]];
        constructor(data?: any[] | ({
            optype?: dependency_7.api.common.OperationsType;
            softname?: string;
            major_version?: string;
            miner_version?: string;
            force?: boolean;
            download_url?: string;
            plist_url?: string;
            remark?: string;
            status?: number;
        } & (({
            version_id?: number;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("version_id" in data && data.version_id != undefined) {
                    this.version_id = data.version_id;
                }
                if ("optype" in data && data.optype != undefined) {
                    this.optype = data.optype;
                }
                if ("softname" in data && data.softname != undefined) {
                    this.softname = data.softname;
                }
                if ("major_version" in data && data.major_version != undefined) {
                    this.major_version = data.major_version;
                }
                if ("miner_version" in data && data.miner_version != undefined) {
                    this.miner_version = data.miner_version;
                }
                if ("force" in data && data.force != undefined) {
                    this.force = data.force;
                }
                if ("download_url" in data && data.download_url != undefined) {
                    this.download_url = data.download_url;
                }
                if ("plist_url" in data && data.plist_url != undefined) {
                    this.plist_url = data.plist_url;
                }
                if ("remark" in data && data.remark != undefined) {
                    this.remark = data.remark;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
            }
        }
        get version_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set version_id(value: number) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_version_id() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get optype() {
            return pb_1.Message.getFieldWithDefault(this, 2, dependency_7.api.common.OperationsType.OPERATION_TYPE_UNKNOWN) as dependency_7.api.common.OperationsType;
        }
        set optype(value: dependency_7.api.common.OperationsType) {
            pb_1.Message.setField(this, 2, value);
        }
        get softname() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set softname(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get major_version() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set major_version(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get miner_version() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set miner_version(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get force() {
            return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
        }
        set force(value: boolean) {
            pb_1.Message.setField(this, 6, value);
        }
        get download_url() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set download_url(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get plist_url() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set plist_url(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get remark() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set remark(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
        }
        set status(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        get _version_id() {
            const cases: {
                [index: number]: "none" | "version_id";
            } = {
                0: "none",
                1: "version_id"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1])];
        }
        static fromObject(data: {
            version_id?: number;
            optype?: dependency_7.api.common.OperationsType;
            softname?: string;
            major_version?: string;
            miner_version?: string;
            force?: boolean;
            download_url?: string;
            plist_url?: string;
            remark?: string;
            status?: number;
        }): VersionRequest {
            const message = new VersionRequest({});
            if (data.version_id != null) {
                message.version_id = data.version_id;
            }
            if (data.optype != null) {
                message.optype = data.optype;
            }
            if (data.softname != null) {
                message.softname = data.softname;
            }
            if (data.major_version != null) {
                message.major_version = data.major_version;
            }
            if (data.miner_version != null) {
                message.miner_version = data.miner_version;
            }
            if (data.force != null) {
                message.force = data.force;
            }
            if (data.download_url != null) {
                message.download_url = data.download_url;
            }
            if (data.plist_url != null) {
                message.plist_url = data.plist_url;
            }
            if (data.remark != null) {
                message.remark = data.remark;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            return message;
        }
        toObject() {
            const data: {
                version_id?: number;
                optype?: dependency_7.api.common.OperationsType;
                softname?: string;
                major_version?: string;
                miner_version?: string;
                force?: boolean;
                download_url?: string;
                plist_url?: string;
                remark?: string;
                status?: number;
            } = {};
            if (this.version_id != null) {
                data.version_id = this.version_id;
            }
            if (this.optype != null) {
                data.optype = this.optype;
            }
            if (this.softname != null) {
                data.softname = this.softname;
            }
            if (this.major_version != null) {
                data.major_version = this.major_version;
            }
            if (this.miner_version != null) {
                data.miner_version = this.miner_version;
            }
            if (this.force != null) {
                data.force = this.force;
            }
            if (this.download_url != null) {
                data.download_url = this.download_url;
            }
            if (this.plist_url != null) {
                data.plist_url = this.plist_url;
            }
            if (this.remark != null) {
                data.remark = this.remark;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_version_id)
                writer.writeInt32(1, this.version_id);
            if (this.optype != dependency_7.api.common.OperationsType.OPERATION_TYPE_UNKNOWN)
                writer.writeEnum(2, this.optype);
            if (this.softname.length)
                writer.writeString(3, this.softname);
            if (this.major_version.length)
                writer.writeString(4, this.major_version);
            if (this.miner_version.length)
                writer.writeString(5, this.miner_version);
            if (this.force != false)
                writer.writeBool(6, this.force);
            if (this.download_url.length)
                writer.writeString(7, this.download_url);
            if (this.plist_url.length)
                writer.writeString(8, this.plist_url);
            if (this.remark.length)
                writer.writeString(9, this.remark);
            if (this.status != 0)
                writer.writeInt32(10, this.status);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VersionRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new VersionRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.version_id = reader.readInt32();
                        break;
                    case 2:
                        message.optype = reader.readEnum();
                        break;
                    case 3:
                        message.softname = reader.readString();
                        break;
                    case 4:
                        message.major_version = reader.readString();
                        break;
                    case 5:
                        message.miner_version = reader.readString();
                        break;
                    case 6:
                        message.force = reader.readBool();
                        break;
                    case 7:
                        message.download_url = reader.readString();
                        break;
                    case 8:
                        message.plist_url = reader.readString();
                        break;
                    case 9:
                        message.remark = reader.readString();
                        break;
                    case 10:
                        message.status = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): VersionRequest {
            return VersionRequest.deserialize(bytes);
        }
    }
    export class VersionResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            version_id?: number;
            optype?: dependency_7.api.common.OperationsType;
            softname?: string;
            major_version?: string;
            miner_version?: string;
            force?: boolean;
            download_url?: string;
            plist_url?: string;
            remark?: string;
            create_at?: dependency_3.google.protobuf.Timestamp;
            update_at?: dependency_3.google.protobuf.Timestamp;
            status?: number;
            operator?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("version_id" in data && data.version_id != undefined) {
                    this.version_id = data.version_id;
                }
                if ("optype" in data && data.optype != undefined) {
                    this.optype = data.optype;
                }
                if ("softname" in data && data.softname != undefined) {
                    this.softname = data.softname;
                }
                if ("major_version" in data && data.major_version != undefined) {
                    this.major_version = data.major_version;
                }
                if ("miner_version" in data && data.miner_version != undefined) {
                    this.miner_version = data.miner_version;
                }
                if ("force" in data && data.force != undefined) {
                    this.force = data.force;
                }
                if ("download_url" in data && data.download_url != undefined) {
                    this.download_url = data.download_url;
                }
                if ("plist_url" in data && data.plist_url != undefined) {
                    this.plist_url = data.plist_url;
                }
                if ("remark" in data && data.remark != undefined) {
                    this.remark = data.remark;
                }
                if ("create_at" in data && data.create_at != undefined) {
                    this.create_at = data.create_at;
                }
                if ("update_at" in data && data.update_at != undefined) {
                    this.update_at = data.update_at;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("operator" in data && data.operator != undefined) {
                    this.operator = data.operator;
                }
            }
        }
        get version_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set version_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get optype() {
            return pb_1.Message.getFieldWithDefault(this, 2, dependency_7.api.common.OperationsType.OPERATION_TYPE_UNKNOWN) as dependency_7.api.common.OperationsType;
        }
        set optype(value: dependency_7.api.common.OperationsType) {
            pb_1.Message.setField(this, 2, value);
        }
        get softname() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set softname(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get major_version() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set major_version(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get miner_version() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set miner_version(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get force() {
            return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
        }
        set force(value: boolean) {
            pb_1.Message.setField(this, 6, value);
        }
        get download_url() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set download_url(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get plist_url() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set plist_url(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get remark() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set remark(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get create_at() {
            return pb_1.Message.getWrapperField(this, dependency_3.google.protobuf.Timestamp, 10) as dependency_3.google.protobuf.Timestamp;
        }
        set create_at(value: dependency_3.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 10, value);
        }
        get has_create_at() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get update_at() {
            return pb_1.Message.getWrapperField(this, dependency_3.google.protobuf.Timestamp, 11) as dependency_3.google.protobuf.Timestamp;
        }
        set update_at(value: dependency_3.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 11, value);
        }
        get has_update_at() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;
        }
        set status(value: number) {
            pb_1.Message.setField(this, 12, value);
        }
        get operator() {
            return pb_1.Message.getFieldWithDefault(this, 13, "") as string;
        }
        set operator(value: string) {
            pb_1.Message.setField(this, 13, value);
        }
        static fromObject(data: {
            version_id?: number;
            optype?: dependency_7.api.common.OperationsType;
            softname?: string;
            major_version?: string;
            miner_version?: string;
            force?: boolean;
            download_url?: string;
            plist_url?: string;
            remark?: string;
            create_at?: ReturnType<typeof dependency_3.google.protobuf.Timestamp.prototype.toObject>;
            update_at?: ReturnType<typeof dependency_3.google.protobuf.Timestamp.prototype.toObject>;
            status?: number;
            operator?: string;
        }): VersionResponse {
            const message = new VersionResponse({});
            if (data.version_id != null) {
                message.version_id = data.version_id;
            }
            if (data.optype != null) {
                message.optype = data.optype;
            }
            if (data.softname != null) {
                message.softname = data.softname;
            }
            if (data.major_version != null) {
                message.major_version = data.major_version;
            }
            if (data.miner_version != null) {
                message.miner_version = data.miner_version;
            }
            if (data.force != null) {
                message.force = data.force;
            }
            if (data.download_url != null) {
                message.download_url = data.download_url;
            }
            if (data.plist_url != null) {
                message.plist_url = data.plist_url;
            }
            if (data.remark != null) {
                message.remark = data.remark;
            }
            if (data.create_at != null) {
                message.create_at = dependency_3.google.protobuf.Timestamp.fromObject(data.create_at);
            }
            if (data.update_at != null) {
                message.update_at = dependency_3.google.protobuf.Timestamp.fromObject(data.update_at);
            }
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.operator != null) {
                message.operator = data.operator;
            }
            return message;
        }
        toObject() {
            const data: {
                version_id?: number;
                optype?: dependency_7.api.common.OperationsType;
                softname?: string;
                major_version?: string;
                miner_version?: string;
                force?: boolean;
                download_url?: string;
                plist_url?: string;
                remark?: string;
                create_at?: ReturnType<typeof dependency_3.google.protobuf.Timestamp.prototype.toObject>;
                update_at?: ReturnType<typeof dependency_3.google.protobuf.Timestamp.prototype.toObject>;
                status?: number;
                operator?: string;
            } = {};
            if (this.version_id != null) {
                data.version_id = this.version_id;
            }
            if (this.optype != null) {
                data.optype = this.optype;
            }
            if (this.softname != null) {
                data.softname = this.softname;
            }
            if (this.major_version != null) {
                data.major_version = this.major_version;
            }
            if (this.miner_version != null) {
                data.miner_version = this.miner_version;
            }
            if (this.force != null) {
                data.force = this.force;
            }
            if (this.download_url != null) {
                data.download_url = this.download_url;
            }
            if (this.plist_url != null) {
                data.plist_url = this.plist_url;
            }
            if (this.remark != null) {
                data.remark = this.remark;
            }
            if (this.create_at != null) {
                data.create_at = this.create_at.toObject();
            }
            if (this.update_at != null) {
                data.update_at = this.update_at.toObject();
            }
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.operator != null) {
                data.operator = this.operator;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.version_id != 0)
                writer.writeInt32(1, this.version_id);
            if (this.optype != dependency_7.api.common.OperationsType.OPERATION_TYPE_UNKNOWN)
                writer.writeEnum(2, this.optype);
            if (this.softname.length)
                writer.writeString(3, this.softname);
            if (this.major_version.length)
                writer.writeString(4, this.major_version);
            if (this.miner_version.length)
                writer.writeString(5, this.miner_version);
            if (this.force != false)
                writer.writeBool(6, this.force);
            if (this.download_url.length)
                writer.writeString(7, this.download_url);
            if (this.plist_url.length)
                writer.writeString(8, this.plist_url);
            if (this.remark.length)
                writer.writeString(9, this.remark);
            if (this.has_create_at)
                writer.writeMessage(10, this.create_at, () => this.create_at.serialize(writer));
            if (this.has_update_at)
                writer.writeMessage(11, this.update_at, () => this.update_at.serialize(writer));
            if (this.status != 0)
                writer.writeInt32(12, this.status);
            if (this.operator.length)
                writer.writeString(13, this.operator);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VersionResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new VersionResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.version_id = reader.readInt32();
                        break;
                    case 2:
                        message.optype = reader.readEnum();
                        break;
                    case 3:
                        message.softname = reader.readString();
                        break;
                    case 4:
                        message.major_version = reader.readString();
                        break;
                    case 5:
                        message.miner_version = reader.readString();
                        break;
                    case 6:
                        message.force = reader.readBool();
                        break;
                    case 7:
                        message.download_url = reader.readString();
                        break;
                    case 8:
                        message.plist_url = reader.readString();
                        break;
                    case 9:
                        message.remark = reader.readString();
                        break;
                    case 10:
                        reader.readMessage(message.create_at, () => message.create_at = dependency_3.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 11:
                        reader.readMessage(message.update_at, () => message.update_at = dependency_3.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 12:
                        message.status = reader.readInt32();
                        break;
                    case 13:
                        message.operator = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): VersionResponse {
            return VersionResponse.deserialize(bytes);
        }
    }
    export class CreateVersionResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            version_id?: number;
            optype?: dependency_7.api.common.OperationsType;
            softname?: string;
            major_version?: string;
            miner_version?: string;
            force?: boolean;
            download_url?: string;
            plist_url?: string;
            remark?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("version_id" in data && data.version_id != undefined) {
                    this.version_id = data.version_id;
                }
                if ("optype" in data && data.optype != undefined) {
                    this.optype = data.optype;
                }
                if ("softname" in data && data.softname != undefined) {
                    this.softname = data.softname;
                }
                if ("major_version" in data && data.major_version != undefined) {
                    this.major_version = data.major_version;
                }
                if ("miner_version" in data && data.miner_version != undefined) {
                    this.miner_version = data.miner_version;
                }
                if ("force" in data && data.force != undefined) {
                    this.force = data.force;
                }
                if ("download_url" in data && data.download_url != undefined) {
                    this.download_url = data.download_url;
                }
                if ("plist_url" in data && data.plist_url != undefined) {
                    this.plist_url = data.plist_url;
                }
                if ("remark" in data && data.remark != undefined) {
                    this.remark = data.remark;
                }
            }
        }
        get version_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set version_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get optype() {
            return pb_1.Message.getFieldWithDefault(this, 2, dependency_7.api.common.OperationsType.OPERATION_TYPE_UNKNOWN) as dependency_7.api.common.OperationsType;
        }
        set optype(value: dependency_7.api.common.OperationsType) {
            pb_1.Message.setField(this, 2, value);
        }
        get softname() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set softname(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get major_version() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set major_version(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get miner_version() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set miner_version(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get force() {
            return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
        }
        set force(value: boolean) {
            pb_1.Message.setField(this, 6, value);
        }
        get download_url() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set download_url(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get plist_url() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set plist_url(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get remark() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set remark(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        static fromObject(data: {
            version_id?: number;
            optype?: dependency_7.api.common.OperationsType;
            softname?: string;
            major_version?: string;
            miner_version?: string;
            force?: boolean;
            download_url?: string;
            plist_url?: string;
            remark?: string;
        }): CreateVersionResponse {
            const message = new CreateVersionResponse({});
            if (data.version_id != null) {
                message.version_id = data.version_id;
            }
            if (data.optype != null) {
                message.optype = data.optype;
            }
            if (data.softname != null) {
                message.softname = data.softname;
            }
            if (data.major_version != null) {
                message.major_version = data.major_version;
            }
            if (data.miner_version != null) {
                message.miner_version = data.miner_version;
            }
            if (data.force != null) {
                message.force = data.force;
            }
            if (data.download_url != null) {
                message.download_url = data.download_url;
            }
            if (data.plist_url != null) {
                message.plist_url = data.plist_url;
            }
            if (data.remark != null) {
                message.remark = data.remark;
            }
            return message;
        }
        toObject() {
            const data: {
                version_id?: number;
                optype?: dependency_7.api.common.OperationsType;
                softname?: string;
                major_version?: string;
                miner_version?: string;
                force?: boolean;
                download_url?: string;
                plist_url?: string;
                remark?: string;
            } = {};
            if (this.version_id != null) {
                data.version_id = this.version_id;
            }
            if (this.optype != null) {
                data.optype = this.optype;
            }
            if (this.softname != null) {
                data.softname = this.softname;
            }
            if (this.major_version != null) {
                data.major_version = this.major_version;
            }
            if (this.miner_version != null) {
                data.miner_version = this.miner_version;
            }
            if (this.force != null) {
                data.force = this.force;
            }
            if (this.download_url != null) {
                data.download_url = this.download_url;
            }
            if (this.plist_url != null) {
                data.plist_url = this.plist_url;
            }
            if (this.remark != null) {
                data.remark = this.remark;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.version_id != 0)
                writer.writeInt32(1, this.version_id);
            if (this.optype != dependency_7.api.common.OperationsType.OPERATION_TYPE_UNKNOWN)
                writer.writeEnum(2, this.optype);
            if (this.softname.length)
                writer.writeString(3, this.softname);
            if (this.major_version.length)
                writer.writeString(4, this.major_version);
            if (this.miner_version.length)
                writer.writeString(5, this.miner_version);
            if (this.force != false)
                writer.writeBool(6, this.force);
            if (this.download_url.length)
                writer.writeString(7, this.download_url);
            if (this.plist_url.length)
                writer.writeString(8, this.plist_url);
            if (this.remark.length)
                writer.writeString(9, this.remark);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateVersionResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateVersionResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.version_id = reader.readInt32();
                        break;
                    case 2:
                        message.optype = reader.readEnum();
                        break;
                    case 3:
                        message.softname = reader.readString();
                        break;
                    case 4:
                        message.major_version = reader.readString();
                        break;
                    case 5:
                        message.miner_version = reader.readString();
                        break;
                    case 6:
                        message.force = reader.readBool();
                        break;
                    case 7:
                        message.download_url = reader.readString();
                        break;
                    case 8:
                        message.plist_url = reader.readString();
                        break;
                    case 9:
                        message.remark = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateVersionResponse {
            return CreateVersionResponse.deserialize(bytes);
        }
    }
    export class UpdateVersionResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            version_id?: number;
            optype?: dependency_7.api.common.OperationsType;
            softname?: string;
            major_version?: string;
            miner_version?: string;
            force?: boolean;
            download_url?: string;
            plist_url?: string;
            remark?: string;
            create_at?: dependency_3.google.protobuf.Timestamp;
            update_at?: dependency_3.google.protobuf.Timestamp;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("version_id" in data && data.version_id != undefined) {
                    this.version_id = data.version_id;
                }
                if ("optype" in data && data.optype != undefined) {
                    this.optype = data.optype;
                }
                if ("softname" in data && data.softname != undefined) {
                    this.softname = data.softname;
                }
                if ("major_version" in data && data.major_version != undefined) {
                    this.major_version = data.major_version;
                }
                if ("miner_version" in data && data.miner_version != undefined) {
                    this.miner_version = data.miner_version;
                }
                if ("force" in data && data.force != undefined) {
                    this.force = data.force;
                }
                if ("download_url" in data && data.download_url != undefined) {
                    this.download_url = data.download_url;
                }
                if ("plist_url" in data && data.plist_url != undefined) {
                    this.plist_url = data.plist_url;
                }
                if ("remark" in data && data.remark != undefined) {
                    this.remark = data.remark;
                }
                if ("create_at" in data && data.create_at != undefined) {
                    this.create_at = data.create_at;
                }
                if ("update_at" in data && data.update_at != undefined) {
                    this.update_at = data.update_at;
                }
            }
        }
        get version_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set version_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get optype() {
            return pb_1.Message.getFieldWithDefault(this, 2, dependency_7.api.common.OperationsType.OPERATION_TYPE_UNKNOWN) as dependency_7.api.common.OperationsType;
        }
        set optype(value: dependency_7.api.common.OperationsType) {
            pb_1.Message.setField(this, 2, value);
        }
        get softname() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set softname(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get major_version() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set major_version(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get miner_version() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set miner_version(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get force() {
            return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
        }
        set force(value: boolean) {
            pb_1.Message.setField(this, 6, value);
        }
        get download_url() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set download_url(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get plist_url() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set plist_url(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get remark() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set remark(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get create_at() {
            return pb_1.Message.getWrapperField(this, dependency_3.google.protobuf.Timestamp, 10) as dependency_3.google.protobuf.Timestamp;
        }
        set create_at(value: dependency_3.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 10, value);
        }
        get has_create_at() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get update_at() {
            return pb_1.Message.getWrapperField(this, dependency_3.google.protobuf.Timestamp, 11) as dependency_3.google.protobuf.Timestamp;
        }
        set update_at(value: dependency_3.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 11, value);
        }
        get has_update_at() {
            return pb_1.Message.getField(this, 11) != null;
        }
        static fromObject(data: {
            version_id?: number;
            optype?: dependency_7.api.common.OperationsType;
            softname?: string;
            major_version?: string;
            miner_version?: string;
            force?: boolean;
            download_url?: string;
            plist_url?: string;
            remark?: string;
            create_at?: ReturnType<typeof dependency_3.google.protobuf.Timestamp.prototype.toObject>;
            update_at?: ReturnType<typeof dependency_3.google.protobuf.Timestamp.prototype.toObject>;
        }): UpdateVersionResponse {
            const message = new UpdateVersionResponse({});
            if (data.version_id != null) {
                message.version_id = data.version_id;
            }
            if (data.optype != null) {
                message.optype = data.optype;
            }
            if (data.softname != null) {
                message.softname = data.softname;
            }
            if (data.major_version != null) {
                message.major_version = data.major_version;
            }
            if (data.miner_version != null) {
                message.miner_version = data.miner_version;
            }
            if (data.force != null) {
                message.force = data.force;
            }
            if (data.download_url != null) {
                message.download_url = data.download_url;
            }
            if (data.plist_url != null) {
                message.plist_url = data.plist_url;
            }
            if (data.remark != null) {
                message.remark = data.remark;
            }
            if (data.create_at != null) {
                message.create_at = dependency_3.google.protobuf.Timestamp.fromObject(data.create_at);
            }
            if (data.update_at != null) {
                message.update_at = dependency_3.google.protobuf.Timestamp.fromObject(data.update_at);
            }
            return message;
        }
        toObject() {
            const data: {
                version_id?: number;
                optype?: dependency_7.api.common.OperationsType;
                softname?: string;
                major_version?: string;
                miner_version?: string;
                force?: boolean;
                download_url?: string;
                plist_url?: string;
                remark?: string;
                create_at?: ReturnType<typeof dependency_3.google.protobuf.Timestamp.prototype.toObject>;
                update_at?: ReturnType<typeof dependency_3.google.protobuf.Timestamp.prototype.toObject>;
            } = {};
            if (this.version_id != null) {
                data.version_id = this.version_id;
            }
            if (this.optype != null) {
                data.optype = this.optype;
            }
            if (this.softname != null) {
                data.softname = this.softname;
            }
            if (this.major_version != null) {
                data.major_version = this.major_version;
            }
            if (this.miner_version != null) {
                data.miner_version = this.miner_version;
            }
            if (this.force != null) {
                data.force = this.force;
            }
            if (this.download_url != null) {
                data.download_url = this.download_url;
            }
            if (this.plist_url != null) {
                data.plist_url = this.plist_url;
            }
            if (this.remark != null) {
                data.remark = this.remark;
            }
            if (this.create_at != null) {
                data.create_at = this.create_at.toObject();
            }
            if (this.update_at != null) {
                data.update_at = this.update_at.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.version_id != 0)
                writer.writeInt32(1, this.version_id);
            if (this.optype != dependency_7.api.common.OperationsType.OPERATION_TYPE_UNKNOWN)
                writer.writeEnum(2, this.optype);
            if (this.softname.length)
                writer.writeString(3, this.softname);
            if (this.major_version.length)
                writer.writeString(4, this.major_version);
            if (this.miner_version.length)
                writer.writeString(5, this.miner_version);
            if (this.force != false)
                writer.writeBool(6, this.force);
            if (this.download_url.length)
                writer.writeString(7, this.download_url);
            if (this.plist_url.length)
                writer.writeString(8, this.plist_url);
            if (this.remark.length)
                writer.writeString(9, this.remark);
            if (this.has_create_at)
                writer.writeMessage(10, this.create_at, () => this.create_at.serialize(writer));
            if (this.has_update_at)
                writer.writeMessage(11, this.update_at, () => this.update_at.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateVersionResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateVersionResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.version_id = reader.readInt32();
                        break;
                    case 2:
                        message.optype = reader.readEnum();
                        break;
                    case 3:
                        message.softname = reader.readString();
                        break;
                    case 4:
                        message.major_version = reader.readString();
                        break;
                    case 5:
                        message.miner_version = reader.readString();
                        break;
                    case 6:
                        message.force = reader.readBool();
                        break;
                    case 7:
                        message.download_url = reader.readString();
                        break;
                    case 8:
                        message.plist_url = reader.readString();
                        break;
                    case 9:
                        message.remark = reader.readString();
                        break;
                    case 10:
                        reader.readMessage(message.create_at, () => message.create_at = dependency_3.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 11:
                        reader.readMessage(message.update_at, () => message.update_at = dependency_3.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateVersionResponse {
            return UpdateVersionResponse.deserialize(bytes);
        }
    }
    export class GetVersionResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            list?: VersionResponse[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("list" in data && data.list != undefined) {
                    this.list = data.list;
                }
            }
        }
        get list() {
            return pb_1.Message.getRepeatedWrapperField(this, VersionResponse, 1) as VersionResponse[];
        }
        set list(value: VersionResponse[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            list?: ReturnType<typeof VersionResponse.prototype.toObject>[];
        }): GetVersionResponse {
            const message = new GetVersionResponse({});
            if (data.list != null) {
                message.list = data.list.map(item => VersionResponse.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                list?: ReturnType<typeof VersionResponse.prototype.toObject>[];
            } = {};
            if (this.list != null) {
                data.list = this.list.map((item: VersionResponse) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.list.length)
                writer.writeRepeatedMessage(1, this.list, (item: VersionResponse) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetVersionResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetVersionResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.list, () => pb_1.Message.addToRepeatedWrapperField(message, 1, VersionResponse.deserialize(reader), VersionResponse));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetVersionResponse {
            return GetVersionResponse.deserialize(bytes);
        }
    }
    export class TenantThirdSetting extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            tenant_id?: number;
            api_request_url?: string;
            api_name?: string;
            api_pwd?: string;
            api_pubKey?: string;
            api_recharge_request_url?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("tenant_id" in data && data.tenant_id != undefined) {
                    this.tenant_id = data.tenant_id;
                }
                if ("api_request_url" in data && data.api_request_url != undefined) {
                    this.api_request_url = data.api_request_url;
                }
                if ("api_name" in data && data.api_name != undefined) {
                    this.api_name = data.api_name;
                }
                if ("api_pwd" in data && data.api_pwd != undefined) {
                    this.api_pwd = data.api_pwd;
                }
                if ("api_pubKey" in data && data.api_pubKey != undefined) {
                    this.api_pubKey = data.api_pubKey;
                }
                if ("api_recharge_request_url" in data && data.api_recharge_request_url != undefined) {
                    this.api_recharge_request_url = data.api_recharge_request_url;
                }
            }
        }
        get tenant_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set tenant_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get api_request_url() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set api_request_url(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get api_name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set api_name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get api_pwd() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set api_pwd(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get api_pubKey() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set api_pubKey(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get api_recharge_request_url() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set api_recharge_request_url(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            tenant_id?: number;
            api_request_url?: string;
            api_name?: string;
            api_pwd?: string;
            api_pubKey?: string;
            api_recharge_request_url?: string;
        }): TenantThirdSetting {
            const message = new TenantThirdSetting({});
            if (data.tenant_id != null) {
                message.tenant_id = data.tenant_id;
            }
            if (data.api_request_url != null) {
                message.api_request_url = data.api_request_url;
            }
            if (data.api_name != null) {
                message.api_name = data.api_name;
            }
            if (data.api_pwd != null) {
                message.api_pwd = data.api_pwd;
            }
            if (data.api_pubKey != null) {
                message.api_pubKey = data.api_pubKey;
            }
            if (data.api_recharge_request_url != null) {
                message.api_recharge_request_url = data.api_recharge_request_url;
            }
            return message;
        }
        toObject() {
            const data: {
                tenant_id?: number;
                api_request_url?: string;
                api_name?: string;
                api_pwd?: string;
                api_pubKey?: string;
                api_recharge_request_url?: string;
            } = {};
            if (this.tenant_id != null) {
                data.tenant_id = this.tenant_id;
            }
            if (this.api_request_url != null) {
                data.api_request_url = this.api_request_url;
            }
            if (this.api_name != null) {
                data.api_name = this.api_name;
            }
            if (this.api_pwd != null) {
                data.api_pwd = this.api_pwd;
            }
            if (this.api_pubKey != null) {
                data.api_pubKey = this.api_pubKey;
            }
            if (this.api_recharge_request_url != null) {
                data.api_recharge_request_url = this.api_recharge_request_url;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.tenant_id != 0)
                writer.writeUint32(1, this.tenant_id);
            if (this.api_request_url.length)
                writer.writeString(2, this.api_request_url);
            if (this.api_name.length)
                writer.writeString(3, this.api_name);
            if (this.api_pwd.length)
                writer.writeString(4, this.api_pwd);
            if (this.api_pubKey.length)
                writer.writeString(5, this.api_pubKey);
            if (this.api_recharge_request_url.length)
                writer.writeString(6, this.api_recharge_request_url);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TenantThirdSetting {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TenantThirdSetting();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.tenant_id = reader.readUint32();
                        break;
                    case 2:
                        message.api_request_url = reader.readString();
                        break;
                    case 3:
                        message.api_name = reader.readString();
                        break;
                    case 4:
                        message.api_pwd = reader.readString();
                        break;
                    case 5:
                        message.api_pubKey = reader.readString();
                        break;
                    case 6:
                        message.api_recharge_request_url = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TenantThirdSetting {
            return TenantThirdSetting.deserialize(bytes);
        }
    }
    export class LineGroupListRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[2], [3]];
        constructor(data?: any[] | ({
            batch?: dependency_6.api.common.Batch;
        } & (({
            name?: string;
        }) | ({
            disable_status?: dependency_6.api.common.DisableStatus;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("batch" in data && data.batch != undefined) {
                    this.batch = data.batch;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("disable_status" in data && data.disable_status != undefined) {
                    this.disable_status = data.disable_status;
                }
            }
        }
        get batch() {
            return pb_1.Message.getWrapperField(this, dependency_6.api.common.Batch, 1) as dependency_6.api.common.Batch;
        }
        set batch(value: dependency_6.api.common.Batch) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_batch() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
        }
        get has_name() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get disable_status() {
            return pb_1.Message.getFieldWithDefault(this, 3, dependency_6.api.common.DisableStatus.DEFAULT) as dependency_6.api.common.DisableStatus;
        }
        set disable_status(value: dependency_6.api.common.DisableStatus) {
            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[1], value);
        }
        get has_disable_status() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get _name() {
            const cases: {
                [index: number]: "none" | "name";
            } = {
                0: "none",
                2: "name"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        get _disable_status() {
            const cases: {
                [index: number]: "none" | "disable_status";
            } = {
                0: "none",
                3: "disable_status"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3])];
        }
        static fromObject(data: {
            batch?: ReturnType<typeof dependency_6.api.common.Batch.prototype.toObject>;
            name?: string;
            disable_status?: dependency_6.api.common.DisableStatus;
        }): LineGroupListRequest {
            const message = new LineGroupListRequest({});
            if (data.batch != null) {
                message.batch = dependency_6.api.common.Batch.fromObject(data.batch);
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.disable_status != null) {
                message.disable_status = data.disable_status;
            }
            return message;
        }
        toObject() {
            const data: {
                batch?: ReturnType<typeof dependency_6.api.common.Batch.prototype.toObject>;
                name?: string;
                disable_status?: dependency_6.api.common.DisableStatus;
            } = {};
            if (this.batch != null) {
                data.batch = this.batch.toObject();
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.disable_status != null) {
                data.disable_status = this.disable_status;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_batch)
                writer.writeMessage(1, this.batch, () => this.batch.serialize(writer));
            if (this.has_name)
                writer.writeString(2, this.name);
            if (this.has_disable_status)
                writer.writeEnum(3, this.disable_status);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LineGroupListRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LineGroupListRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.batch, () => message.batch = dependency_6.api.common.Batch.deserialize(reader));
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.disable_status = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LineGroupListRequest {
            return LineGroupListRequest.deserialize(bytes);
        }
    }
    export class LineGroupListResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            batch?: dependency_6.api.common.Batch;
            list?: dependency_8.api.common.TenantsLineGroup[];
            total?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("batch" in data && data.batch != undefined) {
                    this.batch = data.batch;
                }
                if ("list" in data && data.list != undefined) {
                    this.list = data.list;
                }
                if ("total" in data && data.total != undefined) {
                    this.total = data.total;
                }
            }
        }
        get batch() {
            return pb_1.Message.getWrapperField(this, dependency_6.api.common.Batch, 1) as dependency_6.api.common.Batch;
        }
        set batch(value: dependency_6.api.common.Batch) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_batch() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get list() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_8.api.common.TenantsLineGroup, 2) as dependency_8.api.common.TenantsLineGroup[];
        }
        set list(value: dependency_8.api.common.TenantsLineGroup[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get total() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set total(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            batch?: ReturnType<typeof dependency_6.api.common.Batch.prototype.toObject>;
            list?: ReturnType<typeof dependency_8.api.common.TenantsLineGroup.prototype.toObject>[];
            total?: number;
        }): LineGroupListResponse {
            const message = new LineGroupListResponse({});
            if (data.batch != null) {
                message.batch = dependency_6.api.common.Batch.fromObject(data.batch);
            }
            if (data.list != null) {
                message.list = data.list.map(item => dependency_8.api.common.TenantsLineGroup.fromObject(item));
            }
            if (data.total != null) {
                message.total = data.total;
            }
            return message;
        }
        toObject() {
            const data: {
                batch?: ReturnType<typeof dependency_6.api.common.Batch.prototype.toObject>;
                list?: ReturnType<typeof dependency_8.api.common.TenantsLineGroup.prototype.toObject>[];
                total?: number;
            } = {};
            if (this.batch != null) {
                data.batch = this.batch.toObject();
            }
            if (this.list != null) {
                data.list = this.list.map((item: dependency_8.api.common.TenantsLineGroup) => item.toObject());
            }
            if (this.total != null) {
                data.total = this.total;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_batch)
                writer.writeMessage(1, this.batch, () => this.batch.serialize(writer));
            if (this.list.length)
                writer.writeRepeatedMessage(2, this.list, (item: dependency_8.api.common.TenantsLineGroup) => item.serialize(writer));
            if (this.total != 0)
                writer.writeInt32(3, this.total);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LineGroupListResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LineGroupListResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.batch, () => message.batch = dependency_6.api.common.Batch.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.list, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_8.api.common.TenantsLineGroup.deserialize(reader), dependency_8.api.common.TenantsLineGroup));
                        break;
                    case 3:
                        message.total = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LineGroupListResponse {
            return LineGroupListResponse.deserialize(bytes);
        }
    }
    export class LineGroupCreateRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            h5_lines?: dependency_6.api.common.ListString;
            background_lines?: dependency_6.api.common.ListString;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("h5_lines" in data && data.h5_lines != undefined) {
                    this.h5_lines = data.h5_lines;
                }
                if ("background_lines" in data && data.background_lines != undefined) {
                    this.background_lines = data.background_lines;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get h5_lines() {
            return pb_1.Message.getWrapperField(this, dependency_6.api.common.ListString, 2) as dependency_6.api.common.ListString;
        }
        set h5_lines(value: dependency_6.api.common.ListString) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_h5_lines() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get background_lines() {
            return pb_1.Message.getWrapperField(this, dependency_6.api.common.ListString, 3) as dependency_6.api.common.ListString;
        }
        set background_lines(value: dependency_6.api.common.ListString) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_background_lines() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            name?: string;
            h5_lines?: ReturnType<typeof dependency_6.api.common.ListString.prototype.toObject>;
            background_lines?: ReturnType<typeof dependency_6.api.common.ListString.prototype.toObject>;
        }): LineGroupCreateRequest {
            const message = new LineGroupCreateRequest({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.h5_lines != null) {
                message.h5_lines = dependency_6.api.common.ListString.fromObject(data.h5_lines);
            }
            if (data.background_lines != null) {
                message.background_lines = dependency_6.api.common.ListString.fromObject(data.background_lines);
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                h5_lines?: ReturnType<typeof dependency_6.api.common.ListString.prototype.toObject>;
                background_lines?: ReturnType<typeof dependency_6.api.common.ListString.prototype.toObject>;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.h5_lines != null) {
                data.h5_lines = this.h5_lines.toObject();
            }
            if (this.background_lines != null) {
                data.background_lines = this.background_lines.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.has_h5_lines)
                writer.writeMessage(2, this.h5_lines, () => this.h5_lines.serialize(writer));
            if (this.has_background_lines)
                writer.writeMessage(3, this.background_lines, () => this.background_lines.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LineGroupCreateRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LineGroupCreateRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.h5_lines, () => message.h5_lines = dependency_6.api.common.ListString.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.background_lines, () => message.background_lines = dependency_6.api.common.ListString.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LineGroupCreateRequest {
            return LineGroupCreateRequest.deserialize(bytes);
        }
    }
    export class LineGroupUpdateRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            name?: string;
            h5_lines?: dependency_6.api.common.ListString;
            background_lines?: dependency_6.api.common.ListString;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("h5_lines" in data && data.h5_lines != undefined) {
                    this.h5_lines = data.h5_lines;
                }
                if ("background_lines" in data && data.background_lines != undefined) {
                    this.background_lines = data.background_lines;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get h5_lines() {
            return pb_1.Message.getWrapperField(this, dependency_6.api.common.ListString, 3) as dependency_6.api.common.ListString;
        }
        set h5_lines(value: dependency_6.api.common.ListString) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_h5_lines() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get background_lines() {
            return pb_1.Message.getWrapperField(this, dependency_6.api.common.ListString, 4) as dependency_6.api.common.ListString;
        }
        set background_lines(value: dependency_6.api.common.ListString) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_background_lines() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            id?: number;
            name?: string;
            h5_lines?: ReturnType<typeof dependency_6.api.common.ListString.prototype.toObject>;
            background_lines?: ReturnType<typeof dependency_6.api.common.ListString.prototype.toObject>;
        }): LineGroupUpdateRequest {
            const message = new LineGroupUpdateRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.h5_lines != null) {
                message.h5_lines = dependency_6.api.common.ListString.fromObject(data.h5_lines);
            }
            if (data.background_lines != null) {
                message.background_lines = dependency_6.api.common.ListString.fromObject(data.background_lines);
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                name?: string;
                h5_lines?: ReturnType<typeof dependency_6.api.common.ListString.prototype.toObject>;
                background_lines?: ReturnType<typeof dependency_6.api.common.ListString.prototype.toObject>;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.h5_lines != null) {
                data.h5_lines = this.h5_lines.toObject();
            }
            if (this.background_lines != null) {
                data.background_lines = this.background_lines.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt32(1, this.id);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.has_h5_lines)
                writer.writeMessage(3, this.h5_lines, () => this.h5_lines.serialize(writer));
            if (this.has_background_lines)
                writer.writeMessage(4, this.background_lines, () => this.background_lines.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LineGroupUpdateRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LineGroupUpdateRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.h5_lines, () => message.h5_lines = dependency_6.api.common.ListString.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.background_lines, () => message.background_lines = dependency_6.api.common.ListString.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LineGroupUpdateRequest {
            return LineGroupUpdateRequest.deserialize(bytes);
        }
    }
    export class LineGroupDeleteRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            id?: number;
        }): LineGroupDeleteRequest {
            const message = new LineGroupDeleteRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt32(1, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LineGroupDeleteRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LineGroupDeleteRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LineGroupDeleteRequest {
            return LineGroupDeleteRequest.deserialize(bytes);
        }
    }
    export class TenantWorkerQueryRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            batch?: dependency_6.api.common.Batch;
            tenant_id?: number;
            name?: string;
            worker_state?: dependency_5.api.common.WorkerState;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("batch" in data && data.batch != undefined) {
                    this.batch = data.batch;
                }
                if ("tenant_id" in data && data.tenant_id != undefined) {
                    this.tenant_id = data.tenant_id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("worker_state" in data && data.worker_state != undefined) {
                    this.worker_state = data.worker_state;
                }
            }
        }
        get batch() {
            return pb_1.Message.getWrapperField(this, dependency_6.api.common.Batch, 1) as dependency_6.api.common.Batch;
        }
        set batch(value: dependency_6.api.common.Batch) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_batch() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get tenant_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set tenant_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get worker_state() {
            return pb_1.Message.getFieldWithDefault(this, 4, dependency_5.api.common.WorkerState.WORKER_OFFLINE) as dependency_5.api.common.WorkerState;
        }
        set worker_state(value: dependency_5.api.common.WorkerState) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            batch?: ReturnType<typeof dependency_6.api.common.Batch.prototype.toObject>;
            tenant_id?: number;
            name?: string;
            worker_state?: dependency_5.api.common.WorkerState;
        }): TenantWorkerQueryRequest {
            const message = new TenantWorkerQueryRequest({});
            if (data.batch != null) {
                message.batch = dependency_6.api.common.Batch.fromObject(data.batch);
            }
            if (data.tenant_id != null) {
                message.tenant_id = data.tenant_id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.worker_state != null) {
                message.worker_state = data.worker_state;
            }
            return message;
        }
        toObject() {
            const data: {
                batch?: ReturnType<typeof dependency_6.api.common.Batch.prototype.toObject>;
                tenant_id?: number;
                name?: string;
                worker_state?: dependency_5.api.common.WorkerState;
            } = {};
            if (this.batch != null) {
                data.batch = this.batch.toObject();
            }
            if (this.tenant_id != null) {
                data.tenant_id = this.tenant_id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.worker_state != null) {
                data.worker_state = this.worker_state;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_batch)
                writer.writeMessage(1, this.batch, () => this.batch.serialize(writer));
            if (this.tenant_id != 0)
                writer.writeInt32(2, this.tenant_id);
            if (this.name.length)
                writer.writeString(3, this.name);
            if (this.worker_state != dependency_5.api.common.WorkerState.WORKER_OFFLINE)
                writer.writeEnum(4, this.worker_state);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TenantWorkerQueryRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TenantWorkerQueryRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.batch, () => message.batch = dependency_6.api.common.Batch.deserialize(reader));
                        break;
                    case 2:
                        message.tenant_id = reader.readInt32();
                        break;
                    case 3:
                        message.name = reader.readString();
                        break;
                    case 4:
                        message.worker_state = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TenantWorkerQueryRequest {
            return TenantWorkerQueryRequest.deserialize(bytes);
        }
    }
    export class TenantWorkerQueryResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            items?: WorkerWithState[];
            batch?: dependency_6.api.common.Batch;
            total?: number;
            online_total?: number;
            all_total?: number;
            workers_capacity?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("items" in data && data.items != undefined) {
                    this.items = data.items;
                }
                if ("batch" in data && data.batch != undefined) {
                    this.batch = data.batch;
                }
                if ("total" in data && data.total != undefined) {
                    this.total = data.total;
                }
                if ("online_total" in data && data.online_total != undefined) {
                    this.online_total = data.online_total;
                }
                if ("all_total" in data && data.all_total != undefined) {
                    this.all_total = data.all_total;
                }
                if ("workers_capacity" in data && data.workers_capacity != undefined) {
                    this.workers_capacity = data.workers_capacity;
                }
            }
        }
        get items() {
            return pb_1.Message.getRepeatedWrapperField(this, WorkerWithState, 1) as WorkerWithState[];
        }
        set items(value: WorkerWithState[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get batch() {
            return pb_1.Message.getWrapperField(this, dependency_6.api.common.Batch, 2) as dependency_6.api.common.Batch;
        }
        set batch(value: dependency_6.api.common.Batch) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_batch() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get total() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set total(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get online_total() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set online_total(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get all_total() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set all_total(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get workers_capacity() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set workers_capacity(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            items?: ReturnType<typeof WorkerWithState.prototype.toObject>[];
            batch?: ReturnType<typeof dependency_6.api.common.Batch.prototype.toObject>;
            total?: number;
            online_total?: number;
            all_total?: number;
            workers_capacity?: number;
        }): TenantWorkerQueryResponse {
            const message = new TenantWorkerQueryResponse({});
            if (data.items != null) {
                message.items = data.items.map(item => WorkerWithState.fromObject(item));
            }
            if (data.batch != null) {
                message.batch = dependency_6.api.common.Batch.fromObject(data.batch);
            }
            if (data.total != null) {
                message.total = data.total;
            }
            if (data.online_total != null) {
                message.online_total = data.online_total;
            }
            if (data.all_total != null) {
                message.all_total = data.all_total;
            }
            if (data.workers_capacity != null) {
                message.workers_capacity = data.workers_capacity;
            }
            return message;
        }
        toObject() {
            const data: {
                items?: ReturnType<typeof WorkerWithState.prototype.toObject>[];
                batch?: ReturnType<typeof dependency_6.api.common.Batch.prototype.toObject>;
                total?: number;
                online_total?: number;
                all_total?: number;
                workers_capacity?: number;
            } = {};
            if (this.items != null) {
                data.items = this.items.map((item: WorkerWithState) => item.toObject());
            }
            if (this.batch != null) {
                data.batch = this.batch.toObject();
            }
            if (this.total != null) {
                data.total = this.total;
            }
            if (this.online_total != null) {
                data.online_total = this.online_total;
            }
            if (this.all_total != null) {
                data.all_total = this.all_total;
            }
            if (this.workers_capacity != null) {
                data.workers_capacity = this.workers_capacity;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.items.length)
                writer.writeRepeatedMessage(1, this.items, (item: WorkerWithState) => item.serialize(writer));
            if (this.has_batch)
                writer.writeMessage(2, this.batch, () => this.batch.serialize(writer));
            if (this.total != 0)
                writer.writeInt32(3, this.total);
            if (this.online_total != 0)
                writer.writeInt32(4, this.online_total);
            if (this.all_total != 0)
                writer.writeInt32(5, this.all_total);
            if (this.workers_capacity != 0)
                writer.writeInt32(6, this.workers_capacity);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TenantWorkerQueryResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TenantWorkerQueryResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.items, () => pb_1.Message.addToRepeatedWrapperField(message, 1, WorkerWithState.deserialize(reader), WorkerWithState));
                        break;
                    case 2:
                        reader.readMessage(message.batch, () => message.batch = dependency_6.api.common.Batch.deserialize(reader));
                        break;
                    case 3:
                        message.total = reader.readInt32();
                        break;
                    case 4:
                        message.online_total = reader.readInt32();
                        break;
                    case 5:
                        message.all_total = reader.readInt32();
                        break;
                    case 6:
                        message.workers_capacity = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TenantWorkerQueryResponse {
            return TenantWorkerQueryResponse.deserialize(bytes);
        }
    }
    export class WorkerWithState extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            worker?: dependency_5.api.common.Worker;
            worker_state?: dependency_5.api.common.WorkerState;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("worker" in data && data.worker != undefined) {
                    this.worker = data.worker;
                }
                if ("worker_state" in data && data.worker_state != undefined) {
                    this.worker_state = data.worker_state;
                }
            }
        }
        get worker() {
            return pb_1.Message.getWrapperField(this, dependency_5.api.common.Worker, 1) as dependency_5.api.common.Worker;
        }
        set worker(value: dependency_5.api.common.Worker) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_worker() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get worker_state() {
            return pb_1.Message.getFieldWithDefault(this, 2, dependency_5.api.common.WorkerState.WORKER_OFFLINE) as dependency_5.api.common.WorkerState;
        }
        set worker_state(value: dependency_5.api.common.WorkerState) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            worker?: ReturnType<typeof dependency_5.api.common.Worker.prototype.toObject>;
            worker_state?: dependency_5.api.common.WorkerState;
        }): WorkerWithState {
            const message = new WorkerWithState({});
            if (data.worker != null) {
                message.worker = dependency_5.api.common.Worker.fromObject(data.worker);
            }
            if (data.worker_state != null) {
                message.worker_state = data.worker_state;
            }
            return message;
        }
        toObject() {
            const data: {
                worker?: ReturnType<typeof dependency_5.api.common.Worker.prototype.toObject>;
                worker_state?: dependency_5.api.common.WorkerState;
            } = {};
            if (this.worker != null) {
                data.worker = this.worker.toObject();
            }
            if (this.worker_state != null) {
                data.worker_state = this.worker_state;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_worker)
                writer.writeMessage(1, this.worker, () => this.worker.serialize(writer));
            if (this.worker_state != dependency_5.api.common.WorkerState.WORKER_OFFLINE)
                writer.writeEnum(2, this.worker_state);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WorkerWithState {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WorkerWithState();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.worker, () => message.worker = dependency_5.api.common.Worker.deserialize(reader));
                        break;
                    case 2:
                        message.worker_state = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WorkerWithState {
            return WorkerWithState.deserialize(bytes);
        }
    }
    export class TenantLogReq extends pb_1.Message {
        #one_of_decls: number[][] = [[5]];
        constructor(data?: any[] | ({
            batch?: dependency_6.api.common.Batch;
            query_type?: number;
            user_name?: string;
            role?: number;
            date?: string;
        } & (({
            ip?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("batch" in data && data.batch != undefined) {
                    this.batch = data.batch;
                }
                if ("query_type" in data && data.query_type != undefined) {
                    this.query_type = data.query_type;
                }
                if ("user_name" in data && data.user_name != undefined) {
                    this.user_name = data.user_name;
                }
                if ("role" in data && data.role != undefined) {
                    this.role = data.role;
                }
                if ("ip" in data && data.ip != undefined) {
                    this.ip = data.ip;
                }
                if ("date" in data && data.date != undefined) {
                    this.date = data.date;
                }
            }
        }
        get batch() {
            return pb_1.Message.getWrapperField(this, dependency_6.api.common.Batch, 1) as dependency_6.api.common.Batch;
        }
        set batch(value: dependency_6.api.common.Batch) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_batch() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get query_type() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set query_type(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get user_name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set user_name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get role() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set role(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get ip() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set ip(value: string) {
            pb_1.Message.setOneofField(this, 5, this.#one_of_decls[0], value);
        }
        get has_ip() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get date() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set date(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get _ip() {
            const cases: {
                [index: number]: "none" | "ip";
            } = {
                0: "none",
                5: "ip"
            };
            return cases[pb_1.Message.computeOneofCase(this, [5])];
        }
        static fromObject(data: {
            batch?: ReturnType<typeof dependency_6.api.common.Batch.prototype.toObject>;
            query_type?: number;
            user_name?: string;
            role?: number;
            ip?: string;
            date?: string;
        }): TenantLogReq {
            const message = new TenantLogReq({});
            if (data.batch != null) {
                message.batch = dependency_6.api.common.Batch.fromObject(data.batch);
            }
            if (data.query_type != null) {
                message.query_type = data.query_type;
            }
            if (data.user_name != null) {
                message.user_name = data.user_name;
            }
            if (data.role != null) {
                message.role = data.role;
            }
            if (data.ip != null) {
                message.ip = data.ip;
            }
            if (data.date != null) {
                message.date = data.date;
            }
            return message;
        }
        toObject() {
            const data: {
                batch?: ReturnType<typeof dependency_6.api.common.Batch.prototype.toObject>;
                query_type?: number;
                user_name?: string;
                role?: number;
                ip?: string;
                date?: string;
            } = {};
            if (this.batch != null) {
                data.batch = this.batch.toObject();
            }
            if (this.query_type != null) {
                data.query_type = this.query_type;
            }
            if (this.user_name != null) {
                data.user_name = this.user_name;
            }
            if (this.role != null) {
                data.role = this.role;
            }
            if (this.ip != null) {
                data.ip = this.ip;
            }
            if (this.date != null) {
                data.date = this.date;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_batch)
                writer.writeMessage(1, this.batch, () => this.batch.serialize(writer));
            if (this.query_type != 0)
                writer.writeInt32(2, this.query_type);
            if (this.user_name.length)
                writer.writeString(3, this.user_name);
            if (this.role != 0)
                writer.writeInt32(4, this.role);
            if (this.has_ip)
                writer.writeString(5, this.ip);
            if (this.date.length)
                writer.writeString(6, this.date);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TenantLogReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TenantLogReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.batch, () => message.batch = dependency_6.api.common.Batch.deserialize(reader));
                        break;
                    case 2:
                        message.query_type = reader.readInt32();
                        break;
                    case 3:
                        message.user_name = reader.readString();
                        break;
                    case 4:
                        message.role = reader.readInt32();
                        break;
                    case 5:
                        message.ip = reader.readString();
                        break;
                    case 6:
                        message.date = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TenantLogReq {
            return TenantLogReq.deserialize(bytes);
        }
    }
    export class TenantLogItem extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            user_id?: number;
            user_account?: string;
            role?: string;
            create_time?: number;
            detail?: string;
            ip?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("user_id" in data && data.user_id != undefined) {
                    this.user_id = data.user_id;
                }
                if ("user_account" in data && data.user_account != undefined) {
                    this.user_account = data.user_account;
                }
                if ("role" in data && data.role != undefined) {
                    this.role = data.role;
                }
                if ("create_time" in data && data.create_time != undefined) {
                    this.create_time = data.create_time;
                }
                if ("detail" in data && data.detail != undefined) {
                    this.detail = data.detail;
                }
                if ("ip" in data && data.ip != undefined) {
                    this.ip = data.ip;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get user_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set user_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get user_account() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set user_account(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get role() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set role(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get create_time() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set create_time(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get detail() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set detail(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get ip() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set ip(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            id?: number;
            user_id?: number;
            user_account?: string;
            role?: string;
            create_time?: number;
            detail?: string;
            ip?: string;
        }): TenantLogItem {
            const message = new TenantLogItem({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.user_id != null) {
                message.user_id = data.user_id;
            }
            if (data.user_account != null) {
                message.user_account = data.user_account;
            }
            if (data.role != null) {
                message.role = data.role;
            }
            if (data.create_time != null) {
                message.create_time = data.create_time;
            }
            if (data.detail != null) {
                message.detail = data.detail;
            }
            if (data.ip != null) {
                message.ip = data.ip;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                user_id?: number;
                user_account?: string;
                role?: string;
                create_time?: number;
                detail?: string;
                ip?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.user_id != null) {
                data.user_id = this.user_id;
            }
            if (this.user_account != null) {
                data.user_account = this.user_account;
            }
            if (this.role != null) {
                data.role = this.role;
            }
            if (this.create_time != null) {
                data.create_time = this.create_time;
            }
            if (this.detail != null) {
                data.detail = this.detail;
            }
            if (this.ip != null) {
                data.ip = this.ip;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt32(1, this.id);
            if (this.user_id != 0)
                writer.writeInt32(2, this.user_id);
            if (this.user_account.length)
                writer.writeString(3, this.user_account);
            if (this.role.length)
                writer.writeString(4, this.role);
            if (this.create_time != 0)
                writer.writeInt64(5, this.create_time);
            if (this.detail.length)
                writer.writeString(6, this.detail);
            if (this.ip.length)
                writer.writeString(7, this.ip);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TenantLogItem {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TenantLogItem();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    case 2:
                        message.user_id = reader.readInt32();
                        break;
                    case 3:
                        message.user_account = reader.readString();
                        break;
                    case 4:
                        message.role = reader.readString();
                        break;
                    case 5:
                        message.create_time = reader.readInt64();
                        break;
                    case 6:
                        message.detail = reader.readString();
                        break;
                    case 7:
                        message.ip = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TenantLogItem {
            return TenantLogItem.deserialize(bytes);
        }
    }
    export class TenantLogResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            batch?: dependency_6.api.common.Batch;
            logs?: TenantLogItem[];
            total?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("batch" in data && data.batch != undefined) {
                    this.batch = data.batch;
                }
                if ("logs" in data && data.logs != undefined) {
                    this.logs = data.logs;
                }
                if ("total" in data && data.total != undefined) {
                    this.total = data.total;
                }
            }
        }
        get batch() {
            return pb_1.Message.getWrapperField(this, dependency_6.api.common.Batch, 1) as dependency_6.api.common.Batch;
        }
        set batch(value: dependency_6.api.common.Batch) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_batch() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get logs() {
            return pb_1.Message.getRepeatedWrapperField(this, TenantLogItem, 2) as TenantLogItem[];
        }
        set logs(value: TenantLogItem[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get total() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set total(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            batch?: ReturnType<typeof dependency_6.api.common.Batch.prototype.toObject>;
            logs?: ReturnType<typeof TenantLogItem.prototype.toObject>[];
            total?: number;
        }): TenantLogResp {
            const message = new TenantLogResp({});
            if (data.batch != null) {
                message.batch = dependency_6.api.common.Batch.fromObject(data.batch);
            }
            if (data.logs != null) {
                message.logs = data.logs.map(item => TenantLogItem.fromObject(item));
            }
            if (data.total != null) {
                message.total = data.total;
            }
            return message;
        }
        toObject() {
            const data: {
                batch?: ReturnType<typeof dependency_6.api.common.Batch.prototype.toObject>;
                logs?: ReturnType<typeof TenantLogItem.prototype.toObject>[];
                total?: number;
            } = {};
            if (this.batch != null) {
                data.batch = this.batch.toObject();
            }
            if (this.logs != null) {
                data.logs = this.logs.map((item: TenantLogItem) => item.toObject());
            }
            if (this.total != null) {
                data.total = this.total;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_batch)
                writer.writeMessage(1, this.batch, () => this.batch.serialize(writer));
            if (this.logs.length)
                writer.writeRepeatedMessage(2, this.logs, (item: TenantLogItem) => item.serialize(writer));
            if (this.total != 0)
                writer.writeInt32(3, this.total);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TenantLogResp {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TenantLogResp();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.batch, () => message.batch = dependency_6.api.common.Batch.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.logs, () => pb_1.Message.addToRepeatedWrapperField(message, 2, TenantLogItem.deserialize(reader), TenantLogItem));
                        break;
                    case 3:
                        message.total = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TenantLogResp {
            return TenantLogResp.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedTenantService {
        static definition = {
            AdminLogin: {
                path: "/api.core.Tenant/AdminLogin",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: AdminLoginRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => AdminLoginRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: AdminLoginResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => AdminLoginResponse.deserialize(new Uint8Array(bytes))
            },
            Login: {
                path: "/api.core.Tenant/Login",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: LoginRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => LoginRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: LoginResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => LoginResponse.deserialize(new Uint8Array(bytes))
            },
            Logout: {
                path: "/api.core.Tenant/Logout",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            Create: {
                path: "/api.core.Tenant/Create",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: TenantCreateRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => TenantCreateRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            Query: {
                path: "/api.core.Tenant/Query",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: TenantQueryRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => TenantQueryRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: TenantQueryResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => TenantQueryResponse.deserialize(new Uint8Array(bytes))
            },
            UpdateTenant: {
                path: "/api.core.Tenant/UpdateTenant",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdateTenantRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdateTenantRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            DeleteTenant: {
                path: "/api.core.Tenant/DeleteTenant",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DeleteTenantRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DeleteTenantRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            ManagerLogin: {
                path: "/api.core.Tenant/ManagerLogin",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ManagerLoginRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ManagerLoginRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ManagerLoginResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ManagerLoginResponse.deserialize(new Uint8Array(bytes))
            },
            GetRoutes: {
                path: "/api.core.Tenant/GetRoutes",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: RouteRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => RouteRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: RouteResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => RouteResponse.deserialize(new Uint8Array(bytes))
            },
            CreatePublicKey: {
                path: "/api.core.Tenant/CreatePublicKey",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: PublicKeyResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => PublicKeyResponse.deserialize(new Uint8Array(bytes))
            },
            QuerySelfInfo: {
                path: "/api.core.Tenant/QuerySelfInfo",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryTenantInfoResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryTenantInfoResponse.deserialize(new Uint8Array(bytes))
            },
            UpdateNimInfo: {
                path: "/api.core.Tenant/UpdateNimInfo",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdateNimInfoRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdateNimInfoRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            ExportUsersList: {
                path: "/api.core.Tenant/ExportUsersList",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            create_version: {
                path: "/api.core.Tenant/create_version",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: VersionRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => VersionRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CreateVersionResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CreateVersionResponse.deserialize(new Uint8Array(bytes))
            },
            update_version: {
                path: "/api.core.Tenant/update_version",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: VersionRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => VersionRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: UpdateVersionResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => UpdateVersionResponse.deserialize(new Uint8Array(bytes))
            },
            getallversion: {
                path: "/api.core.Tenant/getallversion",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetVersionResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetVersionResponse.deserialize(new Uint8Array(bytes))
            },
            version: {
                path: "/api.core.Tenant/version",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetVersionResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetVersionResponse.deserialize(new Uint8Array(bytes))
            },
            api_set: {
                path: "/api.core.Tenant/api_set",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: TenantThirdSetting) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => TenantThirdSetting.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            LineGroupList: {
                path: "/api.core.Tenant/LineGroupList",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: LineGroupListRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => LineGroupListRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: LineGroupListResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => LineGroupListResponse.deserialize(new Uint8Array(bytes))
            },
            LineGroupCreate: {
                path: "/api.core.Tenant/LineGroupCreate",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: LineGroupCreateRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => LineGroupCreateRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            LineGroupUpdate: {
                path: "/api.core.Tenant/LineGroupUpdate",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: LineGroupUpdateRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => LineGroupUpdateRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            LineGroupDelete: {
                path: "/api.core.Tenant/LineGroupDelete",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: LineGroupDeleteRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => LineGroupDeleteRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            TenantWorkerQuery: {
                path: "/api.core.Tenant/TenantWorkerQuery",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: TenantWorkerQueryRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => TenantWorkerQueryRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: TenantWorkerQueryResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => TenantWorkerQueryResponse.deserialize(new Uint8Array(bytes))
            },
            TenantLogQuery: {
                path: "/api.core.Tenant/TenantLogQuery",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: TenantLogReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => TenantLogReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: TenantLogResp) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => TenantLogResp.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract AdminLogin(call: grpc_1.ServerUnaryCall<AdminLoginRequest, AdminLoginResponse>, callback: grpc_1.sendUnaryData<AdminLoginResponse>): void;
        abstract Login(call: grpc_1.ServerUnaryCall<LoginRequest, LoginResponse>, callback: grpc_1.sendUnaryData<LoginResponse>): void;
        abstract Logout(call: grpc_1.ServerUnaryCall<dependency_2.google.protobuf.Empty, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
        abstract Create(call: grpc_1.ServerUnaryCall<TenantCreateRequest, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
        abstract Query(call: grpc_1.ServerUnaryCall<TenantQueryRequest, TenantQueryResponse>, callback: grpc_1.sendUnaryData<TenantQueryResponse>): void;
        abstract UpdateTenant(call: grpc_1.ServerUnaryCall<UpdateTenantRequest, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
        abstract DeleteTenant(call: grpc_1.ServerUnaryCall<DeleteTenantRequest, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
        abstract ManagerLogin(call: grpc_1.ServerUnaryCall<ManagerLoginRequest, ManagerLoginResponse>, callback: grpc_1.sendUnaryData<ManagerLoginResponse>): void;
        abstract GetRoutes(call: grpc_1.ServerUnaryCall<RouteRequest, RouteResponse>, callback: grpc_1.sendUnaryData<RouteResponse>): void;
        abstract CreatePublicKey(call: grpc_1.ServerUnaryCall<dependency_2.google.protobuf.Empty, PublicKeyResponse>, callback: grpc_1.sendUnaryData<PublicKeyResponse>): void;
        abstract QuerySelfInfo(call: grpc_1.ServerUnaryCall<dependency_2.google.protobuf.Empty, QueryTenantInfoResponse>, callback: grpc_1.sendUnaryData<QueryTenantInfoResponse>): void;
        abstract UpdateNimInfo(call: grpc_1.ServerUnaryCall<UpdateNimInfoRequest, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
        abstract ExportUsersList(call: grpc_1.ServerUnaryCall<dependency_2.google.protobuf.Empty, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
        abstract create_version(call: grpc_1.ServerUnaryCall<VersionRequest, CreateVersionResponse>, callback: grpc_1.sendUnaryData<CreateVersionResponse>): void;
        abstract update_version(call: grpc_1.ServerUnaryCall<VersionRequest, UpdateVersionResponse>, callback: grpc_1.sendUnaryData<UpdateVersionResponse>): void;
        abstract getallversion(call: grpc_1.ServerUnaryCall<dependency_2.google.protobuf.Empty, GetVersionResponse>, callback: grpc_1.sendUnaryData<GetVersionResponse>): void;
        abstract version(call: grpc_1.ServerUnaryCall<dependency_2.google.protobuf.Empty, GetVersionResponse>, callback: grpc_1.sendUnaryData<GetVersionResponse>): void;
        abstract api_set(call: grpc_1.ServerUnaryCall<TenantThirdSetting, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
        abstract LineGroupList(call: grpc_1.ServerUnaryCall<LineGroupListRequest, LineGroupListResponse>, callback: grpc_1.sendUnaryData<LineGroupListResponse>): void;
        abstract LineGroupCreate(call: grpc_1.ServerUnaryCall<LineGroupCreateRequest, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
        abstract LineGroupUpdate(call: grpc_1.ServerUnaryCall<LineGroupUpdateRequest, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
        abstract LineGroupDelete(call: grpc_1.ServerUnaryCall<LineGroupDeleteRequest, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
        abstract TenantWorkerQuery(call: grpc_1.ServerUnaryCall<TenantWorkerQueryRequest, TenantWorkerQueryResponse>, callback: grpc_1.sendUnaryData<TenantWorkerQueryResponse>): void;
        abstract TenantLogQuery(call: grpc_1.ServerUnaryCall<TenantLogReq, TenantLogResp>, callback: grpc_1.sendUnaryData<TenantLogResp>): void;
    }
    export class TenantClient extends grpc_1.makeGenericClientConstructor(UnimplementedTenantService.definition, "Tenant", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        AdminLogin: GrpcUnaryServiceInterface<AdminLoginRequest, AdminLoginResponse> = (message: AdminLoginRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<AdminLoginResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<AdminLoginResponse>, callback?: grpc_1.requestCallback<AdminLoginResponse>): grpc_1.ClientUnaryCall => {
            return super.AdminLogin(message, metadata, options, callback);
        };
        Login: GrpcUnaryServiceInterface<LoginRequest, LoginResponse> = (message: LoginRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<LoginResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<LoginResponse>, callback?: grpc_1.requestCallback<LoginResponse>): grpc_1.ClientUnaryCall => {
            return super.Login(message, metadata, options, callback);
        };
        Logout: GrpcUnaryServiceInterface<dependency_2.google.protobuf.Empty, dependency_2.google.protobuf.Empty> = (message: dependency_2.google.protobuf.Empty, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_2.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.Logout(message, metadata, options, callback);
        };
        Create: GrpcUnaryServiceInterface<TenantCreateRequest, dependency_2.google.protobuf.Empty> = (message: TenantCreateRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_2.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.Create(message, metadata, options, callback);
        };
        Query: GrpcUnaryServiceInterface<TenantQueryRequest, TenantQueryResponse> = (message: TenantQueryRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<TenantQueryResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<TenantQueryResponse>, callback?: grpc_1.requestCallback<TenantQueryResponse>): grpc_1.ClientUnaryCall => {
            return super.Query(message, metadata, options, callback);
        };
        UpdateTenant: GrpcUnaryServiceInterface<UpdateTenantRequest, dependency_2.google.protobuf.Empty> = (message: UpdateTenantRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_2.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.UpdateTenant(message, metadata, options, callback);
        };
        DeleteTenant: GrpcUnaryServiceInterface<DeleteTenantRequest, dependency_2.google.protobuf.Empty> = (message: DeleteTenantRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_2.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.DeleteTenant(message, metadata, options, callback);
        };
        ManagerLogin: GrpcUnaryServiceInterface<ManagerLoginRequest, ManagerLoginResponse> = (message: ManagerLoginRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ManagerLoginResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ManagerLoginResponse>, callback?: grpc_1.requestCallback<ManagerLoginResponse>): grpc_1.ClientUnaryCall => {
            return super.ManagerLogin(message, metadata, options, callback);
        };
        GetRoutes: GrpcUnaryServiceInterface<RouteRequest, RouteResponse> = (message: RouteRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<RouteResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<RouteResponse>, callback?: grpc_1.requestCallback<RouteResponse>): grpc_1.ClientUnaryCall => {
            return super.GetRoutes(message, metadata, options, callback);
        };
        CreatePublicKey: GrpcUnaryServiceInterface<dependency_2.google.protobuf.Empty, PublicKeyResponse> = (message: dependency_2.google.protobuf.Empty, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<PublicKeyResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<PublicKeyResponse>, callback?: grpc_1.requestCallback<PublicKeyResponse>): grpc_1.ClientUnaryCall => {
            return super.CreatePublicKey(message, metadata, options, callback);
        };
        QuerySelfInfo: GrpcUnaryServiceInterface<dependency_2.google.protobuf.Empty, QueryTenantInfoResponse> = (message: dependency_2.google.protobuf.Empty, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryTenantInfoResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryTenantInfoResponse>, callback?: grpc_1.requestCallback<QueryTenantInfoResponse>): grpc_1.ClientUnaryCall => {
            return super.QuerySelfInfo(message, metadata, options, callback);
        };
        UpdateNimInfo: GrpcUnaryServiceInterface<UpdateNimInfoRequest, dependency_2.google.protobuf.Empty> = (message: UpdateNimInfoRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_2.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.UpdateNimInfo(message, metadata, options, callback);
        };
        ExportUsersList: GrpcUnaryServiceInterface<dependency_2.google.protobuf.Empty, dependency_2.google.protobuf.Empty> = (message: dependency_2.google.protobuf.Empty, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_2.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.ExportUsersList(message, metadata, options, callback);
        };
        create_version: GrpcUnaryServiceInterface<VersionRequest, CreateVersionResponse> = (message: VersionRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CreateVersionResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CreateVersionResponse>, callback?: grpc_1.requestCallback<CreateVersionResponse>): grpc_1.ClientUnaryCall => {
            return super.create_version(message, metadata, options, callback);
        };
        update_version: GrpcUnaryServiceInterface<VersionRequest, UpdateVersionResponse> = (message: VersionRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<UpdateVersionResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<UpdateVersionResponse>, callback?: grpc_1.requestCallback<UpdateVersionResponse>): grpc_1.ClientUnaryCall => {
            return super.update_version(message, metadata, options, callback);
        };
        getallversion: GrpcUnaryServiceInterface<dependency_2.google.protobuf.Empty, GetVersionResponse> = (message: dependency_2.google.protobuf.Empty, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetVersionResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetVersionResponse>, callback?: grpc_1.requestCallback<GetVersionResponse>): grpc_1.ClientUnaryCall => {
            return super.getallversion(message, metadata, options, callback);
        };
        version: GrpcUnaryServiceInterface<dependency_2.google.protobuf.Empty, GetVersionResponse> = (message: dependency_2.google.protobuf.Empty, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetVersionResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetVersionResponse>, callback?: grpc_1.requestCallback<GetVersionResponse>): grpc_1.ClientUnaryCall => {
            return super.version(message, metadata, options, callback);
        };
        api_set: GrpcUnaryServiceInterface<TenantThirdSetting, dependency_2.google.protobuf.Empty> = (message: TenantThirdSetting, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_2.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.api_set(message, metadata, options, callback);
        };
        LineGroupList: GrpcUnaryServiceInterface<LineGroupListRequest, LineGroupListResponse> = (message: LineGroupListRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<LineGroupListResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<LineGroupListResponse>, callback?: grpc_1.requestCallback<LineGroupListResponse>): grpc_1.ClientUnaryCall => {
            return super.LineGroupList(message, metadata, options, callback);
        };
        LineGroupCreate: GrpcUnaryServiceInterface<LineGroupCreateRequest, dependency_2.google.protobuf.Empty> = (message: LineGroupCreateRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_2.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.LineGroupCreate(message, metadata, options, callback);
        };
        LineGroupUpdate: GrpcUnaryServiceInterface<LineGroupUpdateRequest, dependency_2.google.protobuf.Empty> = (message: LineGroupUpdateRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_2.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.LineGroupUpdate(message, metadata, options, callback);
        };
        LineGroupDelete: GrpcUnaryServiceInterface<LineGroupDeleteRequest, dependency_2.google.protobuf.Empty> = (message: LineGroupDeleteRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_2.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.LineGroupDelete(message, metadata, options, callback);
        };
        TenantWorkerQuery: GrpcUnaryServiceInterface<TenantWorkerQueryRequest, TenantWorkerQueryResponse> = (message: TenantWorkerQueryRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<TenantWorkerQueryResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<TenantWorkerQueryResponse>, callback?: grpc_1.requestCallback<TenantWorkerQueryResponse>): grpc_1.ClientUnaryCall => {
            return super.TenantWorkerQuery(message, metadata, options, callback);
        };
        TenantLogQuery: GrpcUnaryServiceInterface<TenantLogReq, TenantLogResp> = (message: TenantLogReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<TenantLogResp>, options?: grpc_1.CallOptions | grpc_1.requestCallback<TenantLogResp>, callback?: grpc_1.requestCallback<TenantLogResp>): grpc_1.ClientUnaryCall => {
            return super.TenantLogQuery(message, metadata, options, callback);
        };
    }
}
