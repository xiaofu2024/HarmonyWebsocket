/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.26.1
 * source: api/core/worker_group.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../option";
import * as dependency_2 from "./../common/c_worker";
import * as dependency_3 from "./../common/c_base";
import * as dependency_4 from "./../../google/protobuf/empty";
import * as dependency_5 from "./../../validate/validate";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace api.core {
    export class WorkerGroupQueryByPermRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[1]];
        constructor(data?: any[] | ({} & (({
            disable_status?: dependency_3.api.common.DisableStatus;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("disable_status" in data && data.disable_status != undefined) {
                    this.disable_status = data.disable_status;
                }
            }
        }
        get disable_status() {
            return pb_1.Message.getFieldWithDefault(this, 1, dependency_3.api.common.DisableStatus.DEFAULT) as dependency_3.api.common.DisableStatus;
        }
        set disable_status(value: dependency_3.api.common.DisableStatus) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_disable_status() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get _disable_status() {
            const cases: {
                [index: number]: "none" | "disable_status";
            } = {
                0: "none",
                1: "disable_status"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1])];
        }
        static fromObject(data: {
            disable_status?: dependency_3.api.common.DisableStatus;
        }): WorkerGroupQueryByPermRequest {
            const message = new WorkerGroupQueryByPermRequest({});
            if (data.disable_status != null) {
                message.disable_status = data.disable_status;
            }
            return message;
        }
        toObject() {
            const data: {
                disable_status?: dependency_3.api.common.DisableStatus;
            } = {};
            if (this.disable_status != null) {
                data.disable_status = this.disable_status;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_disable_status)
                writer.writeEnum(1, this.disable_status);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WorkerGroupQueryByPermRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WorkerGroupQueryByPermRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.disable_status = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WorkerGroupQueryByPermRequest {
            return WorkerGroupQueryByPermRequest.deserialize(bytes);
        }
    }
    export class WorkerGroupQueryResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            items?: dependency_2.api.common.WorkerGroup[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("items" in data && data.items != undefined) {
                    this.items = data.items;
                }
            }
        }
        get items() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.api.common.WorkerGroup, 1) as dependency_2.api.common.WorkerGroup[];
        }
        set items(value: dependency_2.api.common.WorkerGroup[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            items?: ReturnType<typeof dependency_2.api.common.WorkerGroup.prototype.toObject>[];
        }): WorkerGroupQueryResponse {
            const message = new WorkerGroupQueryResponse({});
            if (data.items != null) {
                message.items = data.items.map(item => dependency_2.api.common.WorkerGroup.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                items?: ReturnType<typeof dependency_2.api.common.WorkerGroup.prototype.toObject>[];
            } = {};
            if (this.items != null) {
                data.items = this.items.map((item: dependency_2.api.common.WorkerGroup) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.items.length)
                writer.writeRepeatedMessage(1, this.items, (item: dependency_2.api.common.WorkerGroup) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WorkerGroupQueryResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WorkerGroupQueryResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.items, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_2.api.common.WorkerGroup.deserialize(reader), dependency_2.api.common.WorkerGroup));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WorkerGroupQueryResponse {
            return WorkerGroupQueryResponse.deserialize(bytes);
        }
    }
    export class WorkerGroupCreateRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            priority?: number;
            children?: dependency_2.api.common.WorkerGroup[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("priority" in data && data.priority != undefined) {
                    this.priority = data.priority;
                }
                if ("children" in data && data.children != undefined) {
                    this.children = data.children;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get priority() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set priority(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get children() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.api.common.WorkerGroup, 3) as dependency_2.api.common.WorkerGroup[];
        }
        set children(value: dependency_2.api.common.WorkerGroup[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        static fromObject(data: {
            name?: string;
            priority?: number;
            children?: ReturnType<typeof dependency_2.api.common.WorkerGroup.prototype.toObject>[];
        }): WorkerGroupCreateRequest {
            const message = new WorkerGroupCreateRequest({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.priority != null) {
                message.priority = data.priority;
            }
            if (data.children != null) {
                message.children = data.children.map(item => dependency_2.api.common.WorkerGroup.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                priority?: number;
                children?: ReturnType<typeof dependency_2.api.common.WorkerGroup.prototype.toObject>[];
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.priority != null) {
                data.priority = this.priority;
            }
            if (this.children != null) {
                data.children = this.children.map((item: dependency_2.api.common.WorkerGroup) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.priority != 0)
                writer.writeInt32(2, this.priority);
            if (this.children.length)
                writer.writeRepeatedMessage(3, this.children, (item: dependency_2.api.common.WorkerGroup) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WorkerGroupCreateRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WorkerGroupCreateRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.priority = reader.readInt32();
                        break;
                    case 3:
                        reader.readMessage(message.children, () => pb_1.Message.addToRepeatedWrapperField(message, 3, dependency_2.api.common.WorkerGroup.deserialize(reader), dependency_2.api.common.WorkerGroup));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WorkerGroupCreateRequest {
            return WorkerGroupCreateRequest.deserialize(bytes);
        }
    }
    export class WorkerGroupCreateResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            name?: string;
            priority?: number;
            children?: dependency_2.api.common.WorkerGroup[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("priority" in data && data.priority != undefined) {
                    this.priority = data.priority;
                }
                if ("children" in data && data.children != undefined) {
                    this.children = data.children;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get priority() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set priority(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get children() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.api.common.WorkerGroup, 4) as dependency_2.api.common.WorkerGroup[];
        }
        set children(value: dependency_2.api.common.WorkerGroup[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        static fromObject(data: {
            id?: number;
            name?: string;
            priority?: number;
            children?: ReturnType<typeof dependency_2.api.common.WorkerGroup.prototype.toObject>[];
        }): WorkerGroupCreateResponse {
            const message = new WorkerGroupCreateResponse({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.priority != null) {
                message.priority = data.priority;
            }
            if (data.children != null) {
                message.children = data.children.map(item => dependency_2.api.common.WorkerGroup.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                name?: string;
                priority?: number;
                children?: ReturnType<typeof dependency_2.api.common.WorkerGroup.prototype.toObject>[];
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.priority != null) {
                data.priority = this.priority;
            }
            if (this.children != null) {
                data.children = this.children.map((item: dependency_2.api.common.WorkerGroup) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt64(1, this.id);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.priority != 0)
                writer.writeInt32(3, this.priority);
            if (this.children.length)
                writer.writeRepeatedMessage(4, this.children, (item: dependency_2.api.common.WorkerGroup) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WorkerGroupCreateResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WorkerGroupCreateResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt64();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.priority = reader.readInt32();
                        break;
                    case 4:
                        reader.readMessage(message.children, () => pb_1.Message.addToRepeatedWrapperField(message, 4, dependency_2.api.common.WorkerGroup.deserialize(reader), dependency_2.api.common.WorkerGroup));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WorkerGroupCreateResponse {
            return WorkerGroupCreateResponse.deserialize(bytes);
        }
    }
    export class WorkerGroupUpdateRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            name?: string;
            priority?: number;
            children?: dependency_2.api.common.WorkerGroup[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("priority" in data && data.priority != undefined) {
                    this.priority = data.priority;
                }
                if ("children" in data && data.children != undefined) {
                    this.children = data.children;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get priority() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set priority(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get children() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.api.common.WorkerGroup, 4) as dependency_2.api.common.WorkerGroup[];
        }
        set children(value: dependency_2.api.common.WorkerGroup[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        static fromObject(data: {
            id?: number;
            name?: string;
            priority?: number;
            children?: ReturnType<typeof dependency_2.api.common.WorkerGroup.prototype.toObject>[];
        }): WorkerGroupUpdateRequest {
            const message = new WorkerGroupUpdateRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.priority != null) {
                message.priority = data.priority;
            }
            if (data.children != null) {
                message.children = data.children.map(item => dependency_2.api.common.WorkerGroup.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                name?: string;
                priority?: number;
                children?: ReturnType<typeof dependency_2.api.common.WorkerGroup.prototype.toObject>[];
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.priority != null) {
                data.priority = this.priority;
            }
            if (this.children != null) {
                data.children = this.children.map((item: dependency_2.api.common.WorkerGroup) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt64(1, this.id);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.priority != 0)
                writer.writeInt32(3, this.priority);
            if (this.children.length)
                writer.writeRepeatedMessage(4, this.children, (item: dependency_2.api.common.WorkerGroup) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WorkerGroupUpdateRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WorkerGroupUpdateRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt64();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.priority = reader.readInt32();
                        break;
                    case 4:
                        reader.readMessage(message.children, () => pb_1.Message.addToRepeatedWrapperField(message, 4, dependency_2.api.common.WorkerGroup.deserialize(reader), dependency_2.api.common.WorkerGroup));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WorkerGroupUpdateRequest {
            return WorkerGroupUpdateRequest.deserialize(bytes);
        }
    }
    export class WorkerGroupUpdateResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            name?: string;
            priority?: number;
            children?: dependency_2.api.common.WorkerGroup[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("priority" in data && data.priority != undefined) {
                    this.priority = data.priority;
                }
                if ("children" in data && data.children != undefined) {
                    this.children = data.children;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get priority() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set priority(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get children() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.api.common.WorkerGroup, 4) as dependency_2.api.common.WorkerGroup[];
        }
        set children(value: dependency_2.api.common.WorkerGroup[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        static fromObject(data: {
            id?: number;
            name?: string;
            priority?: number;
            children?: ReturnType<typeof dependency_2.api.common.WorkerGroup.prototype.toObject>[];
        }): WorkerGroupUpdateResponse {
            const message = new WorkerGroupUpdateResponse({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.priority != null) {
                message.priority = data.priority;
            }
            if (data.children != null) {
                message.children = data.children.map(item => dependency_2.api.common.WorkerGroup.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                name?: string;
                priority?: number;
                children?: ReturnType<typeof dependency_2.api.common.WorkerGroup.prototype.toObject>[];
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.priority != null) {
                data.priority = this.priority;
            }
            if (this.children != null) {
                data.children = this.children.map((item: dependency_2.api.common.WorkerGroup) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt64(1, this.id);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.priority != 0)
                writer.writeInt32(3, this.priority);
            if (this.children.length)
                writer.writeRepeatedMessage(4, this.children, (item: dependency_2.api.common.WorkerGroup) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WorkerGroupUpdateResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WorkerGroupUpdateResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt64();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.priority = reader.readInt32();
                        break;
                    case 4:
                        reader.readMessage(message.children, () => pb_1.Message.addToRepeatedWrapperField(message, 4, dependency_2.api.common.WorkerGroup.deserialize(reader), dependency_2.api.common.WorkerGroup));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WorkerGroupUpdateResponse {
            return WorkerGroupUpdateResponse.deserialize(bytes);
        }
    }
    export class WorkerGroupDeleteRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            id?: number;
        }): WorkerGroupDeleteRequest {
            const message = new WorkerGroupDeleteRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt64(1, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WorkerGroupDeleteRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WorkerGroupDeleteRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WorkerGroupDeleteRequest {
            return WorkerGroupDeleteRequest.deserialize(bytes);
        }
    }
    export class WorkerGroupDisableRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            disable_status?: dependency_3.api.common.DisableStatus;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("disable_status" in data && data.disable_status != undefined) {
                    this.disable_status = data.disable_status;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get disable_status() {
            return pb_1.Message.getFieldWithDefault(this, 2, dependency_3.api.common.DisableStatus.DEFAULT) as dependency_3.api.common.DisableStatus;
        }
        set disable_status(value: dependency_3.api.common.DisableStatus) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            id?: number;
            disable_status?: dependency_3.api.common.DisableStatus;
        }): WorkerGroupDisableRequest {
            const message = new WorkerGroupDisableRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.disable_status != null) {
                message.disable_status = data.disable_status;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                disable_status?: dependency_3.api.common.DisableStatus;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.disable_status != null) {
                data.disable_status = this.disable_status;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt64(1, this.id);
            if (this.disable_status != dependency_3.api.common.DisableStatus.DEFAULT)
                writer.writeEnum(2, this.disable_status);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WorkerGroupDisableRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WorkerGroupDisableRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt64();
                        break;
                    case 2:
                        message.disable_status = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WorkerGroupDisableRequest {
            return WorkerGroupDisableRequest.deserialize(bytes);
        }
    }
    export class GroupQueryModel extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            name?: string;
            priority?: number;
            count?: number;
            GroupAdmin?: string[];
            GroupLeader?: string[];
            child?: dependency_2.api.common.WorkerGroup[];
            disable_status?: dependency_3.api.common.DisableStatus;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [5, 6, 7], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("priority" in data && data.priority != undefined) {
                    this.priority = data.priority;
                }
                if ("count" in data && data.count != undefined) {
                    this.count = data.count;
                }
                if ("GroupAdmin" in data && data.GroupAdmin != undefined) {
                    this.GroupAdmin = data.GroupAdmin;
                }
                if ("GroupLeader" in data && data.GroupLeader != undefined) {
                    this.GroupLeader = data.GroupLeader;
                }
                if ("child" in data && data.child != undefined) {
                    this.child = data.child;
                }
                if ("disable_status" in data && data.disable_status != undefined) {
                    this.disable_status = data.disable_status;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get priority() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set priority(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get count() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set count(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get GroupAdmin() {
            return pb_1.Message.getFieldWithDefault(this, 5, []) as string[];
        }
        set GroupAdmin(value: string[]) {
            pb_1.Message.setField(this, 5, value);
        }
        get GroupLeader() {
            return pb_1.Message.getFieldWithDefault(this, 6, []) as string[];
        }
        set GroupLeader(value: string[]) {
            pb_1.Message.setField(this, 6, value);
        }
        get child() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.api.common.WorkerGroup, 7) as dependency_2.api.common.WorkerGroup[];
        }
        set child(value: dependency_2.api.common.WorkerGroup[]) {
            pb_1.Message.setRepeatedWrapperField(this, 7, value);
        }
        get disable_status() {
            return pb_1.Message.getFieldWithDefault(this, 8, dependency_3.api.common.DisableStatus.DEFAULT) as dependency_3.api.common.DisableStatus;
        }
        set disable_status(value: dependency_3.api.common.DisableStatus) {
            pb_1.Message.setField(this, 8, value);
        }
        static fromObject(data: {
            id?: number;
            name?: string;
            priority?: number;
            count?: number;
            GroupAdmin?: string[];
            GroupLeader?: string[];
            child?: ReturnType<typeof dependency_2.api.common.WorkerGroup.prototype.toObject>[];
            disable_status?: dependency_3.api.common.DisableStatus;
        }): GroupQueryModel {
            const message = new GroupQueryModel({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.priority != null) {
                message.priority = data.priority;
            }
            if (data.count != null) {
                message.count = data.count;
            }
            if (data.GroupAdmin != null) {
                message.GroupAdmin = data.GroupAdmin;
            }
            if (data.GroupLeader != null) {
                message.GroupLeader = data.GroupLeader;
            }
            if (data.child != null) {
                message.child = data.child.map(item => dependency_2.api.common.WorkerGroup.fromObject(item));
            }
            if (data.disable_status != null) {
                message.disable_status = data.disable_status;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                name?: string;
                priority?: number;
                count?: number;
                GroupAdmin?: string[];
                GroupLeader?: string[];
                child?: ReturnType<typeof dependency_2.api.common.WorkerGroup.prototype.toObject>[];
                disable_status?: dependency_3.api.common.DisableStatus;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.priority != null) {
                data.priority = this.priority;
            }
            if (this.count != null) {
                data.count = this.count;
            }
            if (this.GroupAdmin != null) {
                data.GroupAdmin = this.GroupAdmin;
            }
            if (this.GroupLeader != null) {
                data.GroupLeader = this.GroupLeader;
            }
            if (this.child != null) {
                data.child = this.child.map((item: dependency_2.api.common.WorkerGroup) => item.toObject());
            }
            if (this.disable_status != null) {
                data.disable_status = this.disable_status;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt64(1, this.id);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.priority != 0)
                writer.writeInt32(3, this.priority);
            if (this.count != 0)
                writer.writeInt32(4, this.count);
            if (this.GroupAdmin.length)
                writer.writeRepeatedString(5, this.GroupAdmin);
            if (this.GroupLeader.length)
                writer.writeRepeatedString(6, this.GroupLeader);
            if (this.child.length)
                writer.writeRepeatedMessage(7, this.child, (item: dependency_2.api.common.WorkerGroup) => item.serialize(writer));
            if (this.disable_status != dependency_3.api.common.DisableStatus.DEFAULT)
                writer.writeEnum(8, this.disable_status);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GroupQueryModel {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GroupQueryModel();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt64();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.priority = reader.readInt32();
                        break;
                    case 4:
                        message.count = reader.readInt32();
                        break;
                    case 5:
                        pb_1.Message.addToRepeatedField(message, 5, reader.readString());
                        break;
                    case 6:
                        pb_1.Message.addToRepeatedField(message, 6, reader.readString());
                        break;
                    case 7:
                        reader.readMessage(message.child, () => pb_1.Message.addToRepeatedWrapperField(message, 7, dependency_2.api.common.WorkerGroup.deserialize(reader), dependency_2.api.common.WorkerGroup));
                        break;
                    case 8:
                        message.disable_status = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GroupQueryModel {
            return GroupQueryModel.deserialize(bytes);
        }
    }
    export class WorkerGroupQueryRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[1], [2], [4]];
        constructor(data?: any[] | ({
            batch?: dependency_3.api.common.Batch;
        } & (({
            group_pid?: number;
        }) | ({
            group_cid?: number;
        }) | ({
            disable_status?: dependency_3.api.common.DisableStatus;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("group_pid" in data && data.group_pid != undefined) {
                    this.group_pid = data.group_pid;
                }
                if ("group_cid" in data && data.group_cid != undefined) {
                    this.group_cid = data.group_cid;
                }
                if ("batch" in data && data.batch != undefined) {
                    this.batch = data.batch;
                }
                if ("disable_status" in data && data.disable_status != undefined) {
                    this.disable_status = data.disable_status;
                }
            }
        }
        get group_pid() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set group_pid(value: number) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_group_pid() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get group_cid() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set group_cid(value: number) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[1], value);
        }
        get has_group_cid() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get batch() {
            return pb_1.Message.getWrapperField(this, dependency_3.api.common.Batch, 3) as dependency_3.api.common.Batch;
        }
        set batch(value: dependency_3.api.common.Batch) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_batch() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get disable_status() {
            return pb_1.Message.getFieldWithDefault(this, 4, dependency_3.api.common.DisableStatus.DEFAULT) as dependency_3.api.common.DisableStatus;
        }
        set disable_status(value: dependency_3.api.common.DisableStatus) {
            pb_1.Message.setOneofField(this, 4, this.#one_of_decls[2], value);
        }
        get has_disable_status() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get _group_pid() {
            const cases: {
                [index: number]: "none" | "group_pid";
            } = {
                0: "none",
                1: "group_pid"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1])];
        }
        get _group_cid() {
            const cases: {
                [index: number]: "none" | "group_cid";
            } = {
                0: "none",
                2: "group_cid"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        get _disable_status() {
            const cases: {
                [index: number]: "none" | "disable_status";
            } = {
                0: "none",
                4: "disable_status"
            };
            return cases[pb_1.Message.computeOneofCase(this, [4])];
        }
        static fromObject(data: {
            group_pid?: number;
            group_cid?: number;
            batch?: ReturnType<typeof dependency_3.api.common.Batch.prototype.toObject>;
            disable_status?: dependency_3.api.common.DisableStatus;
        }): WorkerGroupQueryRequest {
            const message = new WorkerGroupQueryRequest({});
            if (data.group_pid != null) {
                message.group_pid = data.group_pid;
            }
            if (data.group_cid != null) {
                message.group_cid = data.group_cid;
            }
            if (data.batch != null) {
                message.batch = dependency_3.api.common.Batch.fromObject(data.batch);
            }
            if (data.disable_status != null) {
                message.disable_status = data.disable_status;
            }
            return message;
        }
        toObject() {
            const data: {
                group_pid?: number;
                group_cid?: number;
                batch?: ReturnType<typeof dependency_3.api.common.Batch.prototype.toObject>;
                disable_status?: dependency_3.api.common.DisableStatus;
            } = {};
            if (this.group_pid != null) {
                data.group_pid = this.group_pid;
            }
            if (this.group_cid != null) {
                data.group_cid = this.group_cid;
            }
            if (this.batch != null) {
                data.batch = this.batch.toObject();
            }
            if (this.disable_status != null) {
                data.disable_status = this.disable_status;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_group_pid)
                writer.writeInt64(1, this.group_pid);
            if (this.has_group_cid)
                writer.writeInt64(2, this.group_cid);
            if (this.has_batch)
                writer.writeMessage(3, this.batch, () => this.batch.serialize(writer));
            if (this.has_disable_status)
                writer.writeEnum(4, this.disable_status);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WorkerGroupQueryRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WorkerGroupQueryRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.group_pid = reader.readInt64();
                        break;
                    case 2:
                        message.group_cid = reader.readInt64();
                        break;
                    case 3:
                        reader.readMessage(message.batch, () => message.batch = dependency_3.api.common.Batch.deserialize(reader));
                        break;
                    case 4:
                        message.disable_status = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WorkerGroupQueryRequest {
            return WorkerGroupQueryRequest.deserialize(bytes);
        }
    }
    export class WorkerGroupQueryResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            items?: GroupQueryModel[];
            batch?: dependency_3.api.common.Batch;
            total?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("items" in data && data.items != undefined) {
                    this.items = data.items;
                }
                if ("batch" in data && data.batch != undefined) {
                    this.batch = data.batch;
                }
                if ("total" in data && data.total != undefined) {
                    this.total = data.total;
                }
            }
        }
        get items() {
            return pb_1.Message.getRepeatedWrapperField(this, GroupQueryModel, 1) as GroupQueryModel[];
        }
        set items(value: GroupQueryModel[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get batch() {
            return pb_1.Message.getWrapperField(this, dependency_3.api.common.Batch, 2) as dependency_3.api.common.Batch;
        }
        set batch(value: dependency_3.api.common.Batch) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_batch() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get total() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set total(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            items?: ReturnType<typeof GroupQueryModel.prototype.toObject>[];
            batch?: ReturnType<typeof dependency_3.api.common.Batch.prototype.toObject>;
            total?: number;
        }): WorkerGroupQueryResp {
            const message = new WorkerGroupQueryResp({});
            if (data.items != null) {
                message.items = data.items.map(item => GroupQueryModel.fromObject(item));
            }
            if (data.batch != null) {
                message.batch = dependency_3.api.common.Batch.fromObject(data.batch);
            }
            if (data.total != null) {
                message.total = data.total;
            }
            return message;
        }
        toObject() {
            const data: {
                items?: ReturnType<typeof GroupQueryModel.prototype.toObject>[];
                batch?: ReturnType<typeof dependency_3.api.common.Batch.prototype.toObject>;
                total?: number;
            } = {};
            if (this.items != null) {
                data.items = this.items.map((item: GroupQueryModel) => item.toObject());
            }
            if (this.batch != null) {
                data.batch = this.batch.toObject();
            }
            if (this.total != null) {
                data.total = this.total;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.items.length)
                writer.writeRepeatedMessage(1, this.items, (item: GroupQueryModel) => item.serialize(writer));
            if (this.has_batch)
                writer.writeMessage(2, this.batch, () => this.batch.serialize(writer));
            if (this.total != 0)
                writer.writeInt32(3, this.total);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WorkerGroupQueryResp {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WorkerGroupQueryResp();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.items, () => pb_1.Message.addToRepeatedWrapperField(message, 1, GroupQueryModel.deserialize(reader), GroupQueryModel));
                        break;
                    case 2:
                        reader.readMessage(message.batch, () => message.batch = dependency_3.api.common.Batch.deserialize(reader));
                        break;
                    case 3:
                        message.total = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WorkerGroupQueryResp {
            return WorkerGroupQueryResp.deserialize(bytes);
        }
    }
    export class QueryWorksByGroupReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            group_pid?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("group_pid" in data && data.group_pid != undefined) {
                    this.group_pid = data.group_pid;
                }
            }
        }
        get group_pid() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set group_pid(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            group_pid?: number;
        }): QueryWorksByGroupReq {
            const message = new QueryWorksByGroupReq({});
            if (data.group_pid != null) {
                message.group_pid = data.group_pid;
            }
            return message;
        }
        toObject() {
            const data: {
                group_pid?: number;
            } = {};
            if (this.group_pid != null) {
                data.group_pid = this.group_pid;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.group_pid != 0)
                writer.writeInt64(1, this.group_pid);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryWorksByGroupReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryWorksByGroupReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.group_pid = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryWorksByGroupReq {
            return QueryWorksByGroupReq.deserialize(bytes);
        }
    }
    export class QueryWorksByGroupResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            items?: dependency_2.api.common.Worker[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("items" in data && data.items != undefined) {
                    this.items = data.items;
                }
            }
        }
        get items() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.api.common.Worker, 1) as dependency_2.api.common.Worker[];
        }
        set items(value: dependency_2.api.common.Worker[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            items?: ReturnType<typeof dependency_2.api.common.Worker.prototype.toObject>[];
        }): QueryWorksByGroupResp {
            const message = new QueryWorksByGroupResp({});
            if (data.items != null) {
                message.items = data.items.map(item => dependency_2.api.common.Worker.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                items?: ReturnType<typeof dependency_2.api.common.Worker.prototype.toObject>[];
            } = {};
            if (this.items != null) {
                data.items = this.items.map((item: dependency_2.api.common.Worker) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.items.length)
                writer.writeRepeatedMessage(1, this.items, (item: dependency_2.api.common.Worker) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryWorksByGroupResp {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryWorksByGroupResp();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.items, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_2.api.common.Worker.deserialize(reader), dependency_2.api.common.Worker));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryWorksByGroupResp {
            return QueryWorksByGroupResp.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedWorkerGroupService {
        static definition = {
            Query: {
                path: "/api.core.WorkerGroup/Query",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: WorkerGroupQueryRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => WorkerGroupQueryRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: WorkerGroupQueryResp) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => WorkerGroupQueryResp.deserialize(new Uint8Array(bytes))
            },
            Create: {
                path: "/api.core.WorkerGroup/Create",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: WorkerGroupCreateRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => WorkerGroupCreateRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: WorkerGroupCreateResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => WorkerGroupCreateResponse.deserialize(new Uint8Array(bytes))
            },
            Update: {
                path: "/api.core.WorkerGroup/Update",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: WorkerGroupUpdateRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => WorkerGroupUpdateRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: WorkerGroupUpdateResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => WorkerGroupUpdateResponse.deserialize(new Uint8Array(bytes))
            },
            Delete: {
                path: "/api.core.WorkerGroup/Delete",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: WorkerGroupDeleteRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => WorkerGroupDeleteRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_4.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_4.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            QueryByPerm: {
                path: "/api.core.WorkerGroup/QueryByPerm",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: WorkerGroupQueryByPermRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => WorkerGroupQueryByPermRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: WorkerGroupQueryResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => WorkerGroupQueryResponse.deserialize(new Uint8Array(bytes))
            },
            QueryWorksByGroup: {
                path: "/api.core.WorkerGroup/QueryWorksByGroup",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryWorksByGroupReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryWorksByGroupReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryWorksByGroupResp) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryWorksByGroupResp.deserialize(new Uint8Array(bytes))
            },
            Disable: {
                path: "/api.core.WorkerGroup/Disable",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: WorkerGroupDisableRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => WorkerGroupDisableRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_4.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_4.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract Query(call: grpc_1.ServerUnaryCall<WorkerGroupQueryRequest, WorkerGroupQueryResp>, callback: grpc_1.sendUnaryData<WorkerGroupQueryResp>): void;
        abstract Create(call: grpc_1.ServerUnaryCall<WorkerGroupCreateRequest, WorkerGroupCreateResponse>, callback: grpc_1.sendUnaryData<WorkerGroupCreateResponse>): void;
        abstract Update(call: grpc_1.ServerUnaryCall<WorkerGroupUpdateRequest, WorkerGroupUpdateResponse>, callback: grpc_1.sendUnaryData<WorkerGroupUpdateResponse>): void;
        abstract Delete(call: grpc_1.ServerUnaryCall<WorkerGroupDeleteRequest, dependency_4.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_4.google.protobuf.Empty>): void;
        abstract QueryByPerm(call: grpc_1.ServerUnaryCall<WorkerGroupQueryByPermRequest, WorkerGroupQueryResponse>, callback: grpc_1.sendUnaryData<WorkerGroupQueryResponse>): void;
        abstract QueryWorksByGroup(call: grpc_1.ServerUnaryCall<QueryWorksByGroupReq, QueryWorksByGroupResp>, callback: grpc_1.sendUnaryData<QueryWorksByGroupResp>): void;
        abstract Disable(call: grpc_1.ServerUnaryCall<WorkerGroupDisableRequest, dependency_4.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_4.google.protobuf.Empty>): void;
    }
    export class WorkerGroupClient extends grpc_1.makeGenericClientConstructor(UnimplementedWorkerGroupService.definition, "WorkerGroup", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        Query: GrpcUnaryServiceInterface<WorkerGroupQueryRequest, WorkerGroupQueryResp> = (message: WorkerGroupQueryRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<WorkerGroupQueryResp>, options?: grpc_1.CallOptions | grpc_1.requestCallback<WorkerGroupQueryResp>, callback?: grpc_1.requestCallback<WorkerGroupQueryResp>): grpc_1.ClientUnaryCall => {
            return super.Query(message, metadata, options, callback);
        };
        Create: GrpcUnaryServiceInterface<WorkerGroupCreateRequest, WorkerGroupCreateResponse> = (message: WorkerGroupCreateRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<WorkerGroupCreateResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<WorkerGroupCreateResponse>, callback?: grpc_1.requestCallback<WorkerGroupCreateResponse>): grpc_1.ClientUnaryCall => {
            return super.Create(message, metadata, options, callback);
        };
        Update: GrpcUnaryServiceInterface<WorkerGroupUpdateRequest, WorkerGroupUpdateResponse> = (message: WorkerGroupUpdateRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<WorkerGroupUpdateResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<WorkerGroupUpdateResponse>, callback?: grpc_1.requestCallback<WorkerGroupUpdateResponse>): grpc_1.ClientUnaryCall => {
            return super.Update(message, metadata, options, callback);
        };
        Delete: GrpcUnaryServiceInterface<WorkerGroupDeleteRequest, dependency_4.google.protobuf.Empty> = (message: WorkerGroupDeleteRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_4.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_4.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_4.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.Delete(message, metadata, options, callback);
        };
        QueryByPerm: GrpcUnaryServiceInterface<WorkerGroupQueryByPermRequest, WorkerGroupQueryResponse> = (message: WorkerGroupQueryByPermRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<WorkerGroupQueryResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<WorkerGroupQueryResponse>, callback?: grpc_1.requestCallback<WorkerGroupQueryResponse>): grpc_1.ClientUnaryCall => {
            return super.QueryByPerm(message, metadata, options, callback);
        };
        QueryWorksByGroup: GrpcUnaryServiceInterface<QueryWorksByGroupReq, QueryWorksByGroupResp> = (message: QueryWorksByGroupReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryWorksByGroupResp>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryWorksByGroupResp>, callback?: grpc_1.requestCallback<QueryWorksByGroupResp>): grpc_1.ClientUnaryCall => {
            return super.QueryWorksByGroup(message, metadata, options, callback);
        };
        Disable: GrpcUnaryServiceInterface<WorkerGroupDisableRequest, dependency_4.google.protobuf.Empty> = (message: WorkerGroupDisableRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_4.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_4.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_4.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.Disable(message, metadata, options, callback);
        };
    }
}
