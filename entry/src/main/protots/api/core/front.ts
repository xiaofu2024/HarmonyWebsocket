/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.26.1
 * source: api/core/front.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../option";
import * as dependency_2 from "./../../google/protobuf/empty";
import * as dependency_3 from "./../../validate/validate";
import * as dependency_4 from "./../../google/protobuf/timestamp";
import * as dependency_5 from "./../common/c_entrance";
import * as dependency_6 from "./../common/c_reply";
import * as dependency_7 from "./../common/c_chat";
import * as dependency_8 from "./../common/c_worker";
import * as dependency_9 from "./worker";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace api.core {
    export class AutoReplyRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            consult_id?: number;
            worker_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("consult_id" in data && data.consult_id != undefined) {
                    this.consult_id = data.consult_id;
                }
                if ("worker_id" in data && data.worker_id != undefined) {
                    this.worker_id = data.worker_id;
                }
            }
        }
        get consult_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set consult_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get worker_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set worker_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            consult_id?: number;
            worker_id?: number;
        }): AutoReplyRequest {
            const message = new AutoReplyRequest({});
            if (data.consult_id != null) {
                message.consult_id = data.consult_id;
            }
            if (data.worker_id != null) {
                message.worker_id = data.worker_id;
            }
            return message;
        }
        toObject() {
            const data: {
                consult_id?: number;
                worker_id?: number;
            } = {};
            if (this.consult_id != null) {
                data.consult_id = this.consult_id;
            }
            if (this.worker_id != null) {
                data.worker_id = this.worker_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.consult_id != 0)
                writer.writeUint32(1, this.consult_id);
            if (this.worker_id != 0)
                writer.writeUint32(2, this.worker_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AutoReplyRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AutoReplyRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.consult_id = reader.readUint32();
                        break;
                    case 2:
                        message.worker_id = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AutoReplyRequest {
            return AutoReplyRequest.deserialize(bytes);
        }
    }
    export class AssignWorkerRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            consult_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("consult_id" in data && data.consult_id != undefined) {
                    this.consult_id = data.consult_id;
                }
            }
        }
        get consult_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set consult_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            consult_id?: number;
        }): AssignWorkerRequest {
            const message = new AssignWorkerRequest({});
            if (data.consult_id != null) {
                message.consult_id = data.consult_id;
            }
            return message;
        }
        toObject() {
            const data: {
                consult_id?: number;
            } = {};
            if (this.consult_id != null) {
                data.consult_id = this.consult_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.consult_id != 0)
                writer.writeUint32(1, this.consult_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AssignWorkerRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AssignWorkerRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.consult_id = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AssignWorkerRequest {
            return AssignWorkerRequest.deserialize(bytes);
        }
    }
    export class AssignWorkerResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            nick?: string;
            avatar?: string;
            worker_id?: number;
            nimid?: string;
            tips?: string;
            chat_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("nick" in data && data.nick != undefined) {
                    this.nick = data.nick;
                }
                if ("avatar" in data && data.avatar != undefined) {
                    this.avatar = data.avatar;
                }
                if ("worker_id" in data && data.worker_id != undefined) {
                    this.worker_id = data.worker_id;
                }
                if ("nimid" in data && data.nimid != undefined) {
                    this.nimid = data.nimid;
                }
                if ("tips" in data && data.tips != undefined) {
                    this.tips = data.tips;
                }
                if ("chat_id" in data && data.chat_id != undefined) {
                    this.chat_id = data.chat_id;
                }
            }
        }
        get nick() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set nick(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get avatar() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set avatar(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get worker_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set worker_id(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get nimid() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set nimid(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get tips() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set tips(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get chat_id() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set chat_id(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            nick?: string;
            avatar?: string;
            worker_id?: number;
            nimid?: string;
            tips?: string;
            chat_id?: number;
        }): AssignWorkerResponse {
            const message = new AssignWorkerResponse({});
            if (data.nick != null) {
                message.nick = data.nick;
            }
            if (data.avatar != null) {
                message.avatar = data.avatar;
            }
            if (data.worker_id != null) {
                message.worker_id = data.worker_id;
            }
            if (data.nimid != null) {
                message.nimid = data.nimid;
            }
            if (data.tips != null) {
                message.tips = data.tips;
            }
            if (data.chat_id != null) {
                message.chat_id = data.chat_id;
            }
            return message;
        }
        toObject() {
            const data: {
                nick?: string;
                avatar?: string;
                worker_id?: number;
                nimid?: string;
                tips?: string;
                chat_id?: number;
            } = {};
            if (this.nick != null) {
                data.nick = this.nick;
            }
            if (this.avatar != null) {
                data.avatar = this.avatar;
            }
            if (this.worker_id != null) {
                data.worker_id = this.worker_id;
            }
            if (this.nimid != null) {
                data.nimid = this.nimid;
            }
            if (this.tips != null) {
                data.tips = this.tips;
            }
            if (this.chat_id != null) {
                data.chat_id = this.chat_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.nick.length)
                writer.writeString(1, this.nick);
            if (this.avatar.length)
                writer.writeString(2, this.avatar);
            if (this.worker_id != 0)
                writer.writeInt32(3, this.worker_id);
            if (this.nimid.length)
                writer.writeString(4, this.nimid);
            if (this.tips.length)
                writer.writeString(5, this.tips);
            if (this.chat_id != 0)
                writer.writeInt64(6, this.chat_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AssignWorkerResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AssignWorkerResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.nick = reader.readString();
                        break;
                    case 2:
                        message.avatar = reader.readString();
                        break;
                    case 3:
                        message.worker_id = reader.readInt32();
                        break;
                    case 4:
                        message.nimid = reader.readString();
                        break;
                    case 5:
                        message.tips = reader.readString();
                        break;
                    case 6:
                        message.chat_id = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AssignWorkerResponse {
            return AssignWorkerResponse.deserialize(bytes);
        }
    }
    export class AssignWorkerItem extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            nick?: string;
            avatar?: string;
            worker_id?: number;
            nim_id?: string;
            connect_state?: dependency_8.api.common.ConnectState;
            online_state?: dependency_8.api.common.OnlineState;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("nick" in data && data.nick != undefined) {
                    this.nick = data.nick;
                }
                if ("avatar" in data && data.avatar != undefined) {
                    this.avatar = data.avatar;
                }
                if ("worker_id" in data && data.worker_id != undefined) {
                    this.worker_id = data.worker_id;
                }
                if ("nim_id" in data && data.nim_id != undefined) {
                    this.nim_id = data.nim_id;
                }
                if ("connect_state" in data && data.connect_state != undefined) {
                    this.connect_state = data.connect_state;
                }
                if ("online_state" in data && data.online_state != undefined) {
                    this.online_state = data.online_state;
                }
            }
        }
        get nick() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set nick(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get avatar() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set avatar(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get worker_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set worker_id(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get nim_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set nim_id(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get connect_state() {
            return pb_1.Message.getFieldWithDefault(this, 5, dependency_8.api.common.ConnectState.CONNECT_STATE_OFFLINE) as dependency_8.api.common.ConnectState;
        }
        set connect_state(value: dependency_8.api.common.ConnectState) {
            pb_1.Message.setField(this, 5, value);
        }
        get online_state() {
            return pb_1.Message.getFieldWithDefault(this, 6, dependency_8.api.common.OnlineState.ONLINE_STATE_IDLE) as dependency_8.api.common.OnlineState;
        }
        set online_state(value: dependency_8.api.common.OnlineState) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            nick?: string;
            avatar?: string;
            worker_id?: number;
            nim_id?: string;
            connect_state?: dependency_8.api.common.ConnectState;
            online_state?: dependency_8.api.common.OnlineState;
        }): AssignWorkerItem {
            const message = new AssignWorkerItem({});
            if (data.nick != null) {
                message.nick = data.nick;
            }
            if (data.avatar != null) {
                message.avatar = data.avatar;
            }
            if (data.worker_id != null) {
                message.worker_id = data.worker_id;
            }
            if (data.nim_id != null) {
                message.nim_id = data.nim_id;
            }
            if (data.connect_state != null) {
                message.connect_state = data.connect_state;
            }
            if (data.online_state != null) {
                message.online_state = data.online_state;
            }
            return message;
        }
        toObject() {
            const data: {
                nick?: string;
                avatar?: string;
                worker_id?: number;
                nim_id?: string;
                connect_state?: dependency_8.api.common.ConnectState;
                online_state?: dependency_8.api.common.OnlineState;
            } = {};
            if (this.nick != null) {
                data.nick = this.nick;
            }
            if (this.avatar != null) {
                data.avatar = this.avatar;
            }
            if (this.worker_id != null) {
                data.worker_id = this.worker_id;
            }
            if (this.nim_id != null) {
                data.nim_id = this.nim_id;
            }
            if (this.connect_state != null) {
                data.connect_state = this.connect_state;
            }
            if (this.online_state != null) {
                data.online_state = this.online_state;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.nick.length)
                writer.writeString(1, this.nick);
            if (this.avatar.length)
                writer.writeString(2, this.avatar);
            if (this.worker_id != 0)
                writer.writeInt32(3, this.worker_id);
            if (this.nim_id.length)
                writer.writeString(4, this.nim_id);
            if (this.connect_state != dependency_8.api.common.ConnectState.CONNECT_STATE_OFFLINE)
                writer.writeEnum(5, this.connect_state);
            if (this.online_state != dependency_8.api.common.OnlineState.ONLINE_STATE_IDLE)
                writer.writeEnum(6, this.online_state);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AssignWorkerItem {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AssignWorkerItem();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.nick = reader.readString();
                        break;
                    case 2:
                        message.avatar = reader.readString();
                        break;
                    case 3:
                        message.worker_id = reader.readInt32();
                        break;
                    case 4:
                        message.nim_id = reader.readString();
                        break;
                    case 5:
                        message.connect_state = reader.readEnum();
                        break;
                    case 6:
                        message.online_state = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AssignWorkerItem {
            return AssignWorkerItem.deserialize(bytes);
        }
    }
    export class QueryEntranceResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            nick?: string;
            avatar?: string;
            guide?: string;
            default_consult_id?: number;
            change_default_time?: string;
            consults?: ConsultItem[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [7], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("nick" in data && data.nick != undefined) {
                    this.nick = data.nick;
                }
                if ("avatar" in data && data.avatar != undefined) {
                    this.avatar = data.avatar;
                }
                if ("guide" in data && data.guide != undefined) {
                    this.guide = data.guide;
                }
                if ("default_consult_id" in data && data.default_consult_id != undefined) {
                    this.default_consult_id = data.default_consult_id;
                }
                if ("change_default_time" in data && data.change_default_time != undefined) {
                    this.change_default_time = data.change_default_time;
                }
                if ("consults" in data && data.consults != undefined) {
                    this.consults = data.consults;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get nick() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set nick(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get avatar() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set avatar(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get guide() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set guide(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get default_consult_id() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set default_consult_id(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get change_default_time() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set change_default_time(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get consults() {
            return pb_1.Message.getRepeatedWrapperField(this, ConsultItem, 7) as ConsultItem[];
        }
        set consults(value: ConsultItem[]) {
            pb_1.Message.setRepeatedWrapperField(this, 7, value);
        }
        static fromObject(data: {
            name?: string;
            nick?: string;
            avatar?: string;
            guide?: string;
            default_consult_id?: number;
            change_default_time?: string;
            consults?: ReturnType<typeof ConsultItem.prototype.toObject>[];
        }): QueryEntranceResponse {
            const message = new QueryEntranceResponse({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.nick != null) {
                message.nick = data.nick;
            }
            if (data.avatar != null) {
                message.avatar = data.avatar;
            }
            if (data.guide != null) {
                message.guide = data.guide;
            }
            if (data.default_consult_id != null) {
                message.default_consult_id = data.default_consult_id;
            }
            if (data.change_default_time != null) {
                message.change_default_time = data.change_default_time;
            }
            if (data.consults != null) {
                message.consults = data.consults.map(item => ConsultItem.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                nick?: string;
                avatar?: string;
                guide?: string;
                default_consult_id?: number;
                change_default_time?: string;
                consults?: ReturnType<typeof ConsultItem.prototype.toObject>[];
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.nick != null) {
                data.nick = this.nick;
            }
            if (this.avatar != null) {
                data.avatar = this.avatar;
            }
            if (this.guide != null) {
                data.guide = this.guide;
            }
            if (this.default_consult_id != null) {
                data.default_consult_id = this.default_consult_id;
            }
            if (this.change_default_time != null) {
                data.change_default_time = this.change_default_time;
            }
            if (this.consults != null) {
                data.consults = this.consults.map((item: ConsultItem) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.nick.length)
                writer.writeString(2, this.nick);
            if (this.avatar.length)
                writer.writeString(3, this.avatar);
            if (this.guide.length)
                writer.writeString(4, this.guide);
            if (this.default_consult_id != 0)
                writer.writeInt32(5, this.default_consult_id);
            if (this.change_default_time.length)
                writer.writeString(6, this.change_default_time);
            if (this.consults.length)
                writer.writeRepeatedMessage(7, this.consults, (item: ConsultItem) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryEntranceResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryEntranceResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.nick = reader.readString();
                        break;
                    case 3:
                        message.avatar = reader.readString();
                        break;
                    case 4:
                        message.guide = reader.readString();
                        break;
                    case 5:
                        message.default_consult_id = reader.readInt32();
                        break;
                    case 6:
                        message.change_default_time = reader.readString();
                        break;
                    case 7:
                        reader.readMessage(message.consults, () => pb_1.Message.addToRepeatedWrapperField(message, 7, ConsultItem.deserialize(reader), ConsultItem));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryEntranceResponse {
            return QueryEntranceResponse.deserialize(bytes);
        }
    }
    export class QueryAutoReplyRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            worker_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("worker_id" in data && data.worker_id != undefined) {
                    this.worker_id = data.worker_id;
                }
            }
        }
        get worker_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set worker_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            worker_id?: number;
        }): QueryAutoReplyRequest {
            const message = new QueryAutoReplyRequest({});
            if (data.worker_id != null) {
                message.worker_id = data.worker_id;
            }
            return message;
        }
        toObject() {
            const data: {
                worker_id?: number;
            } = {};
            if (this.worker_id != null) {
                data.worker_id = this.worker_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.worker_id != 0)
                writer.writeInt32(1, this.worker_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryAutoReplyRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryAutoReplyRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.worker_id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryAutoReplyRequest {
            return QueryAutoReplyRequest.deserialize(bytes);
        }
    }
    export class QueryAutoReplyResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            autoReplyItem?: dependency_6.api.common.AutoReplyItem;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("autoReplyItem" in data && data.autoReplyItem != undefined) {
                    this.autoReplyItem = data.autoReplyItem;
                }
            }
        }
        get autoReplyItem() {
            return pb_1.Message.getWrapperField(this, dependency_6.api.common.AutoReplyItem, 1) as dependency_6.api.common.AutoReplyItem;
        }
        set autoReplyItem(value: dependency_6.api.common.AutoReplyItem) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_autoReplyItem() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            autoReplyItem?: ReturnType<typeof dependency_6.api.common.AutoReplyItem.prototype.toObject>;
        }): QueryAutoReplyResponse {
            const message = new QueryAutoReplyResponse({});
            if (data.autoReplyItem != null) {
                message.autoReplyItem = dependency_6.api.common.AutoReplyItem.fromObject(data.autoReplyItem);
            }
            return message;
        }
        toObject() {
            const data: {
                autoReplyItem?: ReturnType<typeof dependency_6.api.common.AutoReplyItem.prototype.toObject>;
            } = {};
            if (this.autoReplyItem != null) {
                data.autoReplyItem = this.autoReplyItem.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_autoReplyItem)
                writer.writeMessage(1, this.autoReplyItem, () => this.autoReplyItem.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryAutoReplyResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryAutoReplyResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.autoReplyItem, () => message.autoReplyItem = dependency_6.api.common.AutoReplyItem.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryAutoReplyResponse {
            return QueryAutoReplyResponse.deserialize(bytes);
        }
    }
    export class BindWorkerRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[4], [5], [6]];
        constructor(data?: any[] | ({
            worker_id?: number;
        } & (({
            userid?: number;
        }) | ({
            timestamp?: number;
        }) | ({
            sign?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("worker_id" in data && data.worker_id != undefined) {
                    this.worker_id = data.worker_id;
                }
                if ("userid" in data && data.userid != undefined) {
                    this.userid = data.userid;
                }
                if ("timestamp" in data && data.timestamp != undefined) {
                    this.timestamp = data.timestamp;
                }
                if ("sign" in data && data.sign != undefined) {
                    this.sign = data.sign;
                }
            }
        }
        get worker_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set worker_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get userid() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set userid(value: number) {
            pb_1.Message.setOneofField(this, 4, this.#one_of_decls[0], value);
        }
        get has_userid() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get timestamp() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set timestamp(value: number) {
            pb_1.Message.setOneofField(this, 5, this.#one_of_decls[1], value);
        }
        get has_timestamp() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get sign() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set sign(value: string) {
            pb_1.Message.setOneofField(this, 6, this.#one_of_decls[2], value);
        }
        get has_sign() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get _userid() {
            const cases: {
                [index: number]: "none" | "userid";
            } = {
                0: "none",
                4: "userid"
            };
            return cases[pb_1.Message.computeOneofCase(this, [4])];
        }
        get _timestamp() {
            const cases: {
                [index: number]: "none" | "timestamp";
            } = {
                0: "none",
                5: "timestamp"
            };
            return cases[pb_1.Message.computeOneofCase(this, [5])];
        }
        get _sign() {
            const cases: {
                [index: number]: "none" | "sign";
            } = {
                0: "none",
                6: "sign"
            };
            return cases[pb_1.Message.computeOneofCase(this, [6])];
        }
        static fromObject(data: {
            worker_id?: number;
            userid?: number;
            timestamp?: number;
            sign?: string;
        }): BindWorkerRequest {
            const message = new BindWorkerRequest({});
            if (data.worker_id != null) {
                message.worker_id = data.worker_id;
            }
            if (data.userid != null) {
                message.userid = data.userid;
            }
            if (data.timestamp != null) {
                message.timestamp = data.timestamp;
            }
            if (data.sign != null) {
                message.sign = data.sign;
            }
            return message;
        }
        toObject() {
            const data: {
                worker_id?: number;
                userid?: number;
                timestamp?: number;
                sign?: string;
            } = {};
            if (this.worker_id != null) {
                data.worker_id = this.worker_id;
            }
            if (this.userid != null) {
                data.userid = this.userid;
            }
            if (this.timestamp != null) {
                data.timestamp = this.timestamp;
            }
            if (this.sign != null) {
                data.sign = this.sign;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.worker_id != 0)
                writer.writeInt32(1, this.worker_id);
            if (this.has_userid)
                writer.writeInt32(4, this.userid);
            if (this.has_timestamp)
                writer.writeInt32(5, this.timestamp);
            if (this.has_sign)
                writer.writeString(6, this.sign);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BindWorkerRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BindWorkerRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.worker_id = reader.readInt32();
                        break;
                    case 4:
                        message.userid = reader.readInt32();
                        break;
                    case 5:
                        message.timestamp = reader.readInt32();
                        break;
                    case 6:
                        message.sign = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BindWorkerRequest {
            return BindWorkerRequest.deserialize(bytes);
        }
    }
    export class BindWorkerResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            nick?: string;
            avatar?: string;
            worker_id?: number;
            worker_token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("nick" in data && data.nick != undefined) {
                    this.nick = data.nick;
                }
                if ("avatar" in data && data.avatar != undefined) {
                    this.avatar = data.avatar;
                }
                if ("worker_id" in data && data.worker_id != undefined) {
                    this.worker_id = data.worker_id;
                }
                if ("worker_token" in data && data.worker_token != undefined) {
                    this.worker_token = data.worker_token;
                }
            }
        }
        get nick() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set nick(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get avatar() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set avatar(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get worker_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set worker_id(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get worker_token() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set worker_token(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            nick?: string;
            avatar?: string;
            worker_id?: number;
            worker_token?: string;
        }): BindWorkerResponse {
            const message = new BindWorkerResponse({});
            if (data.nick != null) {
                message.nick = data.nick;
            }
            if (data.avatar != null) {
                message.avatar = data.avatar;
            }
            if (data.worker_id != null) {
                message.worker_id = data.worker_id;
            }
            if (data.worker_token != null) {
                message.worker_token = data.worker_token;
            }
            return message;
        }
        toObject() {
            const data: {
                nick?: string;
                avatar?: string;
                worker_id?: number;
                worker_token?: string;
            } = {};
            if (this.nick != null) {
                data.nick = this.nick;
            }
            if (this.avatar != null) {
                data.avatar = this.avatar;
            }
            if (this.worker_id != null) {
                data.worker_id = this.worker_id;
            }
            if (this.worker_token != null) {
                data.worker_token = this.worker_token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.nick.length)
                writer.writeString(1, this.nick);
            if (this.avatar.length)
                writer.writeString(2, this.avatar);
            if (this.worker_id != 0)
                writer.writeInt32(3, this.worker_id);
            if (this.worker_token.length)
                writer.writeString(4, this.worker_token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BindWorkerResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BindWorkerResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.nick = reader.readString();
                        break;
                    case 2:
                        message.avatar = reader.readString();
                        break;
                    case 3:
                        message.worker_id = reader.readInt32();
                        break;
                    case 4:
                        message.worker_token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BindWorkerResponse {
            return BindWorkerResponse.deserialize(bytes);
        }
    }
    export class ConsultItem extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            consult_id?: number;
            name?: string;
            guide?: string;
            Works?: AssignWorkerItem[];
            unread?: number;
            priority?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("consult_id" in data && data.consult_id != undefined) {
                    this.consult_id = data.consult_id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("guide" in data && data.guide != undefined) {
                    this.guide = data.guide;
                }
                if ("Works" in data && data.Works != undefined) {
                    this.Works = data.Works;
                }
                if ("unread" in data && data.unread != undefined) {
                    this.unread = data.unread;
                }
                if ("priority" in data && data.priority != undefined) {
                    this.priority = data.priority;
                }
            }
        }
        get consult_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set consult_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get guide() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set guide(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get Works() {
            return pb_1.Message.getRepeatedWrapperField(this, AssignWorkerItem, 4) as AssignWorkerItem[];
        }
        set Works(value: AssignWorkerItem[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get unread() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set unread(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get priority() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set priority(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            consult_id?: number;
            name?: string;
            guide?: string;
            Works?: ReturnType<typeof AssignWorkerItem.prototype.toObject>[];
            unread?: number;
            priority?: number;
        }): ConsultItem {
            const message = new ConsultItem({});
            if (data.consult_id != null) {
                message.consult_id = data.consult_id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.guide != null) {
                message.guide = data.guide;
            }
            if (data.Works != null) {
                message.Works = data.Works.map(item => AssignWorkerItem.fromObject(item));
            }
            if (data.unread != null) {
                message.unread = data.unread;
            }
            if (data.priority != null) {
                message.priority = data.priority;
            }
            return message;
        }
        toObject() {
            const data: {
                consult_id?: number;
                name?: string;
                guide?: string;
                Works?: ReturnType<typeof AssignWorkerItem.prototype.toObject>[];
                unread?: number;
                priority?: number;
            } = {};
            if (this.consult_id != null) {
                data.consult_id = this.consult_id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.guide != null) {
                data.guide = this.guide;
            }
            if (this.Works != null) {
                data.Works = this.Works.map((item: AssignWorkerItem) => item.toObject());
            }
            if (this.unread != null) {
                data.unread = this.unread;
            }
            if (this.priority != null) {
                data.priority = this.priority;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.consult_id != 0)
                writer.writeUint32(1, this.consult_id);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.guide.length)
                writer.writeString(3, this.guide);
            if (this.Works.length)
                writer.writeRepeatedMessage(4, this.Works, (item: AssignWorkerItem) => item.serialize(writer));
            if (this.unread != 0)
                writer.writeInt32(5, this.unread);
            if (this.priority != 0)
                writer.writeInt32(6, this.priority);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ConsultItem {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ConsultItem();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.consult_id = reader.readUint32();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.guide = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.Works, () => pb_1.Message.addToRepeatedWrapperField(message, 4, AssignWorkerItem.deserialize(reader), AssignWorkerItem));
                        break;
                    case 5:
                        message.unread = reader.readInt32();
                        break;
                    case 6:
                        message.priority = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ConsultItem {
            return ConsultItem.deserialize(bytes);
        }
    }
    export class CreateAnonUserRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            tenant_id?: number;
            entrance_id?: number;
            ip?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("tenant_id" in data && data.tenant_id != undefined) {
                    this.tenant_id = data.tenant_id;
                }
                if ("entrance_id" in data && data.entrance_id != undefined) {
                    this.entrance_id = data.entrance_id;
                }
                if ("ip" in data && data.ip != undefined) {
                    this.ip = data.ip;
                }
            }
        }
        get tenant_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set tenant_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get entrance_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set entrance_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get ip() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set ip(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            tenant_id?: number;
            entrance_id?: number;
            ip?: string;
        }): CreateAnonUserRequest {
            const message = new CreateAnonUserRequest({});
            if (data.tenant_id != null) {
                message.tenant_id = data.tenant_id;
            }
            if (data.entrance_id != null) {
                message.entrance_id = data.entrance_id;
            }
            if (data.ip != null) {
                message.ip = data.ip;
            }
            return message;
        }
        toObject() {
            const data: {
                tenant_id?: number;
                entrance_id?: number;
                ip?: string;
            } = {};
            if (this.tenant_id != null) {
                data.tenant_id = this.tenant_id;
            }
            if (this.entrance_id != null) {
                data.entrance_id = this.entrance_id;
            }
            if (this.ip != null) {
                data.ip = this.ip;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.tenant_id != 0)
                writer.writeInt32(1, this.tenant_id);
            if (this.entrance_id != 0)
                writer.writeInt32(2, this.entrance_id);
            if (this.ip.length)
                writer.writeString(3, this.ip);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateAnonUserRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateAnonUserRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.tenant_id = reader.readInt32();
                        break;
                    case 2:
                        message.entrance_id = reader.readInt32();
                        break;
                    case 3:
                        message.ip = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateAnonUserRequest {
            return CreateAnonUserRequest.deserialize(bytes);
        }
    }
    export class CreateAnonUserResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            token?: string;
            name?: string;
            avatar?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("avatar" in data && data.avatar != undefined) {
                    this.avatar = data.avatar;
                }
            }
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get avatar() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set avatar(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            token?: string;
            name?: string;
            avatar?: string;
        }): CreateAnonUserResponse {
            const message = new CreateAnonUserResponse({});
            if (data.token != null) {
                message.token = data.token;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.avatar != null) {
                message.avatar = data.avatar;
            }
            return message;
        }
        toObject() {
            const data: {
                token?: string;
                name?: string;
                avatar?: string;
            } = {};
            if (this.token != null) {
                data.token = this.token;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.avatar != null) {
                data.avatar = this.avatar;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.token.length)
                writer.writeString(1, this.token);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.avatar.length)
                writer.writeString(3, this.avatar);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateAnonUserResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateAnonUserResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.token = reader.readString();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.avatar = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateAnonUserResponse {
            return CreateAnonUserResponse.deserialize(bytes);
        }
    }
    export class CustomerDataRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            chat_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("chat_id" in data && data.chat_id != undefined) {
                    this.chat_id = data.chat_id;
                }
            }
        }
        get chat_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set chat_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            chat_id?: number;
        }): CustomerDataRequest {
            const message = new CustomerDataRequest({});
            if (data.chat_id != null) {
                message.chat_id = data.chat_id;
            }
            return message;
        }
        toObject() {
            const data: {
                chat_id?: number;
            } = {};
            if (this.chat_id != null) {
                data.chat_id = this.chat_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.chat_id != 0)
                writer.writeInt64(1, this.chat_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CustomerDataRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CustomerDataRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.chat_id = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CustomerDataRequest {
            return CustomerDataRequest.deserialize(bytes);
        }
    }
    export class CustomerDataResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            user_source?: string;
            ip_address?: string;
            first_contact_time?: dependency_4.google.protobuf.Timestamp;
            last_contact_time?: dependency_4.google.protobuf.Timestamp;
            user_name?: string;
            user_appeal?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("user_source" in data && data.user_source != undefined) {
                    this.user_source = data.user_source;
                }
                if ("ip_address" in data && data.ip_address != undefined) {
                    this.ip_address = data.ip_address;
                }
                if ("first_contact_time" in data && data.first_contact_time != undefined) {
                    this.first_contact_time = data.first_contact_time;
                }
                if ("last_contact_time" in data && data.last_contact_time != undefined) {
                    this.last_contact_time = data.last_contact_time;
                }
                if ("user_name" in data && data.user_name != undefined) {
                    this.user_name = data.user_name;
                }
                if ("user_appeal" in data && data.user_appeal != undefined) {
                    this.user_appeal = data.user_appeal;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get user_source() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set user_source(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get ip_address() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set ip_address(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get first_contact_time() {
            return pb_1.Message.getWrapperField(this, dependency_4.google.protobuf.Timestamp, 4) as dependency_4.google.protobuf.Timestamp;
        }
        set first_contact_time(value: dependency_4.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_first_contact_time() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get last_contact_time() {
            return pb_1.Message.getWrapperField(this, dependency_4.google.protobuf.Timestamp, 5) as dependency_4.google.protobuf.Timestamp;
        }
        set last_contact_time(value: dependency_4.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_last_contact_time() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get user_name() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set user_name(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get user_appeal() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set user_appeal(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            name?: string;
            user_source?: string;
            ip_address?: string;
            first_contact_time?: ReturnType<typeof dependency_4.google.protobuf.Timestamp.prototype.toObject>;
            last_contact_time?: ReturnType<typeof dependency_4.google.protobuf.Timestamp.prototype.toObject>;
            user_name?: string;
            user_appeal?: string;
        }): CustomerDataResponse {
            const message = new CustomerDataResponse({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.user_source != null) {
                message.user_source = data.user_source;
            }
            if (data.ip_address != null) {
                message.ip_address = data.ip_address;
            }
            if (data.first_contact_time != null) {
                message.first_contact_time = dependency_4.google.protobuf.Timestamp.fromObject(data.first_contact_time);
            }
            if (data.last_contact_time != null) {
                message.last_contact_time = dependency_4.google.protobuf.Timestamp.fromObject(data.last_contact_time);
            }
            if (data.user_name != null) {
                message.user_name = data.user_name;
            }
            if (data.user_appeal != null) {
                message.user_appeal = data.user_appeal;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                user_source?: string;
                ip_address?: string;
                first_contact_time?: ReturnType<typeof dependency_4.google.protobuf.Timestamp.prototype.toObject>;
                last_contact_time?: ReturnType<typeof dependency_4.google.protobuf.Timestamp.prototype.toObject>;
                user_name?: string;
                user_appeal?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.user_source != null) {
                data.user_source = this.user_source;
            }
            if (this.ip_address != null) {
                data.ip_address = this.ip_address;
            }
            if (this.first_contact_time != null) {
                data.first_contact_time = this.first_contact_time.toObject();
            }
            if (this.last_contact_time != null) {
                data.last_contact_time = this.last_contact_time.toObject();
            }
            if (this.user_name != null) {
                data.user_name = this.user_name;
            }
            if (this.user_appeal != null) {
                data.user_appeal = this.user_appeal;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.user_source.length)
                writer.writeString(2, this.user_source);
            if (this.ip_address.length)
                writer.writeString(3, this.ip_address);
            if (this.has_first_contact_time)
                writer.writeMessage(4, this.first_contact_time, () => this.first_contact_time.serialize(writer));
            if (this.has_last_contact_time)
                writer.writeMessage(5, this.last_contact_time, () => this.last_contact_time.serialize(writer));
            if (this.user_name.length)
                writer.writeString(6, this.user_name);
            if (this.user_appeal.length)
                writer.writeString(7, this.user_appeal);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CustomerDataResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CustomerDataResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.user_source = reader.readString();
                        break;
                    case 3:
                        message.ip_address = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.first_contact_time, () => message.first_contact_time = dependency_4.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.last_contact_time, () => message.last_contact_time = dependency_4.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 6:
                        message.user_name = reader.readString();
                        break;
                    case 7:
                        message.user_appeal = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CustomerDataResponse {
            return CustomerDataResponse.deserialize(bytes);
        }
    }
    export class QueryWorkerRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[1], [2]];
        constructor(data?: any[] | ({} & (({
            worker_id?: number;
        }) | ({
            nim_id?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("worker_id" in data && data.worker_id != undefined) {
                    this.worker_id = data.worker_id;
                }
                if ("nim_id" in data && data.nim_id != undefined) {
                    this.nim_id = data.nim_id;
                }
            }
        }
        get worker_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set worker_id(value: number) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_worker_id() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get nim_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set nim_id(value: string) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[1], value);
        }
        get has_nim_id() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get _worker_id() {
            const cases: {
                [index: number]: "none" | "worker_id";
            } = {
                0: "none",
                1: "worker_id"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1])];
        }
        get _nim_id() {
            const cases: {
                [index: number]: "none" | "nim_id";
            } = {
                0: "none",
                2: "nim_id"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        static fromObject(data: {
            worker_id?: number;
            nim_id?: string;
        }): QueryWorkerRequest {
            const message = new QueryWorkerRequest({});
            if (data.worker_id != null) {
                message.worker_id = data.worker_id;
            }
            if (data.nim_id != null) {
                message.nim_id = data.nim_id;
            }
            return message;
        }
        toObject() {
            const data: {
                worker_id?: number;
                nim_id?: string;
            } = {};
            if (this.worker_id != null) {
                data.worker_id = this.worker_id;
            }
            if (this.nim_id != null) {
                data.nim_id = this.nim_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_worker_id)
                writer.writeInt32(1, this.worker_id);
            if (this.has_nim_id)
                writer.writeString(2, this.nim_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryWorkerRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryWorkerRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.worker_id = reader.readInt32();
                        break;
                    case 2:
                        message.nim_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryWorkerRequest {
            return QueryWorkerRequest.deserialize(bytes);
        }
    }
    export class QueryWorkerResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            worker_id?: number;
            worker_name?: string;
            worker_avatar?: string;
            tips?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("worker_id" in data && data.worker_id != undefined) {
                    this.worker_id = data.worker_id;
                }
                if ("worker_name" in data && data.worker_name != undefined) {
                    this.worker_name = data.worker_name;
                }
                if ("worker_avatar" in data && data.worker_avatar != undefined) {
                    this.worker_avatar = data.worker_avatar;
                }
                if ("tips" in data && data.tips != undefined) {
                    this.tips = data.tips;
                }
            }
        }
        get worker_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set worker_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get worker_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set worker_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get worker_avatar() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set worker_avatar(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get tips() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set tips(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            worker_id?: number;
            worker_name?: string;
            worker_avatar?: string;
            tips?: string;
        }): QueryWorkerResponse {
            const message = new QueryWorkerResponse({});
            if (data.worker_id != null) {
                message.worker_id = data.worker_id;
            }
            if (data.worker_name != null) {
                message.worker_name = data.worker_name;
            }
            if (data.worker_avatar != null) {
                message.worker_avatar = data.worker_avatar;
            }
            if (data.tips != null) {
                message.tips = data.tips;
            }
            return message;
        }
        toObject() {
            const data: {
                worker_id?: number;
                worker_name?: string;
                worker_avatar?: string;
                tips?: string;
            } = {};
            if (this.worker_id != null) {
                data.worker_id = this.worker_id;
            }
            if (this.worker_name != null) {
                data.worker_name = this.worker_name;
            }
            if (this.worker_avatar != null) {
                data.worker_avatar = this.worker_avatar;
            }
            if (this.tips != null) {
                data.tips = this.tips;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.worker_id != 0)
                writer.writeInt32(1, this.worker_id);
            if (this.worker_name.length)
                writer.writeString(2, this.worker_name);
            if (this.worker_avatar.length)
                writer.writeString(3, this.worker_avatar);
            if (this.tips.length)
                writer.writeString(4, this.tips);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryWorkerResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryWorkerResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.worker_id = reader.readInt32();
                        break;
                    case 2:
                        message.worker_name = reader.readString();
                        break;
                    case 3:
                        message.worker_avatar = reader.readString();
                        break;
                    case 4:
                        message.tips = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryWorkerResponse {
            return QueryWorkerResponse.deserialize(bytes);
        }
    }
    export class QueryChatRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            chat_id?: number[];
            consult_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("chat_id" in data && data.chat_id != undefined) {
                    this.chat_id = data.chat_id;
                }
                if ("consult_id" in data && data.consult_id != undefined) {
                    this.consult_id = data.consult_id;
                }
            }
        }
        get chat_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as number[];
        }
        set chat_id(value: number[]) {
            pb_1.Message.setField(this, 1, value);
        }
        get consult_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set consult_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            chat_id?: number[];
            consult_id?: number;
        }): QueryChatRequest {
            const message = new QueryChatRequest({});
            if (data.chat_id != null) {
                message.chat_id = data.chat_id;
            }
            if (data.consult_id != null) {
                message.consult_id = data.consult_id;
            }
            return message;
        }
        toObject() {
            const data: {
                chat_id?: number[];
                consult_id?: number;
            } = {};
            if (this.chat_id != null) {
                data.chat_id = this.chat_id;
            }
            if (this.consult_id != null) {
                data.consult_id = this.consult_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.chat_id.length)
                writer.writePackedInt64(1, this.chat_id);
            if (this.consult_id != 0)
                writer.writeUint32(2, this.consult_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryChatRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryChatRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.chat_id = reader.readPackedInt64();
                        break;
                    case 2:
                        message.consult_id = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryChatRequest {
            return QueryChatRequest.deserialize(bytes);
        }
    }
    export class QueryChatResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            chats?: dependency_7.api.common.ChatItem[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("chats" in data && data.chats != undefined) {
                    this.chats = data.chats;
                }
            }
        }
        get chats() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_7.api.common.ChatItem, 1) as dependency_7.api.common.ChatItem[];
        }
        set chats(value: dependency_7.api.common.ChatItem[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            chats?: ReturnType<typeof dependency_7.api.common.ChatItem.prototype.toObject>[];
        }): QueryChatResponse {
            const message = new QueryChatResponse({});
            if (data.chats != null) {
                message.chats = data.chats.map(item => dependency_7.api.common.ChatItem.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                chats?: ReturnType<typeof dependency_7.api.common.ChatItem.prototype.toObject>[];
            } = {};
            if (this.chats != null) {
                data.chats = this.chats.map((item: dependency_7.api.common.ChatItem) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.chats.length)
                writer.writeRepeatedMessage(1, this.chats, (item: dependency_7.api.common.ChatItem) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryChatResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryChatResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.chats, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_7.api.common.ChatItem.deserialize(reader), dependency_7.api.common.ChatItem));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryChatResponse {
            return QueryChatResponse.deserialize(bytes);
        }
    }
    export class UpdateUserAppealRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            chat_id?: number;
            user_name?: string;
            user_appeal?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("chat_id" in data && data.chat_id != undefined) {
                    this.chat_id = data.chat_id;
                }
                if ("user_name" in data && data.user_name != undefined) {
                    this.user_name = data.user_name;
                }
                if ("user_appeal" in data && data.user_appeal != undefined) {
                    this.user_appeal = data.user_appeal;
                }
            }
        }
        get chat_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set chat_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get user_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set user_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get user_appeal() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set user_appeal(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            chat_id?: number;
            user_name?: string;
            user_appeal?: string;
        }): UpdateUserAppealRequest {
            const message = new UpdateUserAppealRequest({});
            if (data.chat_id != null) {
                message.chat_id = data.chat_id;
            }
            if (data.user_name != null) {
                message.user_name = data.user_name;
            }
            if (data.user_appeal != null) {
                message.user_appeal = data.user_appeal;
            }
            return message;
        }
        toObject() {
            const data: {
                chat_id?: number;
                user_name?: string;
                user_appeal?: string;
            } = {};
            if (this.chat_id != null) {
                data.chat_id = this.chat_id;
            }
            if (this.user_name != null) {
                data.user_name = this.user_name;
            }
            if (this.user_appeal != null) {
                data.user_appeal = this.user_appeal;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.chat_id != 0)
                writer.writeInt64(1, this.chat_id);
            if (this.user_name.length)
                writer.writeString(2, this.user_name);
            if (this.user_appeal.length)
                writer.writeString(3, this.user_appeal);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateUserAppealRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateUserAppealRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.chat_id = reader.readInt64();
                        break;
                    case 2:
                        message.user_name = reader.readString();
                        break;
                    case 3:
                        message.user_appeal = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateUserAppealRequest {
            return UpdateUserAppealRequest.deserialize(bytes);
        }
    }
    export class PingPongRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            local?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("local" in data && data.local != undefined) {
                    this.local = data.local;
                }
            }
        }
        get local() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set local(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            local?: number;
        }): PingPongRequest {
            const message = new PingPongRequest({});
            if (data.local != null) {
                message.local = data.local;
            }
            return message;
        }
        toObject() {
            const data: {
                local?: number;
            } = {};
            if (this.local != null) {
                data.local = this.local;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.local != 0)
                writer.writeInt64(1, this.local);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PingPongRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PingPongRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.local = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PingPongRequest {
            return PingPongRequest.deserialize(bytes);
        }
    }
    export class PingPongResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            local?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("local" in data && data.local != undefined) {
                    this.local = data.local;
                }
            }
        }
        get local() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set local(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            local?: number;
        }): PingPongResponse {
            const message = new PingPongResponse({});
            if (data.local != null) {
                message.local = data.local;
            }
            return message;
        }
        toObject() {
            const data: {
                local?: number;
            } = {};
            if (this.local != null) {
                data.local = this.local;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.local != 0)
                writer.writeInt64(1, this.local);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PingPongResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PingPongResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.local = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PingPongResponse {
            return PingPongResponse.deserialize(bytes);
        }
    }
    export class ReplyRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            msg_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("msg_id" in data && data.msg_id != undefined) {
                    this.msg_id = data.msg_id;
                }
            }
        }
        get msg_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set msg_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            msg_id?: number;
        }): ReplyRequest {
            const message = new ReplyRequest({});
            if (data.msg_id != null) {
                message.msg_id = data.msg_id;
            }
            return message;
        }
        toObject() {
            const data: {
                msg_id?: number;
            } = {};
            if (this.msg_id != null) {
                data.msg_id = this.msg_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.msg_id != 0)
                writer.writeInt64(1, this.msg_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReplyRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReplyRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.msg_id = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReplyRequest {
            return ReplyRequest.deserialize(bytes);
        }
    }
    export class VerifyRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            gns_id?: string;
            tenant_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("gns_id" in data && data.gns_id != undefined) {
                    this.gns_id = data.gns_id;
                }
                if ("tenant_id" in data && data.tenant_id != undefined) {
                    this.tenant_id = data.tenant_id;
                }
            }
        }
        get gns_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set gns_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get tenant_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set tenant_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            gns_id?: string;
            tenant_id?: number;
        }): VerifyRequest {
            const message = new VerifyRequest({});
            if (data.gns_id != null) {
                message.gns_id = data.gns_id;
            }
            if (data.tenant_id != null) {
                message.tenant_id = data.tenant_id;
            }
            return message;
        }
        toObject() {
            const data: {
                gns_id?: string;
                tenant_id?: number;
            } = {};
            if (this.gns_id != null) {
                data.gns_id = this.gns_id;
            }
            if (this.tenant_id != null) {
                data.tenant_id = this.tenant_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.gns_id.length)
                writer.writeString(1, this.gns_id);
            if (this.tenant_id != 0)
                writer.writeInt32(2, this.tenant_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VerifyRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new VerifyRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.gns_id = reader.readString();
                        break;
                    case 2:
                        message.tenant_id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): VerifyRequest {
            return VerifyRequest.deserialize(bytes);
        }
    }
    export class VerifyResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            gns_id?: string;
            tenant_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("gns_id" in data && data.gns_id != undefined) {
                    this.gns_id = data.gns_id;
                }
                if ("tenant_id" in data && data.tenant_id != undefined) {
                    this.tenant_id = data.tenant_id;
                }
            }
        }
        get gns_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set gns_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get tenant_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set tenant_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            gns_id?: string;
            tenant_id?: number;
        }): VerifyResponse {
            const message = new VerifyResponse({});
            if (data.gns_id != null) {
                message.gns_id = data.gns_id;
            }
            if (data.tenant_id != null) {
                message.tenant_id = data.tenant_id;
            }
            return message;
        }
        toObject() {
            const data: {
                gns_id?: string;
                tenant_id?: number;
            } = {};
            if (this.gns_id != null) {
                data.gns_id = this.gns_id;
            }
            if (this.tenant_id != null) {
                data.tenant_id = this.tenant_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.gns_id.length)
                writer.writeString(1, this.gns_id);
            if (this.tenant_id != 0)
                writer.writeInt32(2, this.tenant_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VerifyResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new VerifyResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.gns_id = reader.readString();
                        break;
                    case 2:
                        message.tenant_id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): VerifyResponse {
            return VerifyResponse.deserialize(bytes);
        }
    }
    export class ClientMarkReadRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            consult_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("consult_id" in data && data.consult_id != undefined) {
                    this.consult_id = data.consult_id;
                }
            }
        }
        get consult_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set consult_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            consult_id?: number;
        }): ClientMarkReadRequest {
            const message = new ClientMarkReadRequest({});
            if (data.consult_id != null) {
                message.consult_id = data.consult_id;
            }
            return message;
        }
        toObject() {
            const data: {
                consult_id?: number;
            } = {};
            if (this.consult_id != null) {
                data.consult_id = this.consult_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.consult_id != 0)
                writer.writeInt64(1, this.consult_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ClientMarkReadRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ClientMarkReadRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.consult_id = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ClientMarkReadRequest {
            return ClientMarkReadRequest.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedFrontService {
        static definition = {
            CustomerInfo: {
                path: "/api.core.Front/CustomerInfo",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CustomerDataRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CustomerDataRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CustomerDataResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CustomerDataResponse.deserialize(new Uint8Array(bytes))
            },
            AssignWorker: {
                path: "/api.core.Front/AssignWorker",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: AssignWorkerRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => AssignWorkerRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: AssignWorkerResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => AssignWorkerResponse.deserialize(new Uint8Array(bytes))
            },
            QueryEntrance: {
                path: "/api.core.Front/QueryEntrance",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryEntranceResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryEntranceResponse.deserialize(new Uint8Array(bytes))
            },
            QueryAutoReply: {
                path: "/api.core.Front/QueryAutoReply",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: AutoReplyRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => AutoReplyRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryAutoReplyResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryAutoReplyResponse.deserialize(new Uint8Array(bytes))
            },
            CreateAnonUser: {
                path: "/api.core.Front/CreateAnonUser",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateAnonUserRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateAnonUserRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CreateAnonUserResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CreateAnonUserResponse.deserialize(new Uint8Array(bytes))
            },
            QueryWorker: {
                path: "/api.core.Front/QueryWorker",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryWorkerRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryWorkerRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryWorkerResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryWorkerResponse.deserialize(new Uint8Array(bytes))
            },
            QueryChat: {
                path: "/api.core.Front/QueryChat",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryChatRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryChatRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryChatResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryChatResponse.deserialize(new Uint8Array(bytes))
            },
            UpdateUserAppeal: {
                path: "/api.core.Front/UpdateUserAppeal",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdateUserAppealRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdateUserAppealRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            Ping: {
                path: "/api.core.Front/Ping",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            PingPong: {
                path: "/api.core.Front/PingPong",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: PingPongRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => PingPongRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: PingPongResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => PingPongResponse.deserialize(new Uint8Array(bytes))
            },
            ReplyPls: {
                path: "/api.core.Front/ReplyPls",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ReplyRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ReplyRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            QueryWorkerAutoReply: {
                path: "/api.core.Front/QueryWorkerAutoReply",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryAutoReplyRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryAutoReplyRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryAutoReplyResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryAutoReplyResponse.deserialize(new Uint8Array(bytes))
            },
            verify: {
                path: "/api.core.Front/verify",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: VerifyRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => VerifyRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: VerifyResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => VerifyResponse.deserialize(new Uint8Array(bytes))
            },
            MarkRead: {
                path: "/api.core.Front/MarkRead",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ClientMarkReadRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ClientMarkReadRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            NotifyMsg: {
                path: "/api.core.Front/NotifyMsg",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_9.api.core.NotifyMessageRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_9.api.core.NotifyMessageRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract CustomerInfo(call: grpc_1.ServerUnaryCall<CustomerDataRequest, CustomerDataResponse>, callback: grpc_1.sendUnaryData<CustomerDataResponse>): void;
        abstract AssignWorker(call: grpc_1.ServerUnaryCall<AssignWorkerRequest, AssignWorkerResponse>, callback: grpc_1.sendUnaryData<AssignWorkerResponse>): void;
        abstract QueryEntrance(call: grpc_1.ServerUnaryCall<dependency_2.google.protobuf.Empty, QueryEntranceResponse>, callback: grpc_1.sendUnaryData<QueryEntranceResponse>): void;
        abstract QueryAutoReply(call: grpc_1.ServerUnaryCall<AutoReplyRequest, QueryAutoReplyResponse>, callback: grpc_1.sendUnaryData<QueryAutoReplyResponse>): void;
        abstract CreateAnonUser(call: grpc_1.ServerUnaryCall<CreateAnonUserRequest, CreateAnonUserResponse>, callback: grpc_1.sendUnaryData<CreateAnonUserResponse>): void;
        abstract QueryWorker(call: grpc_1.ServerUnaryCall<QueryWorkerRequest, QueryWorkerResponse>, callback: grpc_1.sendUnaryData<QueryWorkerResponse>): void;
        abstract QueryChat(call: grpc_1.ServerUnaryCall<QueryChatRequest, QueryChatResponse>, callback: grpc_1.sendUnaryData<QueryChatResponse>): void;
        abstract UpdateUserAppeal(call: grpc_1.ServerUnaryCall<UpdateUserAppealRequest, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
        abstract Ping(call: grpc_1.ServerUnaryCall<dependency_2.google.protobuf.Empty, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
        abstract PingPong(call: grpc_1.ServerUnaryCall<PingPongRequest, PingPongResponse>, callback: grpc_1.sendUnaryData<PingPongResponse>): void;
        abstract ReplyPls(call: grpc_1.ServerUnaryCall<ReplyRequest, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
        abstract QueryWorkerAutoReply(call: grpc_1.ServerUnaryCall<QueryAutoReplyRequest, QueryAutoReplyResponse>, callback: grpc_1.sendUnaryData<QueryAutoReplyResponse>): void;
        abstract verify(call: grpc_1.ServerUnaryCall<VerifyRequest, VerifyResponse>, callback: grpc_1.sendUnaryData<VerifyResponse>): void;
        abstract MarkRead(call: grpc_1.ServerUnaryCall<ClientMarkReadRequest, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
        abstract NotifyMsg(call: grpc_1.ServerUnaryCall<dependency_9.api.core.NotifyMessageRequest, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
    }
    export class FrontClient extends grpc_1.makeGenericClientConstructor(UnimplementedFrontService.definition, "Front", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        CustomerInfo: GrpcUnaryServiceInterface<CustomerDataRequest, CustomerDataResponse> = (message: CustomerDataRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CustomerDataResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CustomerDataResponse>, callback?: grpc_1.requestCallback<CustomerDataResponse>): grpc_1.ClientUnaryCall => {
            return super.CustomerInfo(message, metadata, options, callback);
        };
        AssignWorker: GrpcUnaryServiceInterface<AssignWorkerRequest, AssignWorkerResponse> = (message: AssignWorkerRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<AssignWorkerResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<AssignWorkerResponse>, callback?: grpc_1.requestCallback<AssignWorkerResponse>): grpc_1.ClientUnaryCall => {
            return super.AssignWorker(message, metadata, options, callback);
        };
        QueryEntrance: GrpcUnaryServiceInterface<dependency_2.google.protobuf.Empty, QueryEntranceResponse> = (message: dependency_2.google.protobuf.Empty, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryEntranceResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryEntranceResponse>, callback?: grpc_1.requestCallback<QueryEntranceResponse>): grpc_1.ClientUnaryCall => {
            return super.QueryEntrance(message, metadata, options, callback);
        };
        QueryAutoReply: GrpcUnaryServiceInterface<AutoReplyRequest, QueryAutoReplyResponse> = (message: AutoReplyRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryAutoReplyResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryAutoReplyResponse>, callback?: grpc_1.requestCallback<QueryAutoReplyResponse>): grpc_1.ClientUnaryCall => {
            return super.QueryAutoReply(message, metadata, options, callback);
        };
        CreateAnonUser: GrpcUnaryServiceInterface<CreateAnonUserRequest, CreateAnonUserResponse> = (message: CreateAnonUserRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CreateAnonUserResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CreateAnonUserResponse>, callback?: grpc_1.requestCallback<CreateAnonUserResponse>): grpc_1.ClientUnaryCall => {
            return super.CreateAnonUser(message, metadata, options, callback);
        };
        QueryWorker: GrpcUnaryServiceInterface<QueryWorkerRequest, QueryWorkerResponse> = (message: QueryWorkerRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryWorkerResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryWorkerResponse>, callback?: grpc_1.requestCallback<QueryWorkerResponse>): grpc_1.ClientUnaryCall => {
            return super.QueryWorker(message, metadata, options, callback);
        };
        QueryChat: GrpcUnaryServiceInterface<QueryChatRequest, QueryChatResponse> = (message: QueryChatRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryChatResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryChatResponse>, callback?: grpc_1.requestCallback<QueryChatResponse>): grpc_1.ClientUnaryCall => {
            return super.QueryChat(message, metadata, options, callback);
        };
        UpdateUserAppeal: GrpcUnaryServiceInterface<UpdateUserAppealRequest, dependency_2.google.protobuf.Empty> = (message: UpdateUserAppealRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_2.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.UpdateUserAppeal(message, metadata, options, callback);
        };
        Ping: GrpcUnaryServiceInterface<dependency_2.google.protobuf.Empty, dependency_2.google.protobuf.Empty> = (message: dependency_2.google.protobuf.Empty, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_2.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.Ping(message, metadata, options, callback);
        };
        PingPong: GrpcUnaryServiceInterface<PingPongRequest, PingPongResponse> = (message: PingPongRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<PingPongResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<PingPongResponse>, callback?: grpc_1.requestCallback<PingPongResponse>): grpc_1.ClientUnaryCall => {
            return super.PingPong(message, metadata, options, callback);
        };
        ReplyPls: GrpcUnaryServiceInterface<ReplyRequest, dependency_2.google.protobuf.Empty> = (message: ReplyRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_2.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.ReplyPls(message, metadata, options, callback);
        };
        QueryWorkerAutoReply: GrpcUnaryServiceInterface<QueryAutoReplyRequest, QueryAutoReplyResponse> = (message: QueryAutoReplyRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryAutoReplyResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryAutoReplyResponse>, callback?: grpc_1.requestCallback<QueryAutoReplyResponse>): grpc_1.ClientUnaryCall => {
            return super.QueryWorkerAutoReply(message, metadata, options, callback);
        };
        verify: GrpcUnaryServiceInterface<VerifyRequest, VerifyResponse> = (message: VerifyRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<VerifyResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<VerifyResponse>, callback?: grpc_1.requestCallback<VerifyResponse>): grpc_1.ClientUnaryCall => {
            return super.verify(message, metadata, options, callback);
        };
        MarkRead: GrpcUnaryServiceInterface<ClientMarkReadRequest, dependency_2.google.protobuf.Empty> = (message: ClientMarkReadRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_2.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.MarkRead(message, metadata, options, callback);
        };
        NotifyMsg: GrpcUnaryServiceInterface<dependency_9.api.core.NotifyMessageRequest, dependency_2.google.protobuf.Empty> = (message: dependency_9.api.core.NotifyMessageRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_2.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.NotifyMsg(message, metadata, options, callback);
        };
    }
}
