/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.26.1
 * source: api/core/entrance.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../option";
import * as dependency_2 from "./../../google/protobuf/empty";
import * as dependency_3 from "./../../validate/validate";
import * as dependency_4 from "./../common/c_entrance";
import * as dependency_5 from "./../common/c_worker";
import * as dependency_6 from "./../common/c_reply";
import * as dependency_7 from "./../common/c_base";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace api.core {
    export class EntranceQueryResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            entrances?: dependency_4.api.common.Entrance[];
            total?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("entrances" in data && data.entrances != undefined) {
                    this.entrances = data.entrances;
                }
                if ("total" in data && data.total != undefined) {
                    this.total = data.total;
                }
            }
        }
        get entrances() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_4.api.common.Entrance, 1) as dependency_4.api.common.Entrance[];
        }
        set entrances(value: dependency_4.api.common.Entrance[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get total() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set total(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            entrances?: ReturnType<typeof dependency_4.api.common.Entrance.prototype.toObject>[];
            total?: number;
        }): EntranceQueryResponse {
            const message = new EntranceQueryResponse({});
            if (data.entrances != null) {
                message.entrances = data.entrances.map(item => dependency_4.api.common.Entrance.fromObject(item));
            }
            if (data.total != null) {
                message.total = data.total;
            }
            return message;
        }
        toObject() {
            const data: {
                entrances?: ReturnType<typeof dependency_4.api.common.Entrance.prototype.toObject>[];
                total?: number;
            } = {};
            if (this.entrances != null) {
                data.entrances = this.entrances.map((item: dependency_4.api.common.Entrance) => item.toObject());
            }
            if (this.total != null) {
                data.total = this.total;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.entrances.length)
                writer.writeRepeatedMessage(1, this.entrances, (item: dependency_4.api.common.Entrance) => item.serialize(writer));
            if (this.total != 0)
                writer.writeInt32(2, this.total);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EntranceQueryResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EntranceQueryResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.entrances, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_4.api.common.Entrance.deserialize(reader), dependency_4.api.common.Entrance));
                        break;
                    case 2:
                        message.total = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EntranceQueryResponse {
            return EntranceQueryResponse.deserialize(bytes);
        }
    }
    export class DomainItem extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            domain_name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("domain_name" in data && data.domain_name != undefined) {
                    this.domain_name = data.domain_name;
                }
            }
        }
        get domain_name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set domain_name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            domain_name?: string;
        }): DomainItem {
            const message = new DomainItem({});
            if (data.domain_name != null) {
                message.domain_name = data.domain_name;
            }
            return message;
        }
        toObject() {
            const data: {
                domain_name?: string;
            } = {};
            if (this.domain_name != null) {
                data.domain_name = this.domain_name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.domain_name.length)
                writer.writeString(1, this.domain_name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DomainItem {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DomainItem();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.domain_name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DomainItem {
            return DomainItem.deserialize(bytes);
        }
    }
    export class DownloadDomainResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            domain_item?: DomainItem[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("domain_item" in data && data.domain_item != undefined) {
                    this.domain_item = data.domain_item;
                }
            }
        }
        get domain_item() {
            return pb_1.Message.getRepeatedWrapperField(this, DomainItem, 1) as DomainItem[];
        }
        set domain_item(value: DomainItem[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            domain_item?: ReturnType<typeof DomainItem.prototype.toObject>[];
        }): DownloadDomainResponse {
            const message = new DownloadDomainResponse({});
            if (data.domain_item != null) {
                message.domain_item = data.domain_item.map(item => DomainItem.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                domain_item?: ReturnType<typeof DomainItem.prototype.toObject>[];
            } = {};
            if (this.domain_item != null) {
                data.domain_item = this.domain_item.map((item: DomainItem) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.domain_item.length)
                writer.writeRepeatedMessage(1, this.domain_item, (item: DomainItem) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DownloadDomainResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DownloadDomainResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.domain_item, () => pb_1.Message.addToRepeatedWrapperField(message, 1, DomainItem.deserialize(reader), DomainItem));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DownloadDomainResponse {
            return DownloadDomainResponse.deserialize(bytes);
        }
    }
    export class CreateEntranceRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            entrances?: dependency_4.api.common.Entrance;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("entrances" in data && data.entrances != undefined) {
                    this.entrances = data.entrances;
                }
            }
        }
        get entrances() {
            return pb_1.Message.getWrapperField(this, dependency_4.api.common.Entrance, 1) as dependency_4.api.common.Entrance;
        }
        set entrances(value: dependency_4.api.common.Entrance) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_entrances() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            entrances?: ReturnType<typeof dependency_4.api.common.Entrance.prototype.toObject>;
        }): CreateEntranceRequest {
            const message = new CreateEntranceRequest({});
            if (data.entrances != null) {
                message.entrances = dependency_4.api.common.Entrance.fromObject(data.entrances);
            }
            return message;
        }
        toObject() {
            const data: {
                entrances?: ReturnType<typeof dependency_4.api.common.Entrance.prototype.toObject>;
            } = {};
            if (this.entrances != null) {
                data.entrances = this.entrances.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_entrances)
                writer.writeMessage(1, this.entrances, () => this.entrances.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateEntranceRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateEntranceRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.entrances, () => message.entrances = dependency_4.api.common.Entrance.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateEntranceRequest {
            return CreateEntranceRequest.deserialize(bytes);
        }
    }
    export class CreateEntranceResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            id?: number;
        }): CreateEntranceResponse {
            const message = new CreateEntranceResponse({});
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeUint32(1, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateEntranceResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateEntranceResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateEntranceResponse {
            return CreateEntranceResponse.deserialize(bytes);
        }
    }
    export class UpdateEntranceRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            entrances?: dependency_4.api.common.Entrance;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("entrances" in data && data.entrances != undefined) {
                    this.entrances = data.entrances;
                }
            }
        }
        get entrances() {
            return pb_1.Message.getWrapperField(this, dependency_4.api.common.Entrance, 1) as dependency_4.api.common.Entrance;
        }
        set entrances(value: dependency_4.api.common.Entrance) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_entrances() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            entrances?: ReturnType<typeof dependency_4.api.common.Entrance.prototype.toObject>;
        }): UpdateEntranceRequest {
            const message = new UpdateEntranceRequest({});
            if (data.entrances != null) {
                message.entrances = dependency_4.api.common.Entrance.fromObject(data.entrances);
            }
            return message;
        }
        toObject() {
            const data: {
                entrances?: ReturnType<typeof dependency_4.api.common.Entrance.prototype.toObject>;
            } = {};
            if (this.entrances != null) {
                data.entrances = this.entrances.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_entrances)
                writer.writeMessage(1, this.entrances, () => this.entrances.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateEntranceRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateEntranceRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.entrances, () => message.entrances = dependency_4.api.common.Entrance.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateEntranceRequest {
            return UpdateEntranceRequest.deserialize(bytes);
        }
    }
    export class DeleteEntranceRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            id?: number;
        }): DeleteEntranceRequest {
            const message = new DeleteEntranceRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeUint32(1, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteEntranceRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteEntranceRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteEntranceRequest {
            return DeleteEntranceRequest.deserialize(bytes);
        }
    }
    export class DisableEntranceRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            disable_status?: dependency_7.api.common.DisableStatus;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("disable_status" in data && data.disable_status != undefined) {
                    this.disable_status = data.disable_status;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get disable_status() {
            return pb_1.Message.getFieldWithDefault(this, 2, dependency_7.api.common.DisableStatus.DEFAULT) as dependency_7.api.common.DisableStatus;
        }
        set disable_status(value: dependency_7.api.common.DisableStatus) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            id?: number;
            disable_status?: dependency_7.api.common.DisableStatus;
        }): DisableEntranceRequest {
            const message = new DisableEntranceRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.disable_status != null) {
                message.disable_status = data.disable_status;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                disable_status?: dependency_7.api.common.DisableStatus;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.disable_status != null) {
                data.disable_status = this.disable_status;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeUint32(1, this.id);
            if (this.disable_status != dependency_7.api.common.DisableStatus.DEFAULT)
                writer.writeEnum(2, this.disable_status);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DisableEntranceRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DisableEntranceRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readUint32();
                        break;
                    case 2:
                        message.disable_status = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DisableEntranceRequest {
            return DisableEntranceRequest.deserialize(bytes);
        }
    }
    export class GetDistributionResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            tenant_id?: number;
            distribution_type?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("tenant_id" in data && data.tenant_id != undefined) {
                    this.tenant_id = data.tenant_id;
                }
                if ("distribution_type" in data && data.distribution_type != undefined) {
                    this.distribution_type = data.distribution_type;
                }
            }
        }
        get tenant_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set tenant_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get distribution_type() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set distribution_type(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            tenant_id?: number;
            distribution_type?: string;
        }): GetDistributionResponse {
            const message = new GetDistributionResponse({});
            if (data.tenant_id != null) {
                message.tenant_id = data.tenant_id;
            }
            if (data.distribution_type != null) {
                message.distribution_type = data.distribution_type;
            }
            return message;
        }
        toObject() {
            const data: {
                tenant_id?: number;
                distribution_type?: string;
            } = {};
            if (this.tenant_id != null) {
                data.tenant_id = this.tenant_id;
            }
            if (this.distribution_type != null) {
                data.distribution_type = this.distribution_type;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.tenant_id != 0)
                writer.writeInt32(1, this.tenant_id);
            if (this.distribution_type.length)
                writer.writeString(2, this.distribution_type);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetDistributionResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetDistributionResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.tenant_id = reader.readInt32();
                        break;
                    case 2:
                        message.distribution_type = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetDistributionResponse {
            return GetDistributionResponse.deserialize(bytes);
        }
    }
    export class SaveDistributionRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            distribution_type?: dependency_5.api.common.DistributionType[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("distribution_type" in data && data.distribution_type != undefined) {
                    this.distribution_type = data.distribution_type;
                }
            }
        }
        get distribution_type() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as dependency_5.api.common.DistributionType[];
        }
        set distribution_type(value: dependency_5.api.common.DistributionType[]) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            distribution_type?: dependency_5.api.common.DistributionType[];
        }): SaveDistributionRequest {
            const message = new SaveDistributionRequest({});
            if (data.distribution_type != null) {
                message.distribution_type = data.distribution_type;
            }
            return message;
        }
        toObject() {
            const data: {
                distribution_type?: dependency_5.api.common.DistributionType[];
            } = {};
            if (this.distribution_type != null) {
                data.distribution_type = this.distribution_type;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.distribution_type.length)
                writer.writePackedEnum(3, this.distribution_type);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SaveDistributionRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SaveDistributionRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 3:
                        message.distribution_type = reader.readPackedEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SaveDistributionRequest {
            return SaveDistributionRequest.deserialize(bytes);
        }
    }
    export class EntranceExistsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2]];
        constructor(data?: any[] | ({} & (({
            entrance_id?: number;
            client_id?: never;
        } | {
            entrance_id?: never;
            client_id?: number;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("entrance_id" in data && data.entrance_id != undefined) {
                    this.entrance_id = data.entrance_id;
                }
                if ("client_id" in data && data.client_id != undefined) {
                    this.client_id = data.client_id;
                }
            }
        }
        get entrance_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set entrance_id(value: number) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_entrance_id() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get client_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set client_id(value: number) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
        }
        get has_client_id() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get based() {
            const cases: {
                [index: number]: "none" | "entrance_id" | "client_id";
            } = {
                0: "none",
                1: "entrance_id",
                2: "client_id"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
        }
        static fromObject(data: {
            entrance_id?: number;
            client_id?: number;
        }): EntranceExistsRequest {
            const message = new EntranceExistsRequest({});
            if (data.entrance_id != null) {
                message.entrance_id = data.entrance_id;
            }
            if (data.client_id != null) {
                message.client_id = data.client_id;
            }
            return message;
        }
        toObject() {
            const data: {
                entrance_id?: number;
                client_id?: number;
            } = {};
            if (this.entrance_id != null) {
                data.entrance_id = this.entrance_id;
            }
            if (this.client_id != null) {
                data.client_id = this.client_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_entrance_id)
                writer.writeInt32(1, this.entrance_id);
            if (this.has_client_id)
                writer.writeInt64(2, this.client_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EntranceExistsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EntranceExistsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.entrance_id = reader.readInt32();
                        break;
                    case 2:
                        message.client_id = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EntranceExistsRequest {
            return EntranceExistsRequest.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedEntranceService {
        static definition = {
            GetDistributionMechanism: {
                path: "/api.core.Entrance/GetDistributionMechanism",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetDistributionResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetDistributionResponse.deserialize(new Uint8Array(bytes))
            },
            SaveDistributionMechanism: {
                path: "/api.core.Entrance/SaveDistributionMechanism",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: SaveDistributionRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => SaveDistributionRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: DownloadDomainResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => DownloadDomainResponse.deserialize(new Uint8Array(bytes))
            },
            DownloadDomain: {
                path: "/api.core.Entrance/DownloadDomain",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: DownloadDomainResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => DownloadDomainResponse.deserialize(new Uint8Array(bytes))
            },
            QueryEntrance: {
                path: "/api.core.Entrance/QueryEntrance",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: EntranceQueryResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => EntranceQueryResponse.deserialize(new Uint8Array(bytes))
            },
            QueryEntranceV1: {
                path: "/api.core.Entrance/QueryEntranceV1",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_7.api.common.Page) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_7.api.common.Page.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: EntranceQueryResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => EntranceQueryResponse.deserialize(new Uint8Array(bytes))
            },
            CreateEntrance: {
                path: "/api.core.Entrance/CreateEntrance",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateEntranceRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateEntranceRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CreateEntranceResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CreateEntranceResponse.deserialize(new Uint8Array(bytes))
            },
            UpdateEntrance: {
                path: "/api.core.Entrance/UpdateEntrance",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdateEntranceRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdateEntranceRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            DeleteEntrance: {
                path: "/api.core.Entrance/DeleteEntrance",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DeleteEntranceRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DeleteEntranceRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            Exists: {
                path: "/api.core.Entrance/Exists",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: EntranceExistsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => EntranceExistsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            DisableEntrance: {
                path: "/api.core.Entrance/DisableEntrance",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DisableEntranceRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DisableEntranceRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract GetDistributionMechanism(call: grpc_1.ServerUnaryCall<dependency_2.google.protobuf.Empty, GetDistributionResponse>, callback: grpc_1.sendUnaryData<GetDistributionResponse>): void;
        abstract SaveDistributionMechanism(call: grpc_1.ServerUnaryCall<SaveDistributionRequest, DownloadDomainResponse>, callback: grpc_1.sendUnaryData<DownloadDomainResponse>): void;
        abstract DownloadDomain(call: grpc_1.ServerUnaryCall<dependency_2.google.protobuf.Empty, DownloadDomainResponse>, callback: grpc_1.sendUnaryData<DownloadDomainResponse>): void;
        abstract QueryEntrance(call: grpc_1.ServerUnaryCall<dependency_2.google.protobuf.Empty, EntranceQueryResponse>, callback: grpc_1.sendUnaryData<EntranceQueryResponse>): void;
        abstract QueryEntranceV1(call: grpc_1.ServerUnaryCall<dependency_7.api.common.Page, EntranceQueryResponse>, callback: grpc_1.sendUnaryData<EntranceQueryResponse>): void;
        abstract CreateEntrance(call: grpc_1.ServerUnaryCall<CreateEntranceRequest, CreateEntranceResponse>, callback: grpc_1.sendUnaryData<CreateEntranceResponse>): void;
        abstract UpdateEntrance(call: grpc_1.ServerUnaryCall<UpdateEntranceRequest, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
        abstract DeleteEntrance(call: grpc_1.ServerUnaryCall<DeleteEntranceRequest, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
        abstract Exists(call: grpc_1.ServerUnaryCall<EntranceExistsRequest, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
        abstract DisableEntrance(call: grpc_1.ServerUnaryCall<DisableEntranceRequest, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
    }
    export class EntranceClient extends grpc_1.makeGenericClientConstructor(UnimplementedEntranceService.definition, "Entrance", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        GetDistributionMechanism: GrpcUnaryServiceInterface<dependency_2.google.protobuf.Empty, GetDistributionResponse> = (message: dependency_2.google.protobuf.Empty, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetDistributionResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetDistributionResponse>, callback?: grpc_1.requestCallback<GetDistributionResponse>): grpc_1.ClientUnaryCall => {
            return super.GetDistributionMechanism(message, metadata, options, callback);
        };
        SaveDistributionMechanism: GrpcUnaryServiceInterface<SaveDistributionRequest, DownloadDomainResponse> = (message: SaveDistributionRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<DownloadDomainResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<DownloadDomainResponse>, callback?: grpc_1.requestCallback<DownloadDomainResponse>): grpc_1.ClientUnaryCall => {
            return super.SaveDistributionMechanism(message, metadata, options, callback);
        };
        DownloadDomain: GrpcUnaryServiceInterface<dependency_2.google.protobuf.Empty, DownloadDomainResponse> = (message: dependency_2.google.protobuf.Empty, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<DownloadDomainResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<DownloadDomainResponse>, callback?: grpc_1.requestCallback<DownloadDomainResponse>): grpc_1.ClientUnaryCall => {
            return super.DownloadDomain(message, metadata, options, callback);
        };
        QueryEntrance: GrpcUnaryServiceInterface<dependency_2.google.protobuf.Empty, EntranceQueryResponse> = (message: dependency_2.google.protobuf.Empty, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<EntranceQueryResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<EntranceQueryResponse>, callback?: grpc_1.requestCallback<EntranceQueryResponse>): grpc_1.ClientUnaryCall => {
            return super.QueryEntrance(message, metadata, options, callback);
        };
        QueryEntranceV1: GrpcUnaryServiceInterface<dependency_7.api.common.Page, EntranceQueryResponse> = (message: dependency_7.api.common.Page, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<EntranceQueryResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<EntranceQueryResponse>, callback?: grpc_1.requestCallback<EntranceQueryResponse>): grpc_1.ClientUnaryCall => {
            return super.QueryEntranceV1(message, metadata, options, callback);
        };
        CreateEntrance: GrpcUnaryServiceInterface<CreateEntranceRequest, CreateEntranceResponse> = (message: CreateEntranceRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CreateEntranceResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CreateEntranceResponse>, callback?: grpc_1.requestCallback<CreateEntranceResponse>): grpc_1.ClientUnaryCall => {
            return super.CreateEntrance(message, metadata, options, callback);
        };
        UpdateEntrance: GrpcUnaryServiceInterface<UpdateEntranceRequest, dependency_2.google.protobuf.Empty> = (message: UpdateEntranceRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_2.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.UpdateEntrance(message, metadata, options, callback);
        };
        DeleteEntrance: GrpcUnaryServiceInterface<DeleteEntranceRequest, dependency_2.google.protobuf.Empty> = (message: DeleteEntranceRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_2.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.DeleteEntrance(message, metadata, options, callback);
        };
        Exists: GrpcUnaryServiceInterface<EntranceExistsRequest, dependency_2.google.protobuf.Empty> = (message: EntranceExistsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_2.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.Exists(message, metadata, options, callback);
        };
        DisableEntrance: GrpcUnaryServiceInterface<DisableEntranceRequest, dependency_2.google.protobuf.Empty> = (message: DisableEntranceRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_2.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.DisableEntrance(message, metadata, options, callback);
        };
    }
}
