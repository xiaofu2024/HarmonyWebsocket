/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.26.1
 * source: api/core/quick_reply.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../option";
import * as dependency_2 from "./../../google/protobuf/empty";
import * as dependency_3 from "./../../validate/validate";
import * as dependency_4 from "./../common/c_message";
import * as dependency_5 from "./../common/c_base";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace api.core {
    export class QuickReplyGroupItem extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            priority?: number;
            group_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("priority" in data && data.priority != undefined) {
                    this.priority = data.priority;
                }
                if ("group_id" in data && data.group_id != undefined) {
                    this.group_id = data.group_id;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get priority() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set priority(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get group_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set group_id(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            name?: string;
            priority?: number;
            group_id?: number;
        }): QuickReplyGroupItem {
            const message = new QuickReplyGroupItem({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.priority != null) {
                message.priority = data.priority;
            }
            if (data.group_id != null) {
                message.group_id = data.group_id;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                priority?: number;
                group_id?: number;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.priority != null) {
                data.priority = this.priority;
            }
            if (this.group_id != null) {
                data.group_id = this.group_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.priority != 0)
                writer.writeInt32(2, this.priority);
            if (this.group_id != 0)
                writer.writeInt64(3, this.group_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QuickReplyGroupItem {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QuickReplyGroupItem();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.priority = reader.readInt32();
                        break;
                    case 3:
                        message.group_id = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QuickReplyGroupItem {
            return QuickReplyGroupItem.deserialize(bytes);
        }
    }
    export class QuickReplyGroupQueryResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            items?: QuickReplyGroupItem[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("items" in data && data.items != undefined) {
                    this.items = data.items;
                }
            }
        }
        get items() {
            return pb_1.Message.getRepeatedWrapperField(this, QuickReplyGroupItem, 1) as QuickReplyGroupItem[];
        }
        set items(value: QuickReplyGroupItem[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            items?: ReturnType<typeof QuickReplyGroupItem.prototype.toObject>[];
        }): QuickReplyGroupQueryResponse {
            const message = new QuickReplyGroupQueryResponse({});
            if (data.items != null) {
                message.items = data.items.map(item => QuickReplyGroupItem.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                items?: ReturnType<typeof QuickReplyGroupItem.prototype.toObject>[];
            } = {};
            if (this.items != null) {
                data.items = this.items.map((item: QuickReplyGroupItem) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.items.length)
                writer.writeRepeatedMessage(1, this.items, (item: QuickReplyGroupItem) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QuickReplyGroupQueryResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QuickReplyGroupQueryResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.items, () => pb_1.Message.addToRepeatedWrapperField(message, 1, QuickReplyGroupItem.deserialize(reader), QuickReplyGroupItem));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QuickReplyGroupQueryResponse {
            return QuickReplyGroupQueryResponse.deserialize(bytes);
        }
    }
    export class QuickReplyGroupCreateRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            priority?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("priority" in data && data.priority != undefined) {
                    this.priority = data.priority;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get priority() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set priority(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            name?: string;
            priority?: number;
        }): QuickReplyGroupCreateRequest {
            const message = new QuickReplyGroupCreateRequest({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.priority != null) {
                message.priority = data.priority;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                priority?: number;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.priority != null) {
                data.priority = this.priority;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.priority != 0)
                writer.writeInt32(2, this.priority);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QuickReplyGroupCreateRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QuickReplyGroupCreateRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.priority = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QuickReplyGroupCreateRequest {
            return QuickReplyGroupCreateRequest.deserialize(bytes);
        }
    }
    export class QuickReplyGroupUpdateRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            old_name?: string;
            new_name?: string;
            priority?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("old_name" in data && data.old_name != undefined) {
                    this.old_name = data.old_name;
                }
                if ("new_name" in data && data.new_name != undefined) {
                    this.new_name = data.new_name;
                }
                if ("priority" in data && data.priority != undefined) {
                    this.priority = data.priority;
                }
            }
        }
        get old_name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set old_name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get new_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set new_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get priority() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set priority(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            old_name?: string;
            new_name?: string;
            priority?: number;
        }): QuickReplyGroupUpdateRequest {
            const message = new QuickReplyGroupUpdateRequest({});
            if (data.old_name != null) {
                message.old_name = data.old_name;
            }
            if (data.new_name != null) {
                message.new_name = data.new_name;
            }
            if (data.priority != null) {
                message.priority = data.priority;
            }
            return message;
        }
        toObject() {
            const data: {
                old_name?: string;
                new_name?: string;
                priority?: number;
            } = {};
            if (this.old_name != null) {
                data.old_name = this.old_name;
            }
            if (this.new_name != null) {
                data.new_name = this.new_name;
            }
            if (this.priority != null) {
                data.priority = this.priority;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.old_name.length)
                writer.writeString(1, this.old_name);
            if (this.new_name.length)
                writer.writeString(2, this.new_name);
            if (this.priority != 0)
                writer.writeInt32(3, this.priority);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QuickReplyGroupUpdateRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QuickReplyGroupUpdateRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.old_name = reader.readString();
                        break;
                    case 2:
                        message.new_name = reader.readString();
                        break;
                    case 3:
                        message.priority = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QuickReplyGroupUpdateRequest {
            return QuickReplyGroupUpdateRequest.deserialize(bytes);
        }
    }
    export class QuickReplyGroupDeleteRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as string[];
        }
        set name(value: string[]) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            name?: string[];
        }): QuickReplyGroupDeleteRequest {
            const message = new QuickReplyGroupDeleteRequest({});
            if (data.name != null) {
                message.name = data.name;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string[];
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeRepeatedString(1, this.name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QuickReplyGroupDeleteRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QuickReplyGroupDeleteRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        pb_1.Message.addToRepeatedField(message, 1, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QuickReplyGroupDeleteRequest {
            return QuickReplyGroupDeleteRequest.deserialize(bytes);
        }
    }
    export class QuickReplyItem extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            name?: string;
            group_name?: string;
            priority?: number;
            content?: string;
            items?: dependency_4.api.common.Message[];
            is_custom?: boolean;
            group_id?: number;
            customer_group_name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [6], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("group_name" in data && data.group_name != undefined) {
                    this.group_name = data.group_name;
                }
                if ("priority" in data && data.priority != undefined) {
                    this.priority = data.priority;
                }
                if ("content" in data && data.content != undefined) {
                    this.content = data.content;
                }
                if ("items" in data && data.items != undefined) {
                    this.items = data.items;
                }
                if ("is_custom" in data && data.is_custom != undefined) {
                    this.is_custom = data.is_custom;
                }
                if ("group_id" in data && data.group_id != undefined) {
                    this.group_id = data.group_id;
                }
                if ("customer_group_name" in data && data.customer_group_name != undefined) {
                    this.customer_group_name = data.customer_group_name;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get group_name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set group_name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get priority() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set priority(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get content() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set content(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get items() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_4.api.common.Message, 6) as dependency_4.api.common.Message[];
        }
        set items(value: dependency_4.api.common.Message[]) {
            pb_1.Message.setRepeatedWrapperField(this, 6, value);
        }
        get is_custom() {
            return pb_1.Message.getFieldWithDefault(this, 7, false) as boolean;
        }
        set is_custom(value: boolean) {
            pb_1.Message.setField(this, 7, value);
        }
        get group_id() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set group_id(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get customer_group_name() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set customer_group_name(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        static fromObject(data: {
            id?: number;
            name?: string;
            group_name?: string;
            priority?: number;
            content?: string;
            items?: ReturnType<typeof dependency_4.api.common.Message.prototype.toObject>[];
            is_custom?: boolean;
            group_id?: number;
            customer_group_name?: string;
        }): QuickReplyItem {
            const message = new QuickReplyItem({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.group_name != null) {
                message.group_name = data.group_name;
            }
            if (data.priority != null) {
                message.priority = data.priority;
            }
            if (data.content != null) {
                message.content = data.content;
            }
            if (data.items != null) {
                message.items = data.items.map(item => dependency_4.api.common.Message.fromObject(item));
            }
            if (data.is_custom != null) {
                message.is_custom = data.is_custom;
            }
            if (data.group_id != null) {
                message.group_id = data.group_id;
            }
            if (data.customer_group_name != null) {
                message.customer_group_name = data.customer_group_name;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                name?: string;
                group_name?: string;
                priority?: number;
                content?: string;
                items?: ReturnType<typeof dependency_4.api.common.Message.prototype.toObject>[];
                is_custom?: boolean;
                group_id?: number;
                customer_group_name?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.group_name != null) {
                data.group_name = this.group_name;
            }
            if (this.priority != null) {
                data.priority = this.priority;
            }
            if (this.content != null) {
                data.content = this.content;
            }
            if (this.items != null) {
                data.items = this.items.map((item: dependency_4.api.common.Message) => item.toObject());
            }
            if (this.is_custom != null) {
                data.is_custom = this.is_custom;
            }
            if (this.group_id != null) {
                data.group_id = this.group_id;
            }
            if (this.customer_group_name != null) {
                data.customer_group_name = this.customer_group_name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt64(1, this.id);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.group_name.length)
                writer.writeString(3, this.group_name);
            if (this.priority != 0)
                writer.writeInt32(4, this.priority);
            if (this.content.length)
                writer.writeString(5, this.content);
            if (this.items.length)
                writer.writeRepeatedMessage(6, this.items, (item: dependency_4.api.common.Message) => item.serialize(writer));
            if (this.is_custom != false)
                writer.writeBool(7, this.is_custom);
            if (this.group_id != 0)
                writer.writeInt64(8, this.group_id);
            if (this.customer_group_name.length)
                writer.writeString(9, this.customer_group_name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QuickReplyItem {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QuickReplyItem();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt64();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.group_name = reader.readString();
                        break;
                    case 4:
                        message.priority = reader.readInt32();
                        break;
                    case 5:
                        message.content = reader.readString();
                        break;
                    case 6:
                        reader.readMessage(message.items, () => pb_1.Message.addToRepeatedWrapperField(message, 6, dependency_4.api.common.Message.deserialize(reader), dependency_4.api.common.Message));
                        break;
                    case 7:
                        message.is_custom = reader.readBool();
                        break;
                    case 8:
                        message.group_id = reader.readInt64();
                        break;
                    case 9:
                        message.customer_group_name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QuickReplyItem {
            return QuickReplyItem.deserialize(bytes);
        }
    }
    export class QuickReplyGroupQueryRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            reply_group_name?: string;
            worker_group_id?: number;
            batch?: dependency_5.api.common.Batch;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("reply_group_name" in data && data.reply_group_name != undefined) {
                    this.reply_group_name = data.reply_group_name;
                }
                if ("worker_group_id" in data && data.worker_group_id != undefined) {
                    this.worker_group_id = data.worker_group_id;
                }
                if ("batch" in data && data.batch != undefined) {
                    this.batch = data.batch;
                }
            }
        }
        get reply_group_name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set reply_group_name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get worker_group_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set worker_group_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get batch() {
            return pb_1.Message.getWrapperField(this, dependency_5.api.common.Batch, 3) as dependency_5.api.common.Batch;
        }
        set batch(value: dependency_5.api.common.Batch) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_batch() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            reply_group_name?: string;
            worker_group_id?: number;
            batch?: ReturnType<typeof dependency_5.api.common.Batch.prototype.toObject>;
        }): QuickReplyGroupQueryRequest {
            const message = new QuickReplyGroupQueryRequest({});
            if (data.reply_group_name != null) {
                message.reply_group_name = data.reply_group_name;
            }
            if (data.worker_group_id != null) {
                message.worker_group_id = data.worker_group_id;
            }
            if (data.batch != null) {
                message.batch = dependency_5.api.common.Batch.fromObject(data.batch);
            }
            return message;
        }
        toObject() {
            const data: {
                reply_group_name?: string;
                worker_group_id?: number;
                batch?: ReturnType<typeof dependency_5.api.common.Batch.prototype.toObject>;
            } = {};
            if (this.reply_group_name != null) {
                data.reply_group_name = this.reply_group_name;
            }
            if (this.worker_group_id != null) {
                data.worker_group_id = this.worker_group_id;
            }
            if (this.batch != null) {
                data.batch = this.batch.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.reply_group_name.length)
                writer.writeString(1, this.reply_group_name);
            if (this.worker_group_id != 0)
                writer.writeInt64(2, this.worker_group_id);
            if (this.has_batch)
                writer.writeMessage(3, this.batch, () => this.batch.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QuickReplyGroupQueryRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QuickReplyGroupQueryRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.reply_group_name = reader.readString();
                        break;
                    case 2:
                        message.worker_group_id = reader.readInt64();
                        break;
                    case 3:
                        reader.readMessage(message.batch, () => message.batch = dependency_5.api.common.Batch.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QuickReplyGroupQueryRequest {
            return QuickReplyGroupQueryRequest.deserialize(bytes);
        }
    }
    export class QuickReplyQueryResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            items?: QuickReplyItem[];
            total?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("items" in data && data.items != undefined) {
                    this.items = data.items;
                }
                if ("total" in data && data.total != undefined) {
                    this.total = data.total;
                }
            }
        }
        get items() {
            return pb_1.Message.getRepeatedWrapperField(this, QuickReplyItem, 1) as QuickReplyItem[];
        }
        set items(value: QuickReplyItem[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get total() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set total(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            items?: ReturnType<typeof QuickReplyItem.prototype.toObject>[];
            total?: number;
        }): QuickReplyQueryResponse {
            const message = new QuickReplyQueryResponse({});
            if (data.items != null) {
                message.items = data.items.map(item => QuickReplyItem.fromObject(item));
            }
            if (data.total != null) {
                message.total = data.total;
            }
            return message;
        }
        toObject() {
            const data: {
                items?: ReturnType<typeof QuickReplyItem.prototype.toObject>[];
                total?: number;
            } = {};
            if (this.items != null) {
                data.items = this.items.map((item: QuickReplyItem) => item.toObject());
            }
            if (this.total != null) {
                data.total = this.total;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.items.length)
                writer.writeRepeatedMessage(1, this.items, (item: QuickReplyItem) => item.serialize(writer));
            if (this.total != 0)
                writer.writeInt32(2, this.total);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QuickReplyQueryResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QuickReplyQueryResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.items, () => pb_1.Message.addToRepeatedWrapperField(message, 1, QuickReplyItem.deserialize(reader), QuickReplyItem));
                        break;
                    case 2:
                        message.total = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QuickReplyQueryResponse {
            return QuickReplyQueryResponse.deserialize(bytes);
        }
    }
    export class CreateQuickReplyRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            reply?: QuickReplyItem;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("reply" in data && data.reply != undefined) {
                    this.reply = data.reply;
                }
            }
        }
        get reply() {
            return pb_1.Message.getWrapperField(this, QuickReplyItem, 1) as QuickReplyItem;
        }
        set reply(value: QuickReplyItem) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_reply() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            reply?: ReturnType<typeof QuickReplyItem.prototype.toObject>;
        }): CreateQuickReplyRequest {
            const message = new CreateQuickReplyRequest({});
            if (data.reply != null) {
                message.reply = QuickReplyItem.fromObject(data.reply);
            }
            return message;
        }
        toObject() {
            const data: {
                reply?: ReturnType<typeof QuickReplyItem.prototype.toObject>;
            } = {};
            if (this.reply != null) {
                data.reply = this.reply.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_reply)
                writer.writeMessage(1, this.reply, () => this.reply.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateQuickReplyRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateQuickReplyRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.reply, () => message.reply = QuickReplyItem.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateQuickReplyRequest {
            return CreateQuickReplyRequest.deserialize(bytes);
        }
    }
    export class CreateQuickReplyResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            reply?: QuickReplyItem;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("reply" in data && data.reply != undefined) {
                    this.reply = data.reply;
                }
            }
        }
        get reply() {
            return pb_1.Message.getWrapperField(this, QuickReplyItem, 1) as QuickReplyItem;
        }
        set reply(value: QuickReplyItem) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_reply() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            reply?: ReturnType<typeof QuickReplyItem.prototype.toObject>;
        }): CreateQuickReplyResponse {
            const message = new CreateQuickReplyResponse({});
            if (data.reply != null) {
                message.reply = QuickReplyItem.fromObject(data.reply);
            }
            return message;
        }
        toObject() {
            const data: {
                reply?: ReturnType<typeof QuickReplyItem.prototype.toObject>;
            } = {};
            if (this.reply != null) {
                data.reply = this.reply.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_reply)
                writer.writeMessage(1, this.reply, () => this.reply.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateQuickReplyResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateQuickReplyResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.reply, () => message.reply = QuickReplyItem.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateQuickReplyResponse {
            return CreateQuickReplyResponse.deserialize(bytes);
        }
    }
    export class CreateQuickReplyRequestV1 extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            reply?: QuickReplyItem[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("reply" in data && data.reply != undefined) {
                    this.reply = data.reply;
                }
            }
        }
        get reply() {
            return pb_1.Message.getRepeatedWrapperField(this, QuickReplyItem, 1) as QuickReplyItem[];
        }
        set reply(value: QuickReplyItem[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            reply?: ReturnType<typeof QuickReplyItem.prototype.toObject>[];
        }): CreateQuickReplyRequestV1 {
            const message = new CreateQuickReplyRequestV1({});
            if (data.reply != null) {
                message.reply = data.reply.map(item => QuickReplyItem.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                reply?: ReturnType<typeof QuickReplyItem.prototype.toObject>[];
            } = {};
            if (this.reply != null) {
                data.reply = this.reply.map((item: QuickReplyItem) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.reply.length)
                writer.writeRepeatedMessage(1, this.reply, (item: QuickReplyItem) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateQuickReplyRequestV1 {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateQuickReplyRequestV1();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.reply, () => pb_1.Message.addToRepeatedWrapperField(message, 1, QuickReplyItem.deserialize(reader), QuickReplyItem));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateQuickReplyRequestV1 {
            return CreateQuickReplyRequestV1.deserialize(bytes);
        }
    }
    export class CreateQuickReplyResponseV1 extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            reply?: QuickReplyItem[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("reply" in data && data.reply != undefined) {
                    this.reply = data.reply;
                }
            }
        }
        get reply() {
            return pb_1.Message.getRepeatedWrapperField(this, QuickReplyItem, 1) as QuickReplyItem[];
        }
        set reply(value: QuickReplyItem[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            reply?: ReturnType<typeof QuickReplyItem.prototype.toObject>[];
        }): CreateQuickReplyResponseV1 {
            const message = new CreateQuickReplyResponseV1({});
            if (data.reply != null) {
                message.reply = data.reply.map(item => QuickReplyItem.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                reply?: ReturnType<typeof QuickReplyItem.prototype.toObject>[];
            } = {};
            if (this.reply != null) {
                data.reply = this.reply.map((item: QuickReplyItem) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.reply.length)
                writer.writeRepeatedMessage(1, this.reply, (item: QuickReplyItem) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateQuickReplyResponseV1 {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateQuickReplyResponseV1();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.reply, () => pb_1.Message.addToRepeatedWrapperField(message, 1, QuickReplyItem.deserialize(reader), QuickReplyItem));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateQuickReplyResponseV1 {
            return CreateQuickReplyResponseV1.deserialize(bytes);
        }
    }
    export class UpdateQuickReplyRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            reply?: QuickReplyItem;
            old_group_name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("reply" in data && data.reply != undefined) {
                    this.reply = data.reply;
                }
                if ("old_group_name" in data && data.old_group_name != undefined) {
                    this.old_group_name = data.old_group_name;
                }
            }
        }
        get reply() {
            return pb_1.Message.getWrapperField(this, QuickReplyItem, 1) as QuickReplyItem;
        }
        set reply(value: QuickReplyItem) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_reply() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get old_group_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set old_group_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            reply?: ReturnType<typeof QuickReplyItem.prototype.toObject>;
            old_group_name?: string;
        }): UpdateQuickReplyRequest {
            const message = new UpdateQuickReplyRequest({});
            if (data.reply != null) {
                message.reply = QuickReplyItem.fromObject(data.reply);
            }
            if (data.old_group_name != null) {
                message.old_group_name = data.old_group_name;
            }
            return message;
        }
        toObject() {
            const data: {
                reply?: ReturnType<typeof QuickReplyItem.prototype.toObject>;
                old_group_name?: string;
            } = {};
            if (this.reply != null) {
                data.reply = this.reply.toObject();
            }
            if (this.old_group_name != null) {
                data.old_group_name = this.old_group_name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_reply)
                writer.writeMessage(1, this.reply, () => this.reply.serialize(writer));
            if (this.old_group_name.length)
                writer.writeString(2, this.old_group_name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateQuickReplyRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateQuickReplyRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.reply, () => message.reply = QuickReplyItem.deserialize(reader));
                        break;
                    case 2:
                        message.old_group_name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateQuickReplyRequest {
            return UpdateQuickReplyRequest.deserialize(bytes);
        }
    }
    export class DQuickReply extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            id?: number;
            name?: string;
        }): DQuickReply {
            const message = new DQuickReply({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                name?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt64(1, this.id);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DQuickReply {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DQuickReply();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt64();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DQuickReply {
            return DQuickReply.deserialize(bytes);
        }
    }
    export class DeleteQuickReplyRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            items?: DQuickReply[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("items" in data && data.items != undefined) {
                    this.items = data.items;
                }
            }
        }
        get items() {
            return pb_1.Message.getRepeatedWrapperField(this, DQuickReply, 1) as DQuickReply[];
        }
        set items(value: DQuickReply[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            items?: ReturnType<typeof DQuickReply.prototype.toObject>[];
        }): DeleteQuickReplyRequest {
            const message = new DeleteQuickReplyRequest({});
            if (data.items != null) {
                message.items = data.items.map(item => DQuickReply.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                items?: ReturnType<typeof DQuickReply.prototype.toObject>[];
            } = {};
            if (this.items != null) {
                data.items = this.items.map((item: DQuickReply) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.items.length)
                writer.writeRepeatedMessage(1, this.items, (item: DQuickReply) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteQuickReplyRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteQuickReplyRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.items, () => pb_1.Message.addToRepeatedWrapperField(message, 1, DQuickReply.deserialize(reader), DQuickReply));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteQuickReplyRequest {
            return DeleteQuickReplyRequest.deserialize(bytes);
        }
    }
    export class PushCommonRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            quick_reply_id?: number[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("quick_reply_id" in data && data.quick_reply_id != undefined) {
                    this.quick_reply_id = data.quick_reply_id;
                }
            }
        }
        get quick_reply_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as number[];
        }
        set quick_reply_id(value: number[]) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            quick_reply_id?: number[];
        }): PushCommonRequest {
            const message = new PushCommonRequest({});
            if (data.quick_reply_id != null) {
                message.quick_reply_id = data.quick_reply_id;
            }
            return message;
        }
        toObject() {
            const data: {
                quick_reply_id?: number[];
            } = {};
            if (this.quick_reply_id != null) {
                data.quick_reply_id = this.quick_reply_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.quick_reply_id.length)
                writer.writePackedInt64(1, this.quick_reply_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PushCommonRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PushCommonRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.quick_reply_id = reader.readPackedInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PushCommonRequest {
            return PushCommonRequest.deserialize(bytes);
        }
    }
    export class PopCommonRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            quick_reply_id?: number[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("quick_reply_id" in data && data.quick_reply_id != undefined) {
                    this.quick_reply_id = data.quick_reply_id;
                }
            }
        }
        get quick_reply_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as number[];
        }
        set quick_reply_id(value: number[]) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            quick_reply_id?: number[];
        }): PopCommonRequest {
            const message = new PopCommonRequest({});
            if (data.quick_reply_id != null) {
                message.quick_reply_id = data.quick_reply_id;
            }
            return message;
        }
        toObject() {
            const data: {
                quick_reply_id?: number[];
            } = {};
            if (this.quick_reply_id != null) {
                data.quick_reply_id = this.quick_reply_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.quick_reply_id.length)
                writer.writePackedInt64(1, this.quick_reply_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PopCommonRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PopCommonRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.quick_reply_id = reader.readPackedInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PopCommonRequest {
            return PopCommonRequest.deserialize(bytes);
        }
    }
    export class QueryCommonResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            quick_reply?: QuickReplyItem[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("quick_reply" in data && data.quick_reply != undefined) {
                    this.quick_reply = data.quick_reply;
                }
            }
        }
        get quick_reply() {
            return pb_1.Message.getRepeatedWrapperField(this, QuickReplyItem, 1) as QuickReplyItem[];
        }
        set quick_reply(value: QuickReplyItem[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            quick_reply?: ReturnType<typeof QuickReplyItem.prototype.toObject>[];
        }): QueryCommonResponse {
            const message = new QueryCommonResponse({});
            if (data.quick_reply != null) {
                message.quick_reply = data.quick_reply.map(item => QuickReplyItem.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                quick_reply?: ReturnType<typeof QuickReplyItem.prototype.toObject>[];
            } = {};
            if (this.quick_reply != null) {
                data.quick_reply = this.quick_reply.map((item: QuickReplyItem) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.quick_reply.length)
                writer.writeRepeatedMessage(1, this.quick_reply, (item: QuickReplyItem) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryCommonResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryCommonResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.quick_reply, () => pb_1.Message.addToRepeatedWrapperField(message, 1, QuickReplyItem.deserialize(reader), QuickReplyItem));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryCommonResponse {
            return QueryCommonResponse.deserialize(bytes);
        }
    }
    export class QuickReplyItemGroup extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            group_name?: string;
            priority?: number;
            items?: QuickReplyItemWithRepeatName[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("group_name" in data && data.group_name != undefined) {
                    this.group_name = data.group_name;
                }
                if ("priority" in data && data.priority != undefined) {
                    this.priority = data.priority;
                }
                if ("items" in data && data.items != undefined) {
                    this.items = data.items;
                }
            }
        }
        get group_name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set group_name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get priority() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set priority(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get items() {
            return pb_1.Message.getRepeatedWrapperField(this, QuickReplyItemWithRepeatName, 3) as QuickReplyItemWithRepeatName[];
        }
        set items(value: QuickReplyItemWithRepeatName[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        static fromObject(data: {
            group_name?: string;
            priority?: number;
            items?: ReturnType<typeof QuickReplyItemWithRepeatName.prototype.toObject>[];
        }): QuickReplyItemGroup {
            const message = new QuickReplyItemGroup({});
            if (data.group_name != null) {
                message.group_name = data.group_name;
            }
            if (data.priority != null) {
                message.priority = data.priority;
            }
            if (data.items != null) {
                message.items = data.items.map(item => QuickReplyItemWithRepeatName.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                group_name?: string;
                priority?: number;
                items?: ReturnType<typeof QuickReplyItemWithRepeatName.prototype.toObject>[];
            } = {};
            if (this.group_name != null) {
                data.group_name = this.group_name;
            }
            if (this.priority != null) {
                data.priority = this.priority;
            }
            if (this.items != null) {
                data.items = this.items.map((item: QuickReplyItemWithRepeatName) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.group_name.length)
                writer.writeString(1, this.group_name);
            if (this.priority != 0)
                writer.writeInt32(2, this.priority);
            if (this.items.length)
                writer.writeRepeatedMessage(3, this.items, (item: QuickReplyItemWithRepeatName) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QuickReplyItemGroup {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QuickReplyItemGroup();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.group_name = reader.readString();
                        break;
                    case 2:
                        message.priority = reader.readInt32();
                        break;
                    case 3:
                        reader.readMessage(message.items, () => pb_1.Message.addToRepeatedWrapperField(message, 3, QuickReplyItemWithRepeatName.deserialize(reader), QuickReplyItemWithRepeatName));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QuickReplyItemGroup {
            return QuickReplyItemGroup.deserialize(bytes);
        }
    }
    export class QuickReplyItemWithRepeatName extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            name?: string;
            group_name?: string;
            priority?: number;
            content?: string;
            items?: dependency_4.api.common.Message[];
            is_custom?: boolean;
            group_id?: number;
            customer_group_name?: string;
            contents?: QuickReplyItemWithRepeatNameContents[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [6, 10], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("group_name" in data && data.group_name != undefined) {
                    this.group_name = data.group_name;
                }
                if ("priority" in data && data.priority != undefined) {
                    this.priority = data.priority;
                }
                if ("content" in data && data.content != undefined) {
                    this.content = data.content;
                }
                if ("items" in data && data.items != undefined) {
                    this.items = data.items;
                }
                if ("is_custom" in data && data.is_custom != undefined) {
                    this.is_custom = data.is_custom;
                }
                if ("group_id" in data && data.group_id != undefined) {
                    this.group_id = data.group_id;
                }
                if ("customer_group_name" in data && data.customer_group_name != undefined) {
                    this.customer_group_name = data.customer_group_name;
                }
                if ("contents" in data && data.contents != undefined) {
                    this.contents = data.contents;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get group_name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set group_name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get priority() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set priority(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get content() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set content(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get items() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_4.api.common.Message, 6) as dependency_4.api.common.Message[];
        }
        set items(value: dependency_4.api.common.Message[]) {
            pb_1.Message.setRepeatedWrapperField(this, 6, value);
        }
        get is_custom() {
            return pb_1.Message.getFieldWithDefault(this, 7, false) as boolean;
        }
        set is_custom(value: boolean) {
            pb_1.Message.setField(this, 7, value);
        }
        get group_id() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set group_id(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get customer_group_name() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set customer_group_name(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get contents() {
            return pb_1.Message.getRepeatedWrapperField(this, QuickReplyItemWithRepeatNameContents, 10) as QuickReplyItemWithRepeatNameContents[];
        }
        set contents(value: QuickReplyItemWithRepeatNameContents[]) {
            pb_1.Message.setRepeatedWrapperField(this, 10, value);
        }
        static fromObject(data: {
            id?: number;
            name?: string;
            group_name?: string;
            priority?: number;
            content?: string;
            items?: ReturnType<typeof dependency_4.api.common.Message.prototype.toObject>[];
            is_custom?: boolean;
            group_id?: number;
            customer_group_name?: string;
            contents?: ReturnType<typeof QuickReplyItemWithRepeatNameContents.prototype.toObject>[];
        }): QuickReplyItemWithRepeatName {
            const message = new QuickReplyItemWithRepeatName({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.group_name != null) {
                message.group_name = data.group_name;
            }
            if (data.priority != null) {
                message.priority = data.priority;
            }
            if (data.content != null) {
                message.content = data.content;
            }
            if (data.items != null) {
                message.items = data.items.map(item => dependency_4.api.common.Message.fromObject(item));
            }
            if (data.is_custom != null) {
                message.is_custom = data.is_custom;
            }
            if (data.group_id != null) {
                message.group_id = data.group_id;
            }
            if (data.customer_group_name != null) {
                message.customer_group_name = data.customer_group_name;
            }
            if (data.contents != null) {
                message.contents = data.contents.map(item => QuickReplyItemWithRepeatNameContents.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                name?: string;
                group_name?: string;
                priority?: number;
                content?: string;
                items?: ReturnType<typeof dependency_4.api.common.Message.prototype.toObject>[];
                is_custom?: boolean;
                group_id?: number;
                customer_group_name?: string;
                contents?: ReturnType<typeof QuickReplyItemWithRepeatNameContents.prototype.toObject>[];
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.group_name != null) {
                data.group_name = this.group_name;
            }
            if (this.priority != null) {
                data.priority = this.priority;
            }
            if (this.content != null) {
                data.content = this.content;
            }
            if (this.items != null) {
                data.items = this.items.map((item: dependency_4.api.common.Message) => item.toObject());
            }
            if (this.is_custom != null) {
                data.is_custom = this.is_custom;
            }
            if (this.group_id != null) {
                data.group_id = this.group_id;
            }
            if (this.customer_group_name != null) {
                data.customer_group_name = this.customer_group_name;
            }
            if (this.contents != null) {
                data.contents = this.contents.map((item: QuickReplyItemWithRepeatNameContents) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt64(1, this.id);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.group_name.length)
                writer.writeString(3, this.group_name);
            if (this.priority != 0)
                writer.writeInt32(4, this.priority);
            if (this.content.length)
                writer.writeString(5, this.content);
            if (this.items.length)
                writer.writeRepeatedMessage(6, this.items, (item: dependency_4.api.common.Message) => item.serialize(writer));
            if (this.is_custom != false)
                writer.writeBool(7, this.is_custom);
            if (this.group_id != 0)
                writer.writeInt64(8, this.group_id);
            if (this.customer_group_name.length)
                writer.writeString(9, this.customer_group_name);
            if (this.contents.length)
                writer.writeRepeatedMessage(10, this.contents, (item: QuickReplyItemWithRepeatNameContents) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QuickReplyItemWithRepeatName {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QuickReplyItemWithRepeatName();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt64();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.group_name = reader.readString();
                        break;
                    case 4:
                        message.priority = reader.readInt32();
                        break;
                    case 5:
                        message.content = reader.readString();
                        break;
                    case 6:
                        reader.readMessage(message.items, () => pb_1.Message.addToRepeatedWrapperField(message, 6, dependency_4.api.common.Message.deserialize(reader), dependency_4.api.common.Message));
                        break;
                    case 7:
                        message.is_custom = reader.readBool();
                        break;
                    case 8:
                        message.group_id = reader.readInt64();
                        break;
                    case 9:
                        message.customer_group_name = reader.readString();
                        break;
                    case 10:
                        reader.readMessage(message.contents, () => pb_1.Message.addToRepeatedWrapperField(message, 10, QuickReplyItemWithRepeatNameContents.deserialize(reader), QuickReplyItemWithRepeatNameContents));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QuickReplyItemWithRepeatName {
            return QuickReplyItemWithRepeatName.deserialize(bytes);
        }
    }
    export class QuickReplyItemWithRepeatNameContents extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            content?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("content" in data && data.content != undefined) {
                    this.content = data.content;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get content() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set content(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            id?: number;
            content?: string;
        }): QuickReplyItemWithRepeatNameContents {
            const message = new QuickReplyItemWithRepeatNameContents({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.content != null) {
                message.content = data.content;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                content?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.content != null) {
                data.content = this.content;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt64(1, this.id);
            if (this.content.length)
                writer.writeString(2, this.content);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QuickReplyItemWithRepeatNameContents {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QuickReplyItemWithRepeatNameContents();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt64();
                        break;
                    case 2:
                        message.content = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QuickReplyItemWithRepeatNameContents {
            return QuickReplyItemWithRepeatNameContents.deserialize(bytes);
        }
    }
    export class QueryByWorkerRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            batch?: dependency_5.api.common.Batch;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("batch" in data && data.batch != undefined) {
                    this.batch = data.batch;
                }
            }
        }
        get batch() {
            return pb_1.Message.getWrapperField(this, dependency_5.api.common.Batch, 3) as dependency_5.api.common.Batch;
        }
        set batch(value: dependency_5.api.common.Batch) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_batch() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            batch?: ReturnType<typeof dependency_5.api.common.Batch.prototype.toObject>;
        }): QueryByWorkerRequest {
            const message = new QueryByWorkerRequest({});
            if (data.batch != null) {
                message.batch = dependency_5.api.common.Batch.fromObject(data.batch);
            }
            return message;
        }
        toObject() {
            const data: {
                batch?: ReturnType<typeof dependency_5.api.common.Batch.prototype.toObject>;
            } = {};
            if (this.batch != null) {
                data.batch = this.batch.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_batch)
                writer.writeMessage(3, this.batch, () => this.batch.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryByWorkerRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryByWorkerRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 3:
                        reader.readMessage(message.batch, () => message.batch = dependency_5.api.common.Batch.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryByWorkerRequest {
            return QueryByWorkerRequest.deserialize(bytes);
        }
    }
    export class QueryByWorkerResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            group?: QuickReplyItemGroup[];
            total?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("group" in data && data.group != undefined) {
                    this.group = data.group;
                }
                if ("total" in data && data.total != undefined) {
                    this.total = data.total;
                }
            }
        }
        get group() {
            return pb_1.Message.getRepeatedWrapperField(this, QuickReplyItemGroup, 1) as QuickReplyItemGroup[];
        }
        set group(value: QuickReplyItemGroup[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get total() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set total(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            group?: ReturnType<typeof QuickReplyItemGroup.prototype.toObject>[];
            total?: number;
        }): QueryByWorkerResponse {
            const message = new QueryByWorkerResponse({});
            if (data.group != null) {
                message.group = data.group.map(item => QuickReplyItemGroup.fromObject(item));
            }
            if (data.total != null) {
                message.total = data.total;
            }
            return message;
        }
        toObject() {
            const data: {
                group?: ReturnType<typeof QuickReplyItemGroup.prototype.toObject>[];
                total?: number;
            } = {};
            if (this.group != null) {
                data.group = this.group.map((item: QuickReplyItemGroup) => item.toObject());
            }
            if (this.total != null) {
                data.total = this.total;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.group.length)
                writer.writeRepeatedMessage(1, this.group, (item: QuickReplyItemGroup) => item.serialize(writer));
            if (this.total != 0)
                writer.writeInt32(2, this.total);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryByWorkerResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryByWorkerResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.group, () => pb_1.Message.addToRepeatedWrapperField(message, 1, QuickReplyItemGroup.deserialize(reader), QuickReplyItemGroup));
                        break;
                    case 2:
                        message.total = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryByWorkerResponse {
            return QueryByWorkerResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedQuickReplyService {
        static definition = {
            QueryGroup: {
                path: "/api.core.QuickReply/QueryGroup",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QuickReplyGroupQueryResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QuickReplyGroupQueryResponse.deserialize(new Uint8Array(bytes))
            },
            CreateGroup: {
                path: "/api.core.QuickReply/CreateGroup",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QuickReplyGroupCreateRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QuickReplyGroupCreateRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            UpdateGroup: {
                path: "/api.core.QuickReply/UpdateGroup",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QuickReplyGroupUpdateRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QuickReplyGroupUpdateRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            DeleteGroup: {
                path: "/api.core.QuickReply/DeleteGroup",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QuickReplyGroupDeleteRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QuickReplyGroupDeleteRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            QueryReply: {
                path: "/api.core.QuickReply/QueryReply",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QuickReplyGroupQueryRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QuickReplyGroupQueryRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QuickReplyQueryResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QuickReplyQueryResponse.deserialize(new Uint8Array(bytes))
            },
            CreateReply: {
                path: "/api.core.QuickReply/CreateReply",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateQuickReplyRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateQuickReplyRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CreateQuickReplyResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CreateQuickReplyResponse.deserialize(new Uint8Array(bytes))
            },
            CreateReplyV1: {
                path: "/api.core.QuickReply/CreateReplyV1",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateQuickReplyRequestV1) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateQuickReplyRequestV1.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CreateQuickReplyResponseV1) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CreateQuickReplyResponseV1.deserialize(new Uint8Array(bytes))
            },
            UpdateReply: {
                path: "/api.core.QuickReply/UpdateReply",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdateQuickReplyRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdateQuickReplyRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            DeleteReply: {
                path: "/api.core.QuickReply/DeleteReply",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DeleteQuickReplyRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DeleteQuickReplyRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            InitGroup: {
                path: "/api.core.QuickReply/InitGroup",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            PushCommon: {
                path: "/api.core.QuickReply/PushCommon",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: PushCommonRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => PushCommonRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            PopCommon: {
                path: "/api.core.QuickReply/PopCommon",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: PopCommonRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => PopCommonRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            QueryCommon: {
                path: "/api.core.QuickReply/QueryCommon",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryCommonResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryCommonResponse.deserialize(new Uint8Array(bytes))
            },
            QueryByWorker: {
                path: "/api.core.QuickReply/QueryByWorker",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryByWorkerRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryByWorkerRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryByWorkerResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryByWorkerResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract QueryGroup(call: grpc_1.ServerUnaryCall<dependency_2.google.protobuf.Empty, QuickReplyGroupQueryResponse>, callback: grpc_1.sendUnaryData<QuickReplyGroupQueryResponse>): void;
        abstract CreateGroup(call: grpc_1.ServerUnaryCall<QuickReplyGroupCreateRequest, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
        abstract UpdateGroup(call: grpc_1.ServerUnaryCall<QuickReplyGroupUpdateRequest, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
        abstract DeleteGroup(call: grpc_1.ServerUnaryCall<QuickReplyGroupDeleteRequest, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
        abstract QueryReply(call: grpc_1.ServerUnaryCall<QuickReplyGroupQueryRequest, QuickReplyQueryResponse>, callback: grpc_1.sendUnaryData<QuickReplyQueryResponse>): void;
        abstract CreateReply(call: grpc_1.ServerUnaryCall<CreateQuickReplyRequest, CreateQuickReplyResponse>, callback: grpc_1.sendUnaryData<CreateQuickReplyResponse>): void;
        abstract CreateReplyV1(call: grpc_1.ServerUnaryCall<CreateQuickReplyRequestV1, CreateQuickReplyResponseV1>, callback: grpc_1.sendUnaryData<CreateQuickReplyResponseV1>): void;
        abstract UpdateReply(call: grpc_1.ServerUnaryCall<UpdateQuickReplyRequest, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
        abstract DeleteReply(call: grpc_1.ServerUnaryCall<DeleteQuickReplyRequest, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
        abstract InitGroup(call: grpc_1.ServerUnaryCall<dependency_2.google.protobuf.Empty, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
        abstract PushCommon(call: grpc_1.ServerUnaryCall<PushCommonRequest, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
        abstract PopCommon(call: grpc_1.ServerUnaryCall<PopCommonRequest, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
        abstract QueryCommon(call: grpc_1.ServerUnaryCall<dependency_2.google.protobuf.Empty, QueryCommonResponse>, callback: grpc_1.sendUnaryData<QueryCommonResponse>): void;
        abstract QueryByWorker(call: grpc_1.ServerUnaryCall<QueryByWorkerRequest, QueryByWorkerResponse>, callback: grpc_1.sendUnaryData<QueryByWorkerResponse>): void;
    }
    export class QuickReplyClient extends grpc_1.makeGenericClientConstructor(UnimplementedQuickReplyService.definition, "QuickReply", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        QueryGroup: GrpcUnaryServiceInterface<dependency_2.google.protobuf.Empty, QuickReplyGroupQueryResponse> = (message: dependency_2.google.protobuf.Empty, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QuickReplyGroupQueryResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QuickReplyGroupQueryResponse>, callback?: grpc_1.requestCallback<QuickReplyGroupQueryResponse>): grpc_1.ClientUnaryCall => {
            return super.QueryGroup(message, metadata, options, callback);
        };
        CreateGroup: GrpcUnaryServiceInterface<QuickReplyGroupCreateRequest, dependency_2.google.protobuf.Empty> = (message: QuickReplyGroupCreateRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_2.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.CreateGroup(message, metadata, options, callback);
        };
        UpdateGroup: GrpcUnaryServiceInterface<QuickReplyGroupUpdateRequest, dependency_2.google.protobuf.Empty> = (message: QuickReplyGroupUpdateRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_2.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.UpdateGroup(message, metadata, options, callback);
        };
        DeleteGroup: GrpcUnaryServiceInterface<QuickReplyGroupDeleteRequest, dependency_2.google.protobuf.Empty> = (message: QuickReplyGroupDeleteRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_2.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.DeleteGroup(message, metadata, options, callback);
        };
        QueryReply: GrpcUnaryServiceInterface<QuickReplyGroupQueryRequest, QuickReplyQueryResponse> = (message: QuickReplyGroupQueryRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QuickReplyQueryResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QuickReplyQueryResponse>, callback?: grpc_1.requestCallback<QuickReplyQueryResponse>): grpc_1.ClientUnaryCall => {
            return super.QueryReply(message, metadata, options, callback);
        };
        CreateReply: GrpcUnaryServiceInterface<CreateQuickReplyRequest, CreateQuickReplyResponse> = (message: CreateQuickReplyRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CreateQuickReplyResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CreateQuickReplyResponse>, callback?: grpc_1.requestCallback<CreateQuickReplyResponse>): grpc_1.ClientUnaryCall => {
            return super.CreateReply(message, metadata, options, callback);
        };
        CreateReplyV1: GrpcUnaryServiceInterface<CreateQuickReplyRequestV1, CreateQuickReplyResponseV1> = (message: CreateQuickReplyRequestV1, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CreateQuickReplyResponseV1>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CreateQuickReplyResponseV1>, callback?: grpc_1.requestCallback<CreateQuickReplyResponseV1>): grpc_1.ClientUnaryCall => {
            return super.CreateReplyV1(message, metadata, options, callback);
        };
        UpdateReply: GrpcUnaryServiceInterface<UpdateQuickReplyRequest, dependency_2.google.protobuf.Empty> = (message: UpdateQuickReplyRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_2.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.UpdateReply(message, metadata, options, callback);
        };
        DeleteReply: GrpcUnaryServiceInterface<DeleteQuickReplyRequest, dependency_2.google.protobuf.Empty> = (message: DeleteQuickReplyRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_2.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.DeleteReply(message, metadata, options, callback);
        };
        InitGroup: GrpcUnaryServiceInterface<dependency_2.google.protobuf.Empty, dependency_2.google.protobuf.Empty> = (message: dependency_2.google.protobuf.Empty, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_2.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.InitGroup(message, metadata, options, callback);
        };
        PushCommon: GrpcUnaryServiceInterface<PushCommonRequest, dependency_2.google.protobuf.Empty> = (message: PushCommonRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_2.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.PushCommon(message, metadata, options, callback);
        };
        PopCommon: GrpcUnaryServiceInterface<PopCommonRequest, dependency_2.google.protobuf.Empty> = (message: PopCommonRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_2.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.PopCommon(message, metadata, options, callback);
        };
        QueryCommon: GrpcUnaryServiceInterface<dependency_2.google.protobuf.Empty, QueryCommonResponse> = (message: dependency_2.google.protobuf.Empty, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryCommonResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryCommonResponse>, callback?: grpc_1.requestCallback<QueryCommonResponse>): grpc_1.ClientUnaryCall => {
            return super.QueryCommon(message, metadata, options, callback);
        };
        QueryByWorker: GrpcUnaryServiceInterface<QueryByWorkerRequest, QueryByWorkerResponse> = (message: QueryByWorkerRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryByWorkerResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryByWorkerResponse>, callback?: grpc_1.requestCallback<QueryByWorkerResponse>): grpc_1.ClientUnaryCall => {
            return super.QueryByWorker(message, metadata, options, callback);
        };
    }
}
