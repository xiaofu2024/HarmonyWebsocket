/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.26.1
 * source: api/core/consult.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../option";
import * as dependency_2 from "./../../google/protobuf/empty";
import * as dependency_3 from "./../../validate/validate";
import * as dependency_4 from "./../common/c_entrance";
import * as dependency_5 from "./../common/c_reply";
import * as dependency_6 from "./../common/c_base";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace api.core {
    export enum EntranceBindStatus {
        DEFAULT = 0,
        UNBIND = 1,
        BINDED = 2
    }
    export class QueryConsultRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            entrance_id?: number;
            bind_status?: EntranceBindStatus;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("entrance_id" in data && data.entrance_id != undefined) {
                    this.entrance_id = data.entrance_id;
                }
                if ("bind_status" in data && data.bind_status != undefined) {
                    this.bind_status = data.bind_status;
                }
            }
        }
        get entrance_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set entrance_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get bind_status() {
            return pb_1.Message.getFieldWithDefault(this, 2, EntranceBindStatus.DEFAULT) as EntranceBindStatus;
        }
        set bind_status(value: EntranceBindStatus) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            entrance_id?: number;
            bind_status?: EntranceBindStatus;
        }): QueryConsultRequest {
            const message = new QueryConsultRequest({});
            if (data.entrance_id != null) {
                message.entrance_id = data.entrance_id;
            }
            if (data.bind_status != null) {
                message.bind_status = data.bind_status;
            }
            return message;
        }
        toObject() {
            const data: {
                entrance_id?: number;
                bind_status?: EntranceBindStatus;
            } = {};
            if (this.entrance_id != null) {
                data.entrance_id = this.entrance_id;
            }
            if (this.bind_status != null) {
                data.bind_status = this.bind_status;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.entrance_id != 0)
                writer.writeInt32(1, this.entrance_id);
            if (this.bind_status != EntranceBindStatus.DEFAULT)
                writer.writeEnum(2, this.bind_status);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryConsultRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryConsultRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.entrance_id = reader.readInt32();
                        break;
                    case 2:
                        message.bind_status = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryConsultRequest {
            return QueryConsultRequest.deserialize(bytes);
        }
    }
    export class QueryConsultResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            consultArr?: dependency_4.api.common.Consult[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("consultArr" in data && data.consultArr != undefined) {
                    this.consultArr = data.consultArr;
                }
            }
        }
        get consultArr() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_4.api.common.Consult, 1) as dependency_4.api.common.Consult[];
        }
        set consultArr(value: dependency_4.api.common.Consult[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            consultArr?: ReturnType<typeof dependency_4.api.common.Consult.prototype.toObject>[];
        }): QueryConsultResponse {
            const message = new QueryConsultResponse({});
            if (data.consultArr != null) {
                message.consultArr = data.consultArr.map(item => dependency_4.api.common.Consult.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                consultArr?: ReturnType<typeof dependency_4.api.common.Consult.prototype.toObject>[];
            } = {};
            if (this.consultArr != null) {
                data.consultArr = this.consultArr.map((item: dependency_4.api.common.Consult) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.consultArr.length)
                writer.writeRepeatedMessage(1, this.consultArr, (item: dependency_4.api.common.Consult) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryConsultResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryConsultResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.consultArr, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_4.api.common.Consult.deserialize(reader), dependency_4.api.common.Consult));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryConsultResponse {
            return QueryConsultResponse.deserialize(bytes);
        }
    }
    export class CreateConsultRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            consult?: dependency_4.api.common.Consult;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("consult" in data && data.consult != undefined) {
                    this.consult = data.consult;
                }
            }
        }
        get consult() {
            return pb_1.Message.getWrapperField(this, dependency_4.api.common.Consult, 1) as dependency_4.api.common.Consult;
        }
        set consult(value: dependency_4.api.common.Consult) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_consult() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            consult?: ReturnType<typeof dependency_4.api.common.Consult.prototype.toObject>;
        }): CreateConsultRequest {
            const message = new CreateConsultRequest({});
            if (data.consult != null) {
                message.consult = dependency_4.api.common.Consult.fromObject(data.consult);
            }
            return message;
        }
        toObject() {
            const data: {
                consult?: ReturnType<typeof dependency_4.api.common.Consult.prototype.toObject>;
            } = {};
            if (this.consult != null) {
                data.consult = this.consult.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_consult)
                writer.writeMessage(1, this.consult, () => this.consult.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateConsultRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateConsultRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.consult, () => message.consult = dependency_4.api.common.Consult.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateConsultRequest {
            return CreateConsultRequest.deserialize(bytes);
        }
    }
    export class CreateConsultResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            id?: number;
        }): CreateConsultResponse {
            const message = new CreateConsultResponse({});
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeUint32(1, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateConsultResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateConsultResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateConsultResponse {
            return CreateConsultResponse.deserialize(bytes);
        }
    }
    export class UpdateConsultRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            consult?: dependency_4.api.common.Consult;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("consult" in data && data.consult != undefined) {
                    this.consult = data.consult;
                }
            }
        }
        get consult() {
            return pb_1.Message.getWrapperField(this, dependency_4.api.common.Consult, 1) as dependency_4.api.common.Consult;
        }
        set consult(value: dependency_4.api.common.Consult) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_consult() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            consult?: ReturnType<typeof dependency_4.api.common.Consult.prototype.toObject>;
        }): UpdateConsultRequest {
            const message = new UpdateConsultRequest({});
            if (data.consult != null) {
                message.consult = dependency_4.api.common.Consult.fromObject(data.consult);
            }
            return message;
        }
        toObject() {
            const data: {
                consult?: ReturnType<typeof dependency_4.api.common.Consult.prototype.toObject>;
            } = {};
            if (this.consult != null) {
                data.consult = this.consult.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_consult)
                writer.writeMessage(1, this.consult, () => this.consult.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateConsultRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateConsultRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.consult, () => message.consult = dependency_4.api.common.Consult.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateConsultRequest {
            return UpdateConsultRequest.deserialize(bytes);
        }
    }
    export class DeleteConsultRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            id?: number;
        }): DeleteConsultRequest {
            const message = new DeleteConsultRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeUint32(1, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteConsultRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteConsultRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteConsultRequest {
            return DeleteConsultRequest.deserialize(bytes);
        }
    }
    export class DisableConsultRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            disable_status?: dependency_6.api.common.DisableStatus;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("disable_status" in data && data.disable_status != undefined) {
                    this.disable_status = data.disable_status;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get disable_status() {
            return pb_1.Message.getFieldWithDefault(this, 2, dependency_6.api.common.DisableStatus.DEFAULT) as dependency_6.api.common.DisableStatus;
        }
        set disable_status(value: dependency_6.api.common.DisableStatus) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            id?: number;
            disable_status?: dependency_6.api.common.DisableStatus;
        }): DisableConsultRequest {
            const message = new DisableConsultRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.disable_status != null) {
                message.disable_status = data.disable_status;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                disable_status?: dependency_6.api.common.DisableStatus;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.disable_status != null) {
                data.disable_status = this.disable_status;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeUint32(1, this.id);
            if (this.disable_status != dependency_6.api.common.DisableStatus.DEFAULT)
                writer.writeEnum(2, this.disable_status);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DisableConsultRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DisableConsultRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readUint32();
                        break;
                    case 2:
                        message.disable_status = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DisableConsultRequest {
            return DisableConsultRequest.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedConsultService {
        static definition = {
            QueryConsult: {
                path: "/api.core.Consult/QueryConsult",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryConsultRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryConsultRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryConsultResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryConsultResponse.deserialize(new Uint8Array(bytes))
            },
            CreateConsult: {
                path: "/api.core.Consult/CreateConsult",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateConsultRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateConsultRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CreateConsultResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CreateConsultResponse.deserialize(new Uint8Array(bytes))
            },
            UpdateConsult: {
                path: "/api.core.Consult/UpdateConsult",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdateConsultRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdateConsultRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            DeleteConsult: {
                path: "/api.core.Consult/DeleteConsult",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DeleteConsultRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DeleteConsultRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            DisableConsult: {
                path: "/api.core.Consult/DisableConsult",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DisableConsultRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DisableConsultRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract QueryConsult(call: grpc_1.ServerUnaryCall<QueryConsultRequest, QueryConsultResponse>, callback: grpc_1.sendUnaryData<QueryConsultResponse>): void;
        abstract CreateConsult(call: grpc_1.ServerUnaryCall<CreateConsultRequest, CreateConsultResponse>, callback: grpc_1.sendUnaryData<CreateConsultResponse>): void;
        abstract UpdateConsult(call: grpc_1.ServerUnaryCall<UpdateConsultRequest, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
        abstract DeleteConsult(call: grpc_1.ServerUnaryCall<DeleteConsultRequest, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
        abstract DisableConsult(call: grpc_1.ServerUnaryCall<DisableConsultRequest, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
    }
    export class ConsultClient extends grpc_1.makeGenericClientConstructor(UnimplementedConsultService.definition, "Consult", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        QueryConsult: GrpcUnaryServiceInterface<QueryConsultRequest, QueryConsultResponse> = (message: QueryConsultRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryConsultResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryConsultResponse>, callback?: grpc_1.requestCallback<QueryConsultResponse>): grpc_1.ClientUnaryCall => {
            return super.QueryConsult(message, metadata, options, callback);
        };
        CreateConsult: GrpcUnaryServiceInterface<CreateConsultRequest, CreateConsultResponse> = (message: CreateConsultRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CreateConsultResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CreateConsultResponse>, callback?: grpc_1.requestCallback<CreateConsultResponse>): grpc_1.ClientUnaryCall => {
            return super.CreateConsult(message, metadata, options, callback);
        };
        UpdateConsult: GrpcUnaryServiceInterface<UpdateConsultRequest, dependency_2.google.protobuf.Empty> = (message: UpdateConsultRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_2.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.UpdateConsult(message, metadata, options, callback);
        };
        DeleteConsult: GrpcUnaryServiceInterface<DeleteConsultRequest, dependency_2.google.protobuf.Empty> = (message: DeleteConsultRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_2.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.DeleteConsult(message, metadata, options, callback);
        };
        DisableConsult: GrpcUnaryServiceInterface<DisableConsultRequest, dependency_2.google.protobuf.Empty> = (message: DisableConsultRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_2.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.DisableConsult(message, metadata, options, callback);
        };
    }
}
