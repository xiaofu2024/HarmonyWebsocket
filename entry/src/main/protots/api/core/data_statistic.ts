/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.26.1
 * source: api/core/data_statistic.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../option";
import * as dependency_2 from "./../../google/protobuf/empty";
import * as dependency_3 from "./../../validate/validate";
import * as dependency_4 from "./../common/c_worker";
import * as dependency_5 from "./../../google/protobuf/timestamp";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace api.core {
    export class WorkerStatisticsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            group_id?: number;
            worker_identity?: dependency_4.api.common.WorkerPermission;
            start_time?: number;
            end_time?: number;
            page?: number;
            pageSize?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("group_id" in data && data.group_id != undefined) {
                    this.group_id = data.group_id;
                }
                if ("worker_identity" in data && data.worker_identity != undefined) {
                    this.worker_identity = data.worker_identity;
                }
                if ("start_time" in data && data.start_time != undefined) {
                    this.start_time = data.start_time;
                }
                if ("end_time" in data && data.end_time != undefined) {
                    this.end_time = data.end_time;
                }
                if ("page" in data && data.page != undefined) {
                    this.page = data.page;
                }
                if ("pageSize" in data && data.pageSize != undefined) {
                    this.pageSize = data.pageSize;
                }
            }
        }
        get group_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set group_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get worker_identity() {
            return pb_1.Message.getFieldWithDefault(this, 3, dependency_4.api.common.WorkerPermission.WORKER_PERM_NONE) as dependency_4.api.common.WorkerPermission;
        }
        set worker_identity(value: dependency_4.api.common.WorkerPermission) {
            pb_1.Message.setField(this, 3, value);
        }
        get start_time() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set start_time(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get end_time() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set end_time(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get page() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set page(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get pageSize() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set pageSize(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            group_id?: number;
            worker_identity?: dependency_4.api.common.WorkerPermission;
            start_time?: number;
            end_time?: number;
            page?: number;
            pageSize?: number;
        }): WorkerStatisticsRequest {
            const message = new WorkerStatisticsRequest({});
            if (data.group_id != null) {
                message.group_id = data.group_id;
            }
            if (data.worker_identity != null) {
                message.worker_identity = data.worker_identity;
            }
            if (data.start_time != null) {
                message.start_time = data.start_time;
            }
            if (data.end_time != null) {
                message.end_time = data.end_time;
            }
            if (data.page != null) {
                message.page = data.page;
            }
            if (data.pageSize != null) {
                message.pageSize = data.pageSize;
            }
            return message;
        }
        toObject() {
            const data: {
                group_id?: number;
                worker_identity?: dependency_4.api.common.WorkerPermission;
                start_time?: number;
                end_time?: number;
                page?: number;
                pageSize?: number;
            } = {};
            if (this.group_id != null) {
                data.group_id = this.group_id;
            }
            if (this.worker_identity != null) {
                data.worker_identity = this.worker_identity;
            }
            if (this.start_time != null) {
                data.start_time = this.start_time;
            }
            if (this.end_time != null) {
                data.end_time = this.end_time;
            }
            if (this.page != null) {
                data.page = this.page;
            }
            if (this.pageSize != null) {
                data.pageSize = this.pageSize;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.group_id != 0)
                writer.writeInt32(1, this.group_id);
            if (this.worker_identity != dependency_4.api.common.WorkerPermission.WORKER_PERM_NONE)
                writer.writeEnum(3, this.worker_identity);
            if (this.start_time != 0)
                writer.writeInt64(4, this.start_time);
            if (this.end_time != 0)
                writer.writeInt64(5, this.end_time);
            if (this.page != 0)
                writer.writeUint32(6, this.page);
            if (this.pageSize != 0)
                writer.writeUint32(7, this.pageSize);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WorkerStatisticsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WorkerStatisticsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.group_id = reader.readInt32();
                        break;
                    case 3:
                        message.worker_identity = reader.readEnum();
                        break;
                    case 4:
                        message.start_time = reader.readInt64();
                        break;
                    case 5:
                        message.end_time = reader.readInt64();
                        break;
                    case 6:
                        message.page = reader.readUint32();
                        break;
                    case 7:
                        message.pageSize = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WorkerStatisticsRequest {
            return WorkerStatisticsRequest.deserialize(bytes);
        }
    }
    export class WorkerStatisticsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            worker_max_num?: number;
            worker_current_num?: number;
            user_count?: number;
            reply_rate?: number;
            response_duration?: string;
            server_duration?: string;
            online_duration?: string;
            transfer_task_num?: number;
            receive_task_num?: number;
            statistics?: WorkerStatistic[];
            count?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [10], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("worker_max_num" in data && data.worker_max_num != undefined) {
                    this.worker_max_num = data.worker_max_num;
                }
                if ("worker_current_num" in data && data.worker_current_num != undefined) {
                    this.worker_current_num = data.worker_current_num;
                }
                if ("user_count" in data && data.user_count != undefined) {
                    this.user_count = data.user_count;
                }
                if ("reply_rate" in data && data.reply_rate != undefined) {
                    this.reply_rate = data.reply_rate;
                }
                if ("response_duration" in data && data.response_duration != undefined) {
                    this.response_duration = data.response_duration;
                }
                if ("server_duration" in data && data.server_duration != undefined) {
                    this.server_duration = data.server_duration;
                }
                if ("online_duration" in data && data.online_duration != undefined) {
                    this.online_duration = data.online_duration;
                }
                if ("transfer_task_num" in data && data.transfer_task_num != undefined) {
                    this.transfer_task_num = data.transfer_task_num;
                }
                if ("receive_task_num" in data && data.receive_task_num != undefined) {
                    this.receive_task_num = data.receive_task_num;
                }
                if ("statistics" in data && data.statistics != undefined) {
                    this.statistics = data.statistics;
                }
                if ("count" in data && data.count != undefined) {
                    this.count = data.count;
                }
            }
        }
        get worker_max_num() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set worker_max_num(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get worker_current_num() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set worker_current_num(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get user_count() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set user_count(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get reply_rate() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set reply_rate(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get response_duration() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set response_duration(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get server_duration() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set server_duration(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get online_duration() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set online_duration(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get transfer_task_num() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set transfer_task_num(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get receive_task_num() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set receive_task_num(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get statistics() {
            return pb_1.Message.getRepeatedWrapperField(this, WorkerStatistic, 10) as WorkerStatistic[];
        }
        set statistics(value: WorkerStatistic[]) {
            pb_1.Message.setRepeatedWrapperField(this, 10, value);
        }
        get count() {
            return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
        }
        set count(value: number) {
            pb_1.Message.setField(this, 11, value);
        }
        static fromObject(data: {
            worker_max_num?: number;
            worker_current_num?: number;
            user_count?: number;
            reply_rate?: number;
            response_duration?: string;
            server_duration?: string;
            online_duration?: string;
            transfer_task_num?: number;
            receive_task_num?: number;
            statistics?: ReturnType<typeof WorkerStatistic.prototype.toObject>[];
            count?: number;
        }): WorkerStatisticsResponse {
            const message = new WorkerStatisticsResponse({});
            if (data.worker_max_num != null) {
                message.worker_max_num = data.worker_max_num;
            }
            if (data.worker_current_num != null) {
                message.worker_current_num = data.worker_current_num;
            }
            if (data.user_count != null) {
                message.user_count = data.user_count;
            }
            if (data.reply_rate != null) {
                message.reply_rate = data.reply_rate;
            }
            if (data.response_duration != null) {
                message.response_duration = data.response_duration;
            }
            if (data.server_duration != null) {
                message.server_duration = data.server_duration;
            }
            if (data.online_duration != null) {
                message.online_duration = data.online_duration;
            }
            if (data.transfer_task_num != null) {
                message.transfer_task_num = data.transfer_task_num;
            }
            if (data.receive_task_num != null) {
                message.receive_task_num = data.receive_task_num;
            }
            if (data.statistics != null) {
                message.statistics = data.statistics.map(item => WorkerStatistic.fromObject(item));
            }
            if (data.count != null) {
                message.count = data.count;
            }
            return message;
        }
        toObject() {
            const data: {
                worker_max_num?: number;
                worker_current_num?: number;
                user_count?: number;
                reply_rate?: number;
                response_duration?: string;
                server_duration?: string;
                online_duration?: string;
                transfer_task_num?: number;
                receive_task_num?: number;
                statistics?: ReturnType<typeof WorkerStatistic.prototype.toObject>[];
                count?: number;
            } = {};
            if (this.worker_max_num != null) {
                data.worker_max_num = this.worker_max_num;
            }
            if (this.worker_current_num != null) {
                data.worker_current_num = this.worker_current_num;
            }
            if (this.user_count != null) {
                data.user_count = this.user_count;
            }
            if (this.reply_rate != null) {
                data.reply_rate = this.reply_rate;
            }
            if (this.response_duration != null) {
                data.response_duration = this.response_duration;
            }
            if (this.server_duration != null) {
                data.server_duration = this.server_duration;
            }
            if (this.online_duration != null) {
                data.online_duration = this.online_duration;
            }
            if (this.transfer_task_num != null) {
                data.transfer_task_num = this.transfer_task_num;
            }
            if (this.receive_task_num != null) {
                data.receive_task_num = this.receive_task_num;
            }
            if (this.statistics != null) {
                data.statistics = this.statistics.map((item: WorkerStatistic) => item.toObject());
            }
            if (this.count != null) {
                data.count = this.count;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.worker_max_num != 0)
                writer.writeInt32(1, this.worker_max_num);
            if (this.worker_current_num != 0)
                writer.writeInt32(2, this.worker_current_num);
            if (this.user_count != 0)
                writer.writeInt32(3, this.user_count);
            if (this.reply_rate != 0)
                writer.writeFloat(4, this.reply_rate);
            if (this.response_duration.length)
                writer.writeString(5, this.response_duration);
            if (this.server_duration.length)
                writer.writeString(6, this.server_duration);
            if (this.online_duration.length)
                writer.writeString(7, this.online_duration);
            if (this.transfer_task_num != 0)
                writer.writeInt32(8, this.transfer_task_num);
            if (this.receive_task_num != 0)
                writer.writeInt32(9, this.receive_task_num);
            if (this.statistics.length)
                writer.writeRepeatedMessage(10, this.statistics, (item: WorkerStatistic) => item.serialize(writer));
            if (this.count != 0)
                writer.writeInt64(11, this.count);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WorkerStatisticsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WorkerStatisticsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.worker_max_num = reader.readInt32();
                        break;
                    case 2:
                        message.worker_current_num = reader.readInt32();
                        break;
                    case 3:
                        message.user_count = reader.readInt32();
                        break;
                    case 4:
                        message.reply_rate = reader.readFloat();
                        break;
                    case 5:
                        message.response_duration = reader.readString();
                        break;
                    case 6:
                        message.server_duration = reader.readString();
                        break;
                    case 7:
                        message.online_duration = reader.readString();
                        break;
                    case 8:
                        message.transfer_task_num = reader.readInt32();
                        break;
                    case 9:
                        message.receive_task_num = reader.readInt32();
                        break;
                    case 10:
                        reader.readMessage(message.statistics, () => pb_1.Message.addToRepeatedWrapperField(message, 10, WorkerStatistic.deserialize(reader), WorkerStatistic));
                        break;
                    case 11:
                        message.count = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WorkerStatisticsResponse {
            return WorkerStatisticsResponse.deserialize(bytes);
        }
    }
    export class WorkerStatistic extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            worker_id?: number;
            worker_account?: string;
            worker_nickname?: string;
            assign_num?: number;
            reply_rate?: number;
            transfer_task_num?: number;
            receive_task_num?: number;
            response_duration?: string;
            group_id?: number;
            group_nickname?: string;
            sub_group_id?: number;
            sub_group_nickname?: string;
            worker_identity?: dependency_4.api.common.WorkerPermission;
            server_duration?: string;
            online_duration?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("worker_id" in data && data.worker_id != undefined) {
                    this.worker_id = data.worker_id;
                }
                if ("worker_account" in data && data.worker_account != undefined) {
                    this.worker_account = data.worker_account;
                }
                if ("worker_nickname" in data && data.worker_nickname != undefined) {
                    this.worker_nickname = data.worker_nickname;
                }
                if ("assign_num" in data && data.assign_num != undefined) {
                    this.assign_num = data.assign_num;
                }
                if ("reply_rate" in data && data.reply_rate != undefined) {
                    this.reply_rate = data.reply_rate;
                }
                if ("transfer_task_num" in data && data.transfer_task_num != undefined) {
                    this.transfer_task_num = data.transfer_task_num;
                }
                if ("receive_task_num" in data && data.receive_task_num != undefined) {
                    this.receive_task_num = data.receive_task_num;
                }
                if ("response_duration" in data && data.response_duration != undefined) {
                    this.response_duration = data.response_duration;
                }
                if ("group_id" in data && data.group_id != undefined) {
                    this.group_id = data.group_id;
                }
                if ("group_nickname" in data && data.group_nickname != undefined) {
                    this.group_nickname = data.group_nickname;
                }
                if ("sub_group_id" in data && data.sub_group_id != undefined) {
                    this.sub_group_id = data.sub_group_id;
                }
                if ("sub_group_nickname" in data && data.sub_group_nickname != undefined) {
                    this.sub_group_nickname = data.sub_group_nickname;
                }
                if ("worker_identity" in data && data.worker_identity != undefined) {
                    this.worker_identity = data.worker_identity;
                }
                if ("server_duration" in data && data.server_duration != undefined) {
                    this.server_duration = data.server_duration;
                }
                if ("online_duration" in data && data.online_duration != undefined) {
                    this.online_duration = data.online_duration;
                }
            }
        }
        get worker_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set worker_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get worker_account() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set worker_account(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get worker_nickname() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set worker_nickname(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get assign_num() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set assign_num(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get reply_rate() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set reply_rate(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get transfer_task_num() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set transfer_task_num(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get receive_task_num() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set receive_task_num(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get response_duration() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set response_duration(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get group_id() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set group_id(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get group_nickname() {
            return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
        }
        set group_nickname(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        get sub_group_id() {
            return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
        }
        set sub_group_id(value: number) {
            pb_1.Message.setField(this, 11, value);
        }
        get sub_group_nickname() {
            return pb_1.Message.getFieldWithDefault(this, 12, "") as string;
        }
        set sub_group_nickname(value: string) {
            pb_1.Message.setField(this, 12, value);
        }
        get worker_identity() {
            return pb_1.Message.getFieldWithDefault(this, 13, dependency_4.api.common.WorkerPermission.WORKER_PERM_NONE) as dependency_4.api.common.WorkerPermission;
        }
        set worker_identity(value: dependency_4.api.common.WorkerPermission) {
            pb_1.Message.setField(this, 13, value);
        }
        get server_duration() {
            return pb_1.Message.getFieldWithDefault(this, 14, "") as string;
        }
        set server_duration(value: string) {
            pb_1.Message.setField(this, 14, value);
        }
        get online_duration() {
            return pb_1.Message.getFieldWithDefault(this, 15, "") as string;
        }
        set online_duration(value: string) {
            pb_1.Message.setField(this, 15, value);
        }
        static fromObject(data: {
            worker_id?: number;
            worker_account?: string;
            worker_nickname?: string;
            assign_num?: number;
            reply_rate?: number;
            transfer_task_num?: number;
            receive_task_num?: number;
            response_duration?: string;
            group_id?: number;
            group_nickname?: string;
            sub_group_id?: number;
            sub_group_nickname?: string;
            worker_identity?: dependency_4.api.common.WorkerPermission;
            server_duration?: string;
            online_duration?: string;
        }): WorkerStatistic {
            const message = new WorkerStatistic({});
            if (data.worker_id != null) {
                message.worker_id = data.worker_id;
            }
            if (data.worker_account != null) {
                message.worker_account = data.worker_account;
            }
            if (data.worker_nickname != null) {
                message.worker_nickname = data.worker_nickname;
            }
            if (data.assign_num != null) {
                message.assign_num = data.assign_num;
            }
            if (data.reply_rate != null) {
                message.reply_rate = data.reply_rate;
            }
            if (data.transfer_task_num != null) {
                message.transfer_task_num = data.transfer_task_num;
            }
            if (data.receive_task_num != null) {
                message.receive_task_num = data.receive_task_num;
            }
            if (data.response_duration != null) {
                message.response_duration = data.response_duration;
            }
            if (data.group_id != null) {
                message.group_id = data.group_id;
            }
            if (data.group_nickname != null) {
                message.group_nickname = data.group_nickname;
            }
            if (data.sub_group_id != null) {
                message.sub_group_id = data.sub_group_id;
            }
            if (data.sub_group_nickname != null) {
                message.sub_group_nickname = data.sub_group_nickname;
            }
            if (data.worker_identity != null) {
                message.worker_identity = data.worker_identity;
            }
            if (data.server_duration != null) {
                message.server_duration = data.server_duration;
            }
            if (data.online_duration != null) {
                message.online_duration = data.online_duration;
            }
            return message;
        }
        toObject() {
            const data: {
                worker_id?: number;
                worker_account?: string;
                worker_nickname?: string;
                assign_num?: number;
                reply_rate?: number;
                transfer_task_num?: number;
                receive_task_num?: number;
                response_duration?: string;
                group_id?: number;
                group_nickname?: string;
                sub_group_id?: number;
                sub_group_nickname?: string;
                worker_identity?: dependency_4.api.common.WorkerPermission;
                server_duration?: string;
                online_duration?: string;
            } = {};
            if (this.worker_id != null) {
                data.worker_id = this.worker_id;
            }
            if (this.worker_account != null) {
                data.worker_account = this.worker_account;
            }
            if (this.worker_nickname != null) {
                data.worker_nickname = this.worker_nickname;
            }
            if (this.assign_num != null) {
                data.assign_num = this.assign_num;
            }
            if (this.reply_rate != null) {
                data.reply_rate = this.reply_rate;
            }
            if (this.transfer_task_num != null) {
                data.transfer_task_num = this.transfer_task_num;
            }
            if (this.receive_task_num != null) {
                data.receive_task_num = this.receive_task_num;
            }
            if (this.response_duration != null) {
                data.response_duration = this.response_duration;
            }
            if (this.group_id != null) {
                data.group_id = this.group_id;
            }
            if (this.group_nickname != null) {
                data.group_nickname = this.group_nickname;
            }
            if (this.sub_group_id != null) {
                data.sub_group_id = this.sub_group_id;
            }
            if (this.sub_group_nickname != null) {
                data.sub_group_nickname = this.sub_group_nickname;
            }
            if (this.worker_identity != null) {
                data.worker_identity = this.worker_identity;
            }
            if (this.server_duration != null) {
                data.server_duration = this.server_duration;
            }
            if (this.online_duration != null) {
                data.online_duration = this.online_duration;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.worker_id != 0)
                writer.writeInt32(1, this.worker_id);
            if (this.worker_account.length)
                writer.writeString(2, this.worker_account);
            if (this.worker_nickname.length)
                writer.writeString(3, this.worker_nickname);
            if (this.assign_num != 0)
                writer.writeInt32(4, this.assign_num);
            if (this.reply_rate != 0)
                writer.writeFloat(5, this.reply_rate);
            if (this.transfer_task_num != 0)
                writer.writeInt32(6, this.transfer_task_num);
            if (this.receive_task_num != 0)
                writer.writeInt32(7, this.receive_task_num);
            if (this.response_duration.length)
                writer.writeString(8, this.response_duration);
            if (this.group_id != 0)
                writer.writeInt32(9, this.group_id);
            if (this.group_nickname.length)
                writer.writeString(10, this.group_nickname);
            if (this.sub_group_id != 0)
                writer.writeInt32(11, this.sub_group_id);
            if (this.sub_group_nickname.length)
                writer.writeString(12, this.sub_group_nickname);
            if (this.worker_identity != dependency_4.api.common.WorkerPermission.WORKER_PERM_NONE)
                writer.writeEnum(13, this.worker_identity);
            if (this.server_duration.length)
                writer.writeString(14, this.server_duration);
            if (this.online_duration.length)
                writer.writeString(15, this.online_duration);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WorkerStatistic {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WorkerStatistic();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.worker_id = reader.readInt32();
                        break;
                    case 2:
                        message.worker_account = reader.readString();
                        break;
                    case 3:
                        message.worker_nickname = reader.readString();
                        break;
                    case 4:
                        message.assign_num = reader.readInt32();
                        break;
                    case 5:
                        message.reply_rate = reader.readFloat();
                        break;
                    case 6:
                        message.transfer_task_num = reader.readInt32();
                        break;
                    case 7:
                        message.receive_task_num = reader.readInt32();
                        break;
                    case 8:
                        message.response_duration = reader.readString();
                        break;
                    case 9:
                        message.group_id = reader.readInt32();
                        break;
                    case 10:
                        message.group_nickname = reader.readString();
                        break;
                    case 11:
                        message.sub_group_id = reader.readInt32();
                        break;
                    case 12:
                        message.sub_group_nickname = reader.readString();
                        break;
                    case 13:
                        message.worker_identity = reader.readEnum();
                        break;
                    case 14:
                        message.server_duration = reader.readString();
                        break;
                    case 15:
                        message.online_duration = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WorkerStatistic {
            return WorkerStatistic.deserialize(bytes);
        }
    }
    export class WorkerReceptionLogsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            group_id?: number;
            start_time?: number;
            end_time?: number;
            page?: number;
            pageSize?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("group_id" in data && data.group_id != undefined) {
                    this.group_id = data.group_id;
                }
                if ("start_time" in data && data.start_time != undefined) {
                    this.start_time = data.start_time;
                }
                if ("end_time" in data && data.end_time != undefined) {
                    this.end_time = data.end_time;
                }
                if ("page" in data && data.page != undefined) {
                    this.page = data.page;
                }
                if ("pageSize" in data && data.pageSize != undefined) {
                    this.pageSize = data.pageSize;
                }
            }
        }
        get group_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set group_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get start_time() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set start_time(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get end_time() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set end_time(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get page() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set page(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get pageSize() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set pageSize(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            group_id?: number;
            start_time?: number;
            end_time?: number;
            page?: number;
            pageSize?: number;
        }): WorkerReceptionLogsRequest {
            const message = new WorkerReceptionLogsRequest({});
            if (data.group_id != null) {
                message.group_id = data.group_id;
            }
            if (data.start_time != null) {
                message.start_time = data.start_time;
            }
            if (data.end_time != null) {
                message.end_time = data.end_time;
            }
            if (data.page != null) {
                message.page = data.page;
            }
            if (data.pageSize != null) {
                message.pageSize = data.pageSize;
            }
            return message;
        }
        toObject() {
            const data: {
                group_id?: number;
                start_time?: number;
                end_time?: number;
                page?: number;
                pageSize?: number;
            } = {};
            if (this.group_id != null) {
                data.group_id = this.group_id;
            }
            if (this.start_time != null) {
                data.start_time = this.start_time;
            }
            if (this.end_time != null) {
                data.end_time = this.end_time;
            }
            if (this.page != null) {
                data.page = this.page;
            }
            if (this.pageSize != null) {
                data.pageSize = this.pageSize;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.group_id != 0)
                writer.writeInt32(1, this.group_id);
            if (this.start_time != 0)
                writer.writeInt64(2, this.start_time);
            if (this.end_time != 0)
                writer.writeInt64(3, this.end_time);
            if (this.page != 0)
                writer.writeUint32(4, this.page);
            if (this.pageSize != 0)
                writer.writeUint32(5, this.pageSize);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WorkerReceptionLogsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WorkerReceptionLogsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.group_id = reader.readInt32();
                        break;
                    case 2:
                        message.start_time = reader.readInt64();
                        break;
                    case 3:
                        message.end_time = reader.readInt64();
                        break;
                    case 4:
                        message.page = reader.readUint32();
                        break;
                    case 5:
                        message.pageSize = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WorkerReceptionLogsRequest {
            return WorkerReceptionLogsRequest.deserialize(bytes);
        }
    }
    export class WorkerReceptionLogsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            receptionLogs?: WorkerReceptionLog[];
            total?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("receptionLogs" in data && data.receptionLogs != undefined) {
                    this.receptionLogs = data.receptionLogs;
                }
                if ("total" in data && data.total != undefined) {
                    this.total = data.total;
                }
            }
        }
        get receptionLogs() {
            return pb_1.Message.getRepeatedWrapperField(this, WorkerReceptionLog, 1) as WorkerReceptionLog[];
        }
        set receptionLogs(value: WorkerReceptionLog[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get total() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set total(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            receptionLogs?: ReturnType<typeof WorkerReceptionLog.prototype.toObject>[];
            total?: number;
        }): WorkerReceptionLogsResponse {
            const message = new WorkerReceptionLogsResponse({});
            if (data.receptionLogs != null) {
                message.receptionLogs = data.receptionLogs.map(item => WorkerReceptionLog.fromObject(item));
            }
            if (data.total != null) {
                message.total = data.total;
            }
            return message;
        }
        toObject() {
            const data: {
                receptionLogs?: ReturnType<typeof WorkerReceptionLog.prototype.toObject>[];
                total?: number;
            } = {};
            if (this.receptionLogs != null) {
                data.receptionLogs = this.receptionLogs.map((item: WorkerReceptionLog) => item.toObject());
            }
            if (this.total != null) {
                data.total = this.total;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.receptionLogs.length)
                writer.writeRepeatedMessage(1, this.receptionLogs, (item: WorkerReceptionLog) => item.serialize(writer));
            if (this.total != 0)
                writer.writeInt64(2, this.total);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WorkerReceptionLogsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WorkerReceptionLogsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.receptionLogs, () => pb_1.Message.addToRepeatedWrapperField(message, 1, WorkerReceptionLog.deserialize(reader), WorkerReceptionLog));
                        break;
                    case 2:
                        message.total = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WorkerReceptionLogsResponse {
            return WorkerReceptionLogsResponse.deserialize(bytes);
        }
    }
    export class WorkerReceptionLog extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            worker_id?: number;
            worker_account?: string;
            worker_nickname?: string;
            group_id?: number;
            group_nickname?: string;
            assign_user_num?: number;
            send_message_num?: number;
            receive_message_num?: number;
            total_message_num?: number;
            notify_message_num?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("worker_id" in data && data.worker_id != undefined) {
                    this.worker_id = data.worker_id;
                }
                if ("worker_account" in data && data.worker_account != undefined) {
                    this.worker_account = data.worker_account;
                }
                if ("worker_nickname" in data && data.worker_nickname != undefined) {
                    this.worker_nickname = data.worker_nickname;
                }
                if ("group_id" in data && data.group_id != undefined) {
                    this.group_id = data.group_id;
                }
                if ("group_nickname" in data && data.group_nickname != undefined) {
                    this.group_nickname = data.group_nickname;
                }
                if ("assign_user_num" in data && data.assign_user_num != undefined) {
                    this.assign_user_num = data.assign_user_num;
                }
                if ("send_message_num" in data && data.send_message_num != undefined) {
                    this.send_message_num = data.send_message_num;
                }
                if ("receive_message_num" in data && data.receive_message_num != undefined) {
                    this.receive_message_num = data.receive_message_num;
                }
                if ("total_message_num" in data && data.total_message_num != undefined) {
                    this.total_message_num = data.total_message_num;
                }
                if ("notify_message_num" in data && data.notify_message_num != undefined) {
                    this.notify_message_num = data.notify_message_num;
                }
            }
        }
        get worker_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set worker_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get worker_account() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set worker_account(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get worker_nickname() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set worker_nickname(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get group_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set group_id(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get group_nickname() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set group_nickname(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get assign_user_num() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set assign_user_num(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get send_message_num() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set send_message_num(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get receive_message_num() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set receive_message_num(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get total_message_num() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set total_message_num(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get notify_message_num() {
            return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
        }
        set notify_message_num(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        static fromObject(data: {
            worker_id?: number;
            worker_account?: string;
            worker_nickname?: string;
            group_id?: number;
            group_nickname?: string;
            assign_user_num?: number;
            send_message_num?: number;
            receive_message_num?: number;
            total_message_num?: number;
            notify_message_num?: number;
        }): WorkerReceptionLog {
            const message = new WorkerReceptionLog({});
            if (data.worker_id != null) {
                message.worker_id = data.worker_id;
            }
            if (data.worker_account != null) {
                message.worker_account = data.worker_account;
            }
            if (data.worker_nickname != null) {
                message.worker_nickname = data.worker_nickname;
            }
            if (data.group_id != null) {
                message.group_id = data.group_id;
            }
            if (data.group_nickname != null) {
                message.group_nickname = data.group_nickname;
            }
            if (data.assign_user_num != null) {
                message.assign_user_num = data.assign_user_num;
            }
            if (data.send_message_num != null) {
                message.send_message_num = data.send_message_num;
            }
            if (data.receive_message_num != null) {
                message.receive_message_num = data.receive_message_num;
            }
            if (data.total_message_num != null) {
                message.total_message_num = data.total_message_num;
            }
            if (data.notify_message_num != null) {
                message.notify_message_num = data.notify_message_num;
            }
            return message;
        }
        toObject() {
            const data: {
                worker_id?: number;
                worker_account?: string;
                worker_nickname?: string;
                group_id?: number;
                group_nickname?: string;
                assign_user_num?: number;
                send_message_num?: number;
                receive_message_num?: number;
                total_message_num?: number;
                notify_message_num?: number;
            } = {};
            if (this.worker_id != null) {
                data.worker_id = this.worker_id;
            }
            if (this.worker_account != null) {
                data.worker_account = this.worker_account;
            }
            if (this.worker_nickname != null) {
                data.worker_nickname = this.worker_nickname;
            }
            if (this.group_id != null) {
                data.group_id = this.group_id;
            }
            if (this.group_nickname != null) {
                data.group_nickname = this.group_nickname;
            }
            if (this.assign_user_num != null) {
                data.assign_user_num = this.assign_user_num;
            }
            if (this.send_message_num != null) {
                data.send_message_num = this.send_message_num;
            }
            if (this.receive_message_num != null) {
                data.receive_message_num = this.receive_message_num;
            }
            if (this.total_message_num != null) {
                data.total_message_num = this.total_message_num;
            }
            if (this.notify_message_num != null) {
                data.notify_message_num = this.notify_message_num;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.worker_id != 0)
                writer.writeInt32(1, this.worker_id);
            if (this.worker_account.length)
                writer.writeString(2, this.worker_account);
            if (this.worker_nickname.length)
                writer.writeString(3, this.worker_nickname);
            if (this.group_id != 0)
                writer.writeInt32(4, this.group_id);
            if (this.group_nickname.length)
                writer.writeString(5, this.group_nickname);
            if (this.assign_user_num != 0)
                writer.writeInt32(6, this.assign_user_num);
            if (this.send_message_num != 0)
                writer.writeInt32(7, this.send_message_num);
            if (this.receive_message_num != 0)
                writer.writeInt32(8, this.receive_message_num);
            if (this.total_message_num != 0)
                writer.writeInt32(9, this.total_message_num);
            if (this.notify_message_num != 0)
                writer.writeInt32(10, this.notify_message_num);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WorkerReceptionLog {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WorkerReceptionLog();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.worker_id = reader.readInt32();
                        break;
                    case 2:
                        message.worker_account = reader.readString();
                        break;
                    case 3:
                        message.worker_nickname = reader.readString();
                        break;
                    case 4:
                        message.group_id = reader.readInt32();
                        break;
                    case 5:
                        message.group_nickname = reader.readString();
                        break;
                    case 6:
                        message.assign_user_num = reader.readInt32();
                        break;
                    case 7:
                        message.send_message_num = reader.readInt32();
                        break;
                    case 8:
                        message.receive_message_num = reader.readInt32();
                        break;
                    case 9:
                        message.total_message_num = reader.readInt32();
                        break;
                    case 10:
                        message.notify_message_num = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WorkerReceptionLog {
            return WorkerReceptionLog.deserialize(bytes);
        }
    }
    export class ExportWorkerReceptionLogsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            group_id?: number;
            start_time?: number;
            end_time?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("group_id" in data && data.group_id != undefined) {
                    this.group_id = data.group_id;
                }
                if ("start_time" in data && data.start_time != undefined) {
                    this.start_time = data.start_time;
                }
                if ("end_time" in data && data.end_time != undefined) {
                    this.end_time = data.end_time;
                }
            }
        }
        get group_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set group_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get start_time() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set start_time(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get end_time() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set end_time(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            group_id?: number;
            start_time?: number;
            end_time?: number;
        }): ExportWorkerReceptionLogsRequest {
            const message = new ExportWorkerReceptionLogsRequest({});
            if (data.group_id != null) {
                message.group_id = data.group_id;
            }
            if (data.start_time != null) {
                message.start_time = data.start_time;
            }
            if (data.end_time != null) {
                message.end_time = data.end_time;
            }
            return message;
        }
        toObject() {
            const data: {
                group_id?: number;
                start_time?: number;
                end_time?: number;
            } = {};
            if (this.group_id != null) {
                data.group_id = this.group_id;
            }
            if (this.start_time != null) {
                data.start_time = this.start_time;
            }
            if (this.end_time != null) {
                data.end_time = this.end_time;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.group_id != 0)
                writer.writeInt32(1, this.group_id);
            if (this.start_time != 0)
                writer.writeInt64(2, this.start_time);
            if (this.end_time != 0)
                writer.writeInt64(3, this.end_time);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ExportWorkerReceptionLogsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ExportWorkerReceptionLogsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.group_id = reader.readInt32();
                        break;
                    case 2:
                        message.start_time = reader.readInt64();
                        break;
                    case 3:
                        message.end_time = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ExportWorkerReceptionLogsRequest {
            return ExportWorkerReceptionLogsRequest.deserialize(bytes);
        }
    }
    export class QuestionTypesRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            title?: string;
            page?: number;
            pageSize?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("title" in data && data.title != undefined) {
                    this.title = data.title;
                }
                if ("page" in data && data.page != undefined) {
                    this.page = data.page;
                }
                if ("pageSize" in data && data.pageSize != undefined) {
                    this.pageSize = data.pageSize;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get title() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set title(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get page() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set page(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get pageSize() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set pageSize(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            id?: number;
            title?: string;
            page?: number;
            pageSize?: number;
        }): QuestionTypesRequest {
            const message = new QuestionTypesRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.title != null) {
                message.title = data.title;
            }
            if (data.page != null) {
                message.page = data.page;
            }
            if (data.pageSize != null) {
                message.pageSize = data.pageSize;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                title?: string;
                page?: number;
                pageSize?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.title != null) {
                data.title = this.title;
            }
            if (this.page != null) {
                data.page = this.page;
            }
            if (this.pageSize != null) {
                data.pageSize = this.pageSize;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt32(1, this.id);
            if (this.title.length)
                writer.writeString(2, this.title);
            if (this.page != 0)
                writer.writeUint32(3, this.page);
            if (this.pageSize != 0)
                writer.writeUint32(4, this.pageSize);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QuestionTypesRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QuestionTypesRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    case 2:
                        message.title = reader.readString();
                        break;
                    case 3:
                        message.page = reader.readUint32();
                        break;
                    case 4:
                        message.pageSize = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QuestionTypesRequest {
            return QuestionTypesRequest.deserialize(bytes);
        }
    }
    export class QuestionTypesResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            question_types?: QuestionType[];
            total?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("question_types" in data && data.question_types != undefined) {
                    this.question_types = data.question_types;
                }
                if ("total" in data && data.total != undefined) {
                    this.total = data.total;
                }
            }
        }
        get question_types() {
            return pb_1.Message.getRepeatedWrapperField(this, QuestionType, 1) as QuestionType[];
        }
        set question_types(value: QuestionType[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get total() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set total(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            question_types?: ReturnType<typeof QuestionType.prototype.toObject>[];
            total?: number;
        }): QuestionTypesResponse {
            const message = new QuestionTypesResponse({});
            if (data.question_types != null) {
                message.question_types = data.question_types.map(item => QuestionType.fromObject(item));
            }
            if (data.total != null) {
                message.total = data.total;
            }
            return message;
        }
        toObject() {
            const data: {
                question_types?: ReturnType<typeof QuestionType.prototype.toObject>[];
                total?: number;
            } = {};
            if (this.question_types != null) {
                data.question_types = this.question_types.map((item: QuestionType) => item.toObject());
            }
            if (this.total != null) {
                data.total = this.total;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.question_types.length)
                writer.writeRepeatedMessage(1, this.question_types, (item: QuestionType) => item.serialize(writer));
            if (this.total != 0)
                writer.writeInt64(2, this.total);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QuestionTypesResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QuestionTypesResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.question_types, () => pb_1.Message.addToRepeatedWrapperField(message, 1, QuestionType.deserialize(reader), QuestionType));
                        break;
                    case 2:
                        message.total = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QuestionTypesResponse {
            return QuestionTypesResponse.deserialize(bytes);
        }
    }
    export class QuestionType extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            title?: string;
            created_at?: dependency_5.google.protobuf.Timestamp;
            updated_at?: dependency_5.google.protobuf.Timestamp;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("title" in data && data.title != undefined) {
                    this.title = data.title;
                }
                if ("created_at" in data && data.created_at != undefined) {
                    this.created_at = data.created_at;
                }
                if ("updated_at" in data && data.updated_at != undefined) {
                    this.updated_at = data.updated_at;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get title() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set title(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get created_at() {
            return pb_1.Message.getWrapperField(this, dependency_5.google.protobuf.Timestamp, 3) as dependency_5.google.protobuf.Timestamp;
        }
        set created_at(value: dependency_5.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_created_at() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get updated_at() {
            return pb_1.Message.getWrapperField(this, dependency_5.google.protobuf.Timestamp, 4) as dependency_5.google.protobuf.Timestamp;
        }
        set updated_at(value: dependency_5.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_updated_at() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            id?: number;
            title?: string;
            created_at?: ReturnType<typeof dependency_5.google.protobuf.Timestamp.prototype.toObject>;
            updated_at?: ReturnType<typeof dependency_5.google.protobuf.Timestamp.prototype.toObject>;
        }): QuestionType {
            const message = new QuestionType({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.title != null) {
                message.title = data.title;
            }
            if (data.created_at != null) {
                message.created_at = dependency_5.google.protobuf.Timestamp.fromObject(data.created_at);
            }
            if (data.updated_at != null) {
                message.updated_at = dependency_5.google.protobuf.Timestamp.fromObject(data.updated_at);
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                title?: string;
                created_at?: ReturnType<typeof dependency_5.google.protobuf.Timestamp.prototype.toObject>;
                updated_at?: ReturnType<typeof dependency_5.google.protobuf.Timestamp.prototype.toObject>;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.title != null) {
                data.title = this.title;
            }
            if (this.created_at != null) {
                data.created_at = this.created_at.toObject();
            }
            if (this.updated_at != null) {
                data.updated_at = this.updated_at.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt32(1, this.id);
            if (this.title.length)
                writer.writeString(2, this.title);
            if (this.has_created_at)
                writer.writeMessage(3, this.created_at, () => this.created_at.serialize(writer));
            if (this.has_updated_at)
                writer.writeMessage(4, this.updated_at, () => this.updated_at.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QuestionType {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QuestionType();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    case 2:
                        message.title = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.created_at, () => message.created_at = dependency_5.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.updated_at, () => message.updated_at = dependency_5.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QuestionType {
            return QuestionType.deserialize(bytes);
        }
    }
    export class ConsultTypeQuestionStatsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            page?: number;
            pageSize?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("page" in data && data.page != undefined) {
                    this.page = data.page;
                }
                if ("pageSize" in data && data.pageSize != undefined) {
                    this.pageSize = data.pageSize;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get page() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set page(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get pageSize() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set pageSize(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            id?: number;
            page?: number;
            pageSize?: number;
        }): ConsultTypeQuestionStatsRequest {
            const message = new ConsultTypeQuestionStatsRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.page != null) {
                message.page = data.page;
            }
            if (data.pageSize != null) {
                message.pageSize = data.pageSize;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                page?: number;
                pageSize?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.page != null) {
                data.page = this.page;
            }
            if (this.pageSize != null) {
                data.pageSize = this.pageSize;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt32(1, this.id);
            if (this.page != 0)
                writer.writeUint32(2, this.page);
            if (this.pageSize != 0)
                writer.writeUint32(3, this.pageSize);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ConsultTypeQuestionStatsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ConsultTypeQuestionStatsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    case 2:
                        message.page = reader.readUint32();
                        break;
                    case 3:
                        message.pageSize = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ConsultTypeQuestionStatsRequest {
            return ConsultTypeQuestionStatsRequest.deserialize(bytes);
        }
    }
    export class ConsultTypeQuestionStatsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            question_stats?: ConsultTypeQuestionStat[];
            total?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("question_stats" in data && data.question_stats != undefined) {
                    this.question_stats = data.question_stats;
                }
                if ("total" in data && data.total != undefined) {
                    this.total = data.total;
                }
            }
        }
        get question_stats() {
            return pb_1.Message.getRepeatedWrapperField(this, ConsultTypeQuestionStat, 1) as ConsultTypeQuestionStat[];
        }
        set question_stats(value: ConsultTypeQuestionStat[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get total() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set total(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            question_stats?: ReturnType<typeof ConsultTypeQuestionStat.prototype.toObject>[];
            total?: number;
        }): ConsultTypeQuestionStatsResponse {
            const message = new ConsultTypeQuestionStatsResponse({});
            if (data.question_stats != null) {
                message.question_stats = data.question_stats.map(item => ConsultTypeQuestionStat.fromObject(item));
            }
            if (data.total != null) {
                message.total = data.total;
            }
            return message;
        }
        toObject() {
            const data: {
                question_stats?: ReturnType<typeof ConsultTypeQuestionStat.prototype.toObject>[];
                total?: number;
            } = {};
            if (this.question_stats != null) {
                data.question_stats = this.question_stats.map((item: ConsultTypeQuestionStat) => item.toObject());
            }
            if (this.total != null) {
                data.total = this.total;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.question_stats.length)
                writer.writeRepeatedMessage(1, this.question_stats, (item: ConsultTypeQuestionStat) => item.serialize(writer));
            if (this.total != 0)
                writer.writeInt64(2, this.total);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ConsultTypeQuestionStatsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ConsultTypeQuestionStatsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.question_stats, () => pb_1.Message.addToRepeatedWrapperField(message, 1, ConsultTypeQuestionStat.deserialize(reader), ConsultTypeQuestionStat));
                        break;
                    case 2:
                        message.total = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ConsultTypeQuestionStatsResponse {
            return ConsultTypeQuestionStatsResponse.deserialize(bytes);
        }
    }
    export class ConsultTypeQuestionStat extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            consult_type_id?: number;
            consult_type_name?: string;
            question_type_count?: number;
            operator_name?: string;
            updated_at?: dependency_5.google.protobuf.Timestamp;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("consult_type_id" in data && data.consult_type_id != undefined) {
                    this.consult_type_id = data.consult_type_id;
                }
                if ("consult_type_name" in data && data.consult_type_name != undefined) {
                    this.consult_type_name = data.consult_type_name;
                }
                if ("question_type_count" in data && data.question_type_count != undefined) {
                    this.question_type_count = data.question_type_count;
                }
                if ("operator_name" in data && data.operator_name != undefined) {
                    this.operator_name = data.operator_name;
                }
                if ("updated_at" in data && data.updated_at != undefined) {
                    this.updated_at = data.updated_at;
                }
            }
        }
        get consult_type_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set consult_type_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get consult_type_name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set consult_type_name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get question_type_count() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set question_type_count(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get operator_name() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set operator_name(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get updated_at() {
            return pb_1.Message.getWrapperField(this, dependency_5.google.protobuf.Timestamp, 6) as dependency_5.google.protobuf.Timestamp;
        }
        set updated_at(value: dependency_5.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get has_updated_at() {
            return pb_1.Message.getField(this, 6) != null;
        }
        static fromObject(data: {
            consult_type_id?: number;
            consult_type_name?: string;
            question_type_count?: number;
            operator_name?: string;
            updated_at?: ReturnType<typeof dependency_5.google.protobuf.Timestamp.prototype.toObject>;
        }): ConsultTypeQuestionStat {
            const message = new ConsultTypeQuestionStat({});
            if (data.consult_type_id != null) {
                message.consult_type_id = data.consult_type_id;
            }
            if (data.consult_type_name != null) {
                message.consult_type_name = data.consult_type_name;
            }
            if (data.question_type_count != null) {
                message.question_type_count = data.question_type_count;
            }
            if (data.operator_name != null) {
                message.operator_name = data.operator_name;
            }
            if (data.updated_at != null) {
                message.updated_at = dependency_5.google.protobuf.Timestamp.fromObject(data.updated_at);
            }
            return message;
        }
        toObject() {
            const data: {
                consult_type_id?: number;
                consult_type_name?: string;
                question_type_count?: number;
                operator_name?: string;
                updated_at?: ReturnType<typeof dependency_5.google.protobuf.Timestamp.prototype.toObject>;
            } = {};
            if (this.consult_type_id != null) {
                data.consult_type_id = this.consult_type_id;
            }
            if (this.consult_type_name != null) {
                data.consult_type_name = this.consult_type_name;
            }
            if (this.question_type_count != null) {
                data.question_type_count = this.question_type_count;
            }
            if (this.operator_name != null) {
                data.operator_name = this.operator_name;
            }
            if (this.updated_at != null) {
                data.updated_at = this.updated_at.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.consult_type_id != 0)
                writer.writeInt32(2, this.consult_type_id);
            if (this.consult_type_name.length)
                writer.writeString(3, this.consult_type_name);
            if (this.question_type_count != 0)
                writer.writeInt64(4, this.question_type_count);
            if (this.operator_name.length)
                writer.writeString(5, this.operator_name);
            if (this.has_updated_at)
                writer.writeMessage(6, this.updated_at, () => this.updated_at.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ConsultTypeQuestionStat {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ConsultTypeQuestionStat();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 2:
                        message.consult_type_id = reader.readInt32();
                        break;
                    case 3:
                        message.consult_type_name = reader.readString();
                        break;
                    case 4:
                        message.question_type_count = reader.readInt64();
                        break;
                    case 5:
                        message.operator_name = reader.readString();
                        break;
                    case 6:
                        reader.readMessage(message.updated_at, () => message.updated_at = dependency_5.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ConsultTypeQuestionStat {
            return ConsultTypeQuestionStat.deserialize(bytes);
        }
    }
    export class ConsultTypeQuestionsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            page?: number;
            pageSize?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("page" in data && data.page != undefined) {
                    this.page = data.page;
                }
                if ("pageSize" in data && data.pageSize != undefined) {
                    this.pageSize = data.pageSize;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get page() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set page(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get pageSize() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set pageSize(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            id?: number;
            page?: number;
            pageSize?: number;
        }): ConsultTypeQuestionsRequest {
            const message = new ConsultTypeQuestionsRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.page != null) {
                message.page = data.page;
            }
            if (data.pageSize != null) {
                message.pageSize = data.pageSize;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                page?: number;
                pageSize?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.page != null) {
                data.page = this.page;
            }
            if (this.pageSize != null) {
                data.pageSize = this.pageSize;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt32(1, this.id);
            if (this.page != 0)
                writer.writeUint32(2, this.page);
            if (this.pageSize != 0)
                writer.writeUint32(3, this.pageSize);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ConsultTypeQuestionsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ConsultTypeQuestionsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    case 2:
                        message.page = reader.readUint32();
                        break;
                    case 3:
                        message.pageSize = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ConsultTypeQuestionsRequest {
            return ConsultTypeQuestionsRequest.deserialize(bytes);
        }
    }
    export class ConsultTypeQuestionsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            questions?: ConsultTypeQuestion[];
            total?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("questions" in data && data.questions != undefined) {
                    this.questions = data.questions;
                }
                if ("total" in data && data.total != undefined) {
                    this.total = data.total;
                }
            }
        }
        get questions() {
            return pb_1.Message.getRepeatedWrapperField(this, ConsultTypeQuestion, 1) as ConsultTypeQuestion[];
        }
        set questions(value: ConsultTypeQuestion[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get total() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set total(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            questions?: ReturnType<typeof ConsultTypeQuestion.prototype.toObject>[];
            total?: number;
        }): ConsultTypeQuestionsResponse {
            const message = new ConsultTypeQuestionsResponse({});
            if (data.questions != null) {
                message.questions = data.questions.map(item => ConsultTypeQuestion.fromObject(item));
            }
            if (data.total != null) {
                message.total = data.total;
            }
            return message;
        }
        toObject() {
            const data: {
                questions?: ReturnType<typeof ConsultTypeQuestion.prototype.toObject>[];
                total?: number;
            } = {};
            if (this.questions != null) {
                data.questions = this.questions.map((item: ConsultTypeQuestion) => item.toObject());
            }
            if (this.total != null) {
                data.total = this.total;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.questions.length)
                writer.writeRepeatedMessage(1, this.questions, (item: ConsultTypeQuestion) => item.serialize(writer));
            if (this.total != 0)
                writer.writeInt64(2, this.total);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ConsultTypeQuestionsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ConsultTypeQuestionsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.questions, () => pb_1.Message.addToRepeatedWrapperField(message, 1, ConsultTypeQuestion.deserialize(reader), ConsultTypeQuestion));
                        break;
                    case 2:
                        message.total = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ConsultTypeQuestionsResponse {
            return ConsultTypeQuestionsResponse.deserialize(bytes);
        }
    }
    export class ConsultTypeQuestion extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            consult_type_id?: number;
            consult_type_name?: string;
            question_type_id?: number;
            question_type_title?: string;
            sort_value?: number;
            operator_name?: string;
            updated_at?: dependency_5.google.protobuf.Timestamp;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("consult_type_id" in data && data.consult_type_id != undefined) {
                    this.consult_type_id = data.consult_type_id;
                }
                if ("consult_type_name" in data && data.consult_type_name != undefined) {
                    this.consult_type_name = data.consult_type_name;
                }
                if ("question_type_id" in data && data.question_type_id != undefined) {
                    this.question_type_id = data.question_type_id;
                }
                if ("question_type_title" in data && data.question_type_title != undefined) {
                    this.question_type_title = data.question_type_title;
                }
                if ("sort_value" in data && data.sort_value != undefined) {
                    this.sort_value = data.sort_value;
                }
                if ("operator_name" in data && data.operator_name != undefined) {
                    this.operator_name = data.operator_name;
                }
                if ("updated_at" in data && data.updated_at != undefined) {
                    this.updated_at = data.updated_at;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get consult_type_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set consult_type_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get consult_type_name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set consult_type_name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get question_type_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set question_type_id(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get question_type_title() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set question_type_title(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get sort_value() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set sort_value(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get operator_name() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set operator_name(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get updated_at() {
            return pb_1.Message.getWrapperField(this, dependency_5.google.protobuf.Timestamp, 8) as dependency_5.google.protobuf.Timestamp;
        }
        set updated_at(value: dependency_5.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 8, value);
        }
        get has_updated_at() {
            return pb_1.Message.getField(this, 8) != null;
        }
        static fromObject(data: {
            id?: number;
            consult_type_id?: number;
            consult_type_name?: string;
            question_type_id?: number;
            question_type_title?: string;
            sort_value?: number;
            operator_name?: string;
            updated_at?: ReturnType<typeof dependency_5.google.protobuf.Timestamp.prototype.toObject>;
        }): ConsultTypeQuestion {
            const message = new ConsultTypeQuestion({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.consult_type_id != null) {
                message.consult_type_id = data.consult_type_id;
            }
            if (data.consult_type_name != null) {
                message.consult_type_name = data.consult_type_name;
            }
            if (data.question_type_id != null) {
                message.question_type_id = data.question_type_id;
            }
            if (data.question_type_title != null) {
                message.question_type_title = data.question_type_title;
            }
            if (data.sort_value != null) {
                message.sort_value = data.sort_value;
            }
            if (data.operator_name != null) {
                message.operator_name = data.operator_name;
            }
            if (data.updated_at != null) {
                message.updated_at = dependency_5.google.protobuf.Timestamp.fromObject(data.updated_at);
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                consult_type_id?: number;
                consult_type_name?: string;
                question_type_id?: number;
                question_type_title?: string;
                sort_value?: number;
                operator_name?: string;
                updated_at?: ReturnType<typeof dependency_5.google.protobuf.Timestamp.prototype.toObject>;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.consult_type_id != null) {
                data.consult_type_id = this.consult_type_id;
            }
            if (this.consult_type_name != null) {
                data.consult_type_name = this.consult_type_name;
            }
            if (this.question_type_id != null) {
                data.question_type_id = this.question_type_id;
            }
            if (this.question_type_title != null) {
                data.question_type_title = this.question_type_title;
            }
            if (this.sort_value != null) {
                data.sort_value = this.sort_value;
            }
            if (this.operator_name != null) {
                data.operator_name = this.operator_name;
            }
            if (this.updated_at != null) {
                data.updated_at = this.updated_at.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt32(1, this.id);
            if (this.consult_type_id != 0)
                writer.writeInt32(2, this.consult_type_id);
            if (this.consult_type_name.length)
                writer.writeString(3, this.consult_type_name);
            if (this.question_type_id != 0)
                writer.writeInt32(4, this.question_type_id);
            if (this.question_type_title.length)
                writer.writeString(5, this.question_type_title);
            if (this.sort_value != 0)
                writer.writeInt32(6, this.sort_value);
            if (this.operator_name.length)
                writer.writeString(7, this.operator_name);
            if (this.has_updated_at)
                writer.writeMessage(8, this.updated_at, () => this.updated_at.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ConsultTypeQuestion {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ConsultTypeQuestion();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    case 2:
                        message.consult_type_id = reader.readInt32();
                        break;
                    case 3:
                        message.consult_type_name = reader.readString();
                        break;
                    case 4:
                        message.question_type_id = reader.readInt32();
                        break;
                    case 5:
                        message.question_type_title = reader.readString();
                        break;
                    case 6:
                        message.sort_value = reader.readInt32();
                        break;
                    case 7:
                        message.operator_name = reader.readString();
                        break;
                    case 8:
                        reader.readMessage(message.updated_at, () => message.updated_at = dependency_5.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ConsultTypeQuestion {
            return ConsultTypeQuestion.deserialize(bytes);
        }
    }
    export class AddConsultTypeQuestionRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            consult_type_id?: number;
            question_type_id?: number;
            question_type_title?: string;
            sort_value?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("consult_type_id" in data && data.consult_type_id != undefined) {
                    this.consult_type_id = data.consult_type_id;
                }
                if ("question_type_id" in data && data.question_type_id != undefined) {
                    this.question_type_id = data.question_type_id;
                }
                if ("question_type_title" in data && data.question_type_title != undefined) {
                    this.question_type_title = data.question_type_title;
                }
                if ("sort_value" in data && data.sort_value != undefined) {
                    this.sort_value = data.sort_value;
                }
            }
        }
        get consult_type_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set consult_type_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get question_type_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set question_type_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get question_type_title() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set question_type_title(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get sort_value() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set sort_value(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            consult_type_id?: number;
            question_type_id?: number;
            question_type_title?: string;
            sort_value?: number;
        }): AddConsultTypeQuestionRequest {
            const message = new AddConsultTypeQuestionRequest({});
            if (data.consult_type_id != null) {
                message.consult_type_id = data.consult_type_id;
            }
            if (data.question_type_id != null) {
                message.question_type_id = data.question_type_id;
            }
            if (data.question_type_title != null) {
                message.question_type_title = data.question_type_title;
            }
            if (data.sort_value != null) {
                message.sort_value = data.sort_value;
            }
            return message;
        }
        toObject() {
            const data: {
                consult_type_id?: number;
                question_type_id?: number;
                question_type_title?: string;
                sort_value?: number;
            } = {};
            if (this.consult_type_id != null) {
                data.consult_type_id = this.consult_type_id;
            }
            if (this.question_type_id != null) {
                data.question_type_id = this.question_type_id;
            }
            if (this.question_type_title != null) {
                data.question_type_title = this.question_type_title;
            }
            if (this.sort_value != null) {
                data.sort_value = this.sort_value;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.consult_type_id != 0)
                writer.writeInt32(1, this.consult_type_id);
            if (this.question_type_id != 0)
                writer.writeInt32(2, this.question_type_id);
            if (this.question_type_title.length)
                writer.writeString(3, this.question_type_title);
            if (this.sort_value != 0)
                writer.writeInt32(4, this.sort_value);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AddConsultTypeQuestionRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AddConsultTypeQuestionRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.consult_type_id = reader.readInt32();
                        break;
                    case 2:
                        message.question_type_id = reader.readInt32();
                        break;
                    case 3:
                        message.question_type_title = reader.readString();
                        break;
                    case 4:
                        message.sort_value = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AddConsultTypeQuestionRequest {
            return AddConsultTypeQuestionRequest.deserialize(bytes);
        }
    }
    export class DeleteConsultTypeQuestionRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            id?: number;
        }): DeleteConsultTypeQuestionRequest {
            const message = new DeleteConsultTypeQuestionRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt32(1, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteConsultTypeQuestionRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteConsultTypeQuestionRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteConsultTypeQuestionRequest {
            return DeleteConsultTypeQuestionRequest.deserialize(bytes);
        }
    }
    export class UpdateConsultTypeQuestionRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            question_type_id?: number;
            question_type_title?: string;
            sort_value?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("question_type_id" in data && data.question_type_id != undefined) {
                    this.question_type_id = data.question_type_id;
                }
                if ("question_type_title" in data && data.question_type_title != undefined) {
                    this.question_type_title = data.question_type_title;
                }
                if ("sort_value" in data && data.sort_value != undefined) {
                    this.sort_value = data.sort_value;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get question_type_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set question_type_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get question_type_title() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set question_type_title(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get sort_value() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set sort_value(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            id?: number;
            question_type_id?: number;
            question_type_title?: string;
            sort_value?: number;
        }): UpdateConsultTypeQuestionRequest {
            const message = new UpdateConsultTypeQuestionRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.question_type_id != null) {
                message.question_type_id = data.question_type_id;
            }
            if (data.question_type_title != null) {
                message.question_type_title = data.question_type_title;
            }
            if (data.sort_value != null) {
                message.sort_value = data.sort_value;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                question_type_id?: number;
                question_type_title?: string;
                sort_value?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.question_type_id != null) {
                data.question_type_id = this.question_type_id;
            }
            if (this.question_type_title != null) {
                data.question_type_title = this.question_type_title;
            }
            if (this.sort_value != null) {
                data.sort_value = this.sort_value;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt32(1, this.id);
            if (this.question_type_id != 0)
                writer.writeInt32(2, this.question_type_id);
            if (this.question_type_title.length)
                writer.writeString(3, this.question_type_title);
            if (this.sort_value != 0)
                writer.writeInt32(4, this.sort_value);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateConsultTypeQuestionRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateConsultTypeQuestionRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    case 2:
                        message.question_type_id = reader.readInt32();
                        break;
                    case 3:
                        message.question_type_title = reader.readString();
                        break;
                    case 4:
                        message.sort_value = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateConsultTypeQuestionRequest {
            return UpdateConsultTypeQuestionRequest.deserialize(bytes);
        }
    }
    export class AddQuestionTypeRemarkRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            consult_type_id?: number;
            remark?: string;
            question_type_ids?: number[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("consult_type_id" in data && data.consult_type_id != undefined) {
                    this.consult_type_id = data.consult_type_id;
                }
                if ("remark" in data && data.remark != undefined) {
                    this.remark = data.remark;
                }
                if ("question_type_ids" in data && data.question_type_ids != undefined) {
                    this.question_type_ids = data.question_type_ids;
                }
            }
        }
        get consult_type_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set consult_type_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get remark() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set remark(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get question_type_ids() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as number[];
        }
        set question_type_ids(value: number[]) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            consult_type_id?: number;
            remark?: string;
            question_type_ids?: number[];
        }): AddQuestionTypeRemarkRequest {
            const message = new AddQuestionTypeRemarkRequest({});
            if (data.consult_type_id != null) {
                message.consult_type_id = data.consult_type_id;
            }
            if (data.remark != null) {
                message.remark = data.remark;
            }
            if (data.question_type_ids != null) {
                message.question_type_ids = data.question_type_ids;
            }
            return message;
        }
        toObject() {
            const data: {
                consult_type_id?: number;
                remark?: string;
                question_type_ids?: number[];
            } = {};
            if (this.consult_type_id != null) {
                data.consult_type_id = this.consult_type_id;
            }
            if (this.remark != null) {
                data.remark = this.remark;
            }
            if (this.question_type_ids != null) {
                data.question_type_ids = this.question_type_ids;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.consult_type_id != 0)
                writer.writeInt32(1, this.consult_type_id);
            if (this.remark.length)
                writer.writeString(2, this.remark);
            if (this.question_type_ids.length)
                writer.writePackedInt32(3, this.question_type_ids);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AddQuestionTypeRemarkRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AddQuestionTypeRemarkRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.consult_type_id = reader.readInt32();
                        break;
                    case 2:
                        message.remark = reader.readString();
                        break;
                    case 3:
                        message.question_type_ids = reader.readPackedInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AddQuestionTypeRemarkRequest {
            return AddQuestionTypeRemarkRequest.deserialize(bytes);
        }
    }
    export class QuestionTypeRemarksRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            consult_type_id?: number;
            worker_account?: string;
            start_time?: dependency_5.google.protobuf.Timestamp;
            end_time?: dependency_5.google.protobuf.Timestamp;
            page?: number;
            pageSize?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("consult_type_id" in data && data.consult_type_id != undefined) {
                    this.consult_type_id = data.consult_type_id;
                }
                if ("worker_account" in data && data.worker_account != undefined) {
                    this.worker_account = data.worker_account;
                }
                if ("start_time" in data && data.start_time != undefined) {
                    this.start_time = data.start_time;
                }
                if ("end_time" in data && data.end_time != undefined) {
                    this.end_time = data.end_time;
                }
                if ("page" in data && data.page != undefined) {
                    this.page = data.page;
                }
                if ("pageSize" in data && data.pageSize != undefined) {
                    this.pageSize = data.pageSize;
                }
            }
        }
        get consult_type_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set consult_type_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get worker_account() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set worker_account(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get start_time() {
            return pb_1.Message.getWrapperField(this, dependency_5.google.protobuf.Timestamp, 3) as dependency_5.google.protobuf.Timestamp;
        }
        set start_time(value: dependency_5.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_start_time() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get end_time() {
            return pb_1.Message.getWrapperField(this, dependency_5.google.protobuf.Timestamp, 4) as dependency_5.google.protobuf.Timestamp;
        }
        set end_time(value: dependency_5.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_end_time() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get page() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set page(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get pageSize() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set pageSize(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            consult_type_id?: number;
            worker_account?: string;
            start_time?: ReturnType<typeof dependency_5.google.protobuf.Timestamp.prototype.toObject>;
            end_time?: ReturnType<typeof dependency_5.google.protobuf.Timestamp.prototype.toObject>;
            page?: number;
            pageSize?: number;
        }): QuestionTypeRemarksRequest {
            const message = new QuestionTypeRemarksRequest({});
            if (data.consult_type_id != null) {
                message.consult_type_id = data.consult_type_id;
            }
            if (data.worker_account != null) {
                message.worker_account = data.worker_account;
            }
            if (data.start_time != null) {
                message.start_time = dependency_5.google.protobuf.Timestamp.fromObject(data.start_time);
            }
            if (data.end_time != null) {
                message.end_time = dependency_5.google.protobuf.Timestamp.fromObject(data.end_time);
            }
            if (data.page != null) {
                message.page = data.page;
            }
            if (data.pageSize != null) {
                message.pageSize = data.pageSize;
            }
            return message;
        }
        toObject() {
            const data: {
                consult_type_id?: number;
                worker_account?: string;
                start_time?: ReturnType<typeof dependency_5.google.protobuf.Timestamp.prototype.toObject>;
                end_time?: ReturnType<typeof dependency_5.google.protobuf.Timestamp.prototype.toObject>;
                page?: number;
                pageSize?: number;
            } = {};
            if (this.consult_type_id != null) {
                data.consult_type_id = this.consult_type_id;
            }
            if (this.worker_account != null) {
                data.worker_account = this.worker_account;
            }
            if (this.start_time != null) {
                data.start_time = this.start_time.toObject();
            }
            if (this.end_time != null) {
                data.end_time = this.end_time.toObject();
            }
            if (this.page != null) {
                data.page = this.page;
            }
            if (this.pageSize != null) {
                data.pageSize = this.pageSize;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.consult_type_id != 0)
                writer.writeInt32(1, this.consult_type_id);
            if (this.worker_account.length)
                writer.writeString(2, this.worker_account);
            if (this.has_start_time)
                writer.writeMessage(3, this.start_time, () => this.start_time.serialize(writer));
            if (this.has_end_time)
                writer.writeMessage(4, this.end_time, () => this.end_time.serialize(writer));
            if (this.page != 0)
                writer.writeUint32(5, this.page);
            if (this.pageSize != 0)
                writer.writeUint32(6, this.pageSize);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QuestionTypeRemarksRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QuestionTypeRemarksRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.consult_type_id = reader.readInt32();
                        break;
                    case 2:
                        message.worker_account = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.start_time, () => message.start_time = dependency_5.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.end_time, () => message.end_time = dependency_5.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 5:
                        message.page = reader.readUint32();
                        break;
                    case 6:
                        message.pageSize = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QuestionTypeRemarksRequest {
            return QuestionTypeRemarksRequest.deserialize(bytes);
        }
    }
    export class QuestionTypeRemarksResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            question_type_remarks?: QuestionTypeRemark[];
            total?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("question_type_remarks" in data && data.question_type_remarks != undefined) {
                    this.question_type_remarks = data.question_type_remarks;
                }
                if ("total" in data && data.total != undefined) {
                    this.total = data.total;
                }
            }
        }
        get question_type_remarks() {
            return pb_1.Message.getRepeatedWrapperField(this, QuestionTypeRemark, 1) as QuestionTypeRemark[];
        }
        set question_type_remarks(value: QuestionTypeRemark[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get total() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set total(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            question_type_remarks?: ReturnType<typeof QuestionTypeRemark.prototype.toObject>[];
            total?: number;
        }): QuestionTypeRemarksResponse {
            const message = new QuestionTypeRemarksResponse({});
            if (data.question_type_remarks != null) {
                message.question_type_remarks = data.question_type_remarks.map(item => QuestionTypeRemark.fromObject(item));
            }
            if (data.total != null) {
                message.total = data.total;
            }
            return message;
        }
        toObject() {
            const data: {
                question_type_remarks?: ReturnType<typeof QuestionTypeRemark.prototype.toObject>[];
                total?: number;
            } = {};
            if (this.question_type_remarks != null) {
                data.question_type_remarks = this.question_type_remarks.map((item: QuestionTypeRemark) => item.toObject());
            }
            if (this.total != null) {
                data.total = this.total;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.question_type_remarks.length)
                writer.writeRepeatedMessage(1, this.question_type_remarks, (item: QuestionTypeRemark) => item.serialize(writer));
            if (this.total != 0)
                writer.writeInt64(2, this.total);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QuestionTypeRemarksResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QuestionTypeRemarksResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.question_type_remarks, () => pb_1.Message.addToRepeatedWrapperField(message, 1, QuestionTypeRemark.deserialize(reader), QuestionTypeRemark));
                        break;
                    case 2:
                        message.total = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QuestionTypeRemarksResponse {
            return QuestionTypeRemarksResponse.deserialize(bytes);
        }
    }
    export class QuestionTypeRemark extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            consult_type_id?: number;
            consult_type_name?: string;
            worker_id?: number;
            worker_account?: string;
            worker_nickname?: string;
            remark?: string;
            question_type_count?: number;
            question_types?: QuestionType[];
            created_at?: dependency_5.google.protobuf.Timestamp;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [8], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("consult_type_id" in data && data.consult_type_id != undefined) {
                    this.consult_type_id = data.consult_type_id;
                }
                if ("consult_type_name" in data && data.consult_type_name != undefined) {
                    this.consult_type_name = data.consult_type_name;
                }
                if ("worker_id" in data && data.worker_id != undefined) {
                    this.worker_id = data.worker_id;
                }
                if ("worker_account" in data && data.worker_account != undefined) {
                    this.worker_account = data.worker_account;
                }
                if ("worker_nickname" in data && data.worker_nickname != undefined) {
                    this.worker_nickname = data.worker_nickname;
                }
                if ("remark" in data && data.remark != undefined) {
                    this.remark = data.remark;
                }
                if ("question_type_count" in data && data.question_type_count != undefined) {
                    this.question_type_count = data.question_type_count;
                }
                if ("question_types" in data && data.question_types != undefined) {
                    this.question_types = data.question_types;
                }
                if ("created_at" in data && data.created_at != undefined) {
                    this.created_at = data.created_at;
                }
            }
        }
        get consult_type_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set consult_type_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get consult_type_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set consult_type_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get worker_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set worker_id(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get worker_account() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set worker_account(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get worker_nickname() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set worker_nickname(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get remark() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set remark(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get question_type_count() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set question_type_count(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get question_types() {
            return pb_1.Message.getRepeatedWrapperField(this, QuestionType, 8) as QuestionType[];
        }
        set question_types(value: QuestionType[]) {
            pb_1.Message.setRepeatedWrapperField(this, 8, value);
        }
        get created_at() {
            return pb_1.Message.getWrapperField(this, dependency_5.google.protobuf.Timestamp, 9) as dependency_5.google.protobuf.Timestamp;
        }
        set created_at(value: dependency_5.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        get has_created_at() {
            return pb_1.Message.getField(this, 9) != null;
        }
        static fromObject(data: {
            consult_type_id?: number;
            consult_type_name?: string;
            worker_id?: number;
            worker_account?: string;
            worker_nickname?: string;
            remark?: string;
            question_type_count?: number;
            question_types?: ReturnType<typeof QuestionType.prototype.toObject>[];
            created_at?: ReturnType<typeof dependency_5.google.protobuf.Timestamp.prototype.toObject>;
        }): QuestionTypeRemark {
            const message = new QuestionTypeRemark({});
            if (data.consult_type_id != null) {
                message.consult_type_id = data.consult_type_id;
            }
            if (data.consult_type_name != null) {
                message.consult_type_name = data.consult_type_name;
            }
            if (data.worker_id != null) {
                message.worker_id = data.worker_id;
            }
            if (data.worker_account != null) {
                message.worker_account = data.worker_account;
            }
            if (data.worker_nickname != null) {
                message.worker_nickname = data.worker_nickname;
            }
            if (data.remark != null) {
                message.remark = data.remark;
            }
            if (data.question_type_count != null) {
                message.question_type_count = data.question_type_count;
            }
            if (data.question_types != null) {
                message.question_types = data.question_types.map(item => QuestionType.fromObject(item));
            }
            if (data.created_at != null) {
                message.created_at = dependency_5.google.protobuf.Timestamp.fromObject(data.created_at);
            }
            return message;
        }
        toObject() {
            const data: {
                consult_type_id?: number;
                consult_type_name?: string;
                worker_id?: number;
                worker_account?: string;
                worker_nickname?: string;
                remark?: string;
                question_type_count?: number;
                question_types?: ReturnType<typeof QuestionType.prototype.toObject>[];
                created_at?: ReturnType<typeof dependency_5.google.protobuf.Timestamp.prototype.toObject>;
            } = {};
            if (this.consult_type_id != null) {
                data.consult_type_id = this.consult_type_id;
            }
            if (this.consult_type_name != null) {
                data.consult_type_name = this.consult_type_name;
            }
            if (this.worker_id != null) {
                data.worker_id = this.worker_id;
            }
            if (this.worker_account != null) {
                data.worker_account = this.worker_account;
            }
            if (this.worker_nickname != null) {
                data.worker_nickname = this.worker_nickname;
            }
            if (this.remark != null) {
                data.remark = this.remark;
            }
            if (this.question_type_count != null) {
                data.question_type_count = this.question_type_count;
            }
            if (this.question_types != null) {
                data.question_types = this.question_types.map((item: QuestionType) => item.toObject());
            }
            if (this.created_at != null) {
                data.created_at = this.created_at.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.consult_type_id != 0)
                writer.writeInt32(1, this.consult_type_id);
            if (this.consult_type_name.length)
                writer.writeString(2, this.consult_type_name);
            if (this.worker_id != 0)
                writer.writeInt32(3, this.worker_id);
            if (this.worker_account.length)
                writer.writeString(4, this.worker_account);
            if (this.worker_nickname.length)
                writer.writeString(5, this.worker_nickname);
            if (this.remark.length)
                writer.writeString(6, this.remark);
            if (this.question_type_count != 0)
                writer.writeInt64(7, this.question_type_count);
            if (this.question_types.length)
                writer.writeRepeatedMessage(8, this.question_types, (item: QuestionType) => item.serialize(writer));
            if (this.has_created_at)
                writer.writeMessage(9, this.created_at, () => this.created_at.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QuestionTypeRemark {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QuestionTypeRemark();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.consult_type_id = reader.readInt32();
                        break;
                    case 2:
                        message.consult_type_name = reader.readString();
                        break;
                    case 3:
                        message.worker_id = reader.readInt32();
                        break;
                    case 4:
                        message.worker_account = reader.readString();
                        break;
                    case 5:
                        message.worker_nickname = reader.readString();
                        break;
                    case 6:
                        message.remark = reader.readString();
                        break;
                    case 7:
                        message.question_type_count = reader.readInt64();
                        break;
                    case 8:
                        reader.readMessage(message.question_types, () => pb_1.Message.addToRepeatedWrapperField(message, 8, QuestionType.deserialize(reader), QuestionType));
                        break;
                    case 9:
                        reader.readMessage(message.created_at, () => message.created_at = dependency_5.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QuestionTypeRemark {
            return QuestionTypeRemark.deserialize(bytes);
        }
    }
    export class QuestionTypeWithWorkerStatsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            consult_type_id?: number;
            question_type_id?: number;
            worker_account?: string;
            worker_nickname?: string;
            start_time?: dependency_5.google.protobuf.Timestamp;
            end_time?: dependency_5.google.protobuf.Timestamp;
            page?: number;
            pageSize?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("consult_type_id" in data && data.consult_type_id != undefined) {
                    this.consult_type_id = data.consult_type_id;
                }
                if ("question_type_id" in data && data.question_type_id != undefined) {
                    this.question_type_id = data.question_type_id;
                }
                if ("worker_account" in data && data.worker_account != undefined) {
                    this.worker_account = data.worker_account;
                }
                if ("worker_nickname" in data && data.worker_nickname != undefined) {
                    this.worker_nickname = data.worker_nickname;
                }
                if ("start_time" in data && data.start_time != undefined) {
                    this.start_time = data.start_time;
                }
                if ("end_time" in data && data.end_time != undefined) {
                    this.end_time = data.end_time;
                }
                if ("page" in data && data.page != undefined) {
                    this.page = data.page;
                }
                if ("pageSize" in data && data.pageSize != undefined) {
                    this.pageSize = data.pageSize;
                }
            }
        }
        get consult_type_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set consult_type_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get question_type_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set question_type_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get worker_account() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set worker_account(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get worker_nickname() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set worker_nickname(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get start_time() {
            return pb_1.Message.getWrapperField(this, dependency_5.google.protobuf.Timestamp, 5) as dependency_5.google.protobuf.Timestamp;
        }
        set start_time(value: dependency_5.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_start_time() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get end_time() {
            return pb_1.Message.getWrapperField(this, dependency_5.google.protobuf.Timestamp, 6) as dependency_5.google.protobuf.Timestamp;
        }
        set end_time(value: dependency_5.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get has_end_time() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get page() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set page(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get pageSize() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set pageSize(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        static fromObject(data: {
            consult_type_id?: number;
            question_type_id?: number;
            worker_account?: string;
            worker_nickname?: string;
            start_time?: ReturnType<typeof dependency_5.google.protobuf.Timestamp.prototype.toObject>;
            end_time?: ReturnType<typeof dependency_5.google.protobuf.Timestamp.prototype.toObject>;
            page?: number;
            pageSize?: number;
        }): QuestionTypeWithWorkerStatsRequest {
            const message = new QuestionTypeWithWorkerStatsRequest({});
            if (data.consult_type_id != null) {
                message.consult_type_id = data.consult_type_id;
            }
            if (data.question_type_id != null) {
                message.question_type_id = data.question_type_id;
            }
            if (data.worker_account != null) {
                message.worker_account = data.worker_account;
            }
            if (data.worker_nickname != null) {
                message.worker_nickname = data.worker_nickname;
            }
            if (data.start_time != null) {
                message.start_time = dependency_5.google.protobuf.Timestamp.fromObject(data.start_time);
            }
            if (data.end_time != null) {
                message.end_time = dependency_5.google.protobuf.Timestamp.fromObject(data.end_time);
            }
            if (data.page != null) {
                message.page = data.page;
            }
            if (data.pageSize != null) {
                message.pageSize = data.pageSize;
            }
            return message;
        }
        toObject() {
            const data: {
                consult_type_id?: number;
                question_type_id?: number;
                worker_account?: string;
                worker_nickname?: string;
                start_time?: ReturnType<typeof dependency_5.google.protobuf.Timestamp.prototype.toObject>;
                end_time?: ReturnType<typeof dependency_5.google.protobuf.Timestamp.prototype.toObject>;
                page?: number;
                pageSize?: number;
            } = {};
            if (this.consult_type_id != null) {
                data.consult_type_id = this.consult_type_id;
            }
            if (this.question_type_id != null) {
                data.question_type_id = this.question_type_id;
            }
            if (this.worker_account != null) {
                data.worker_account = this.worker_account;
            }
            if (this.worker_nickname != null) {
                data.worker_nickname = this.worker_nickname;
            }
            if (this.start_time != null) {
                data.start_time = this.start_time.toObject();
            }
            if (this.end_time != null) {
                data.end_time = this.end_time.toObject();
            }
            if (this.page != null) {
                data.page = this.page;
            }
            if (this.pageSize != null) {
                data.pageSize = this.pageSize;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.consult_type_id != 0)
                writer.writeInt32(1, this.consult_type_id);
            if (this.question_type_id != 0)
                writer.writeInt32(2, this.question_type_id);
            if (this.worker_account.length)
                writer.writeString(3, this.worker_account);
            if (this.worker_nickname.length)
                writer.writeString(4, this.worker_nickname);
            if (this.has_start_time)
                writer.writeMessage(5, this.start_time, () => this.start_time.serialize(writer));
            if (this.has_end_time)
                writer.writeMessage(6, this.end_time, () => this.end_time.serialize(writer));
            if (this.page != 0)
                writer.writeUint32(7, this.page);
            if (this.pageSize != 0)
                writer.writeUint32(8, this.pageSize);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QuestionTypeWithWorkerStatsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QuestionTypeWithWorkerStatsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.consult_type_id = reader.readInt32();
                        break;
                    case 2:
                        message.question_type_id = reader.readInt32();
                        break;
                    case 3:
                        message.worker_account = reader.readString();
                        break;
                    case 4:
                        message.worker_nickname = reader.readString();
                        break;
                    case 5:
                        reader.readMessage(message.start_time, () => message.start_time = dependency_5.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.end_time, () => message.end_time = dependency_5.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 7:
                        message.page = reader.readUint32();
                        break;
                    case 8:
                        message.pageSize = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QuestionTypeWithWorkerStatsRequest {
            return QuestionTypeWithWorkerStatsRequest.deserialize(bytes);
        }
    }
    export class QuestionTypeWithWorkerStatsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            question_type_stats?: QuestionTypeWithWorkerStat[];
            total?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("question_type_stats" in data && data.question_type_stats != undefined) {
                    this.question_type_stats = data.question_type_stats;
                }
                if ("total" in data && data.total != undefined) {
                    this.total = data.total;
                }
            }
        }
        get question_type_stats() {
            return pb_1.Message.getRepeatedWrapperField(this, QuestionTypeWithWorkerStat, 1) as QuestionTypeWithWorkerStat[];
        }
        set question_type_stats(value: QuestionTypeWithWorkerStat[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get total() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set total(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            question_type_stats?: ReturnType<typeof QuestionTypeWithWorkerStat.prototype.toObject>[];
            total?: number;
        }): QuestionTypeWithWorkerStatsResponse {
            const message = new QuestionTypeWithWorkerStatsResponse({});
            if (data.question_type_stats != null) {
                message.question_type_stats = data.question_type_stats.map(item => QuestionTypeWithWorkerStat.fromObject(item));
            }
            if (data.total != null) {
                message.total = data.total;
            }
            return message;
        }
        toObject() {
            const data: {
                question_type_stats?: ReturnType<typeof QuestionTypeWithWorkerStat.prototype.toObject>[];
                total?: number;
            } = {};
            if (this.question_type_stats != null) {
                data.question_type_stats = this.question_type_stats.map((item: QuestionTypeWithWorkerStat) => item.toObject());
            }
            if (this.total != null) {
                data.total = this.total;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.question_type_stats.length)
                writer.writeRepeatedMessage(1, this.question_type_stats, (item: QuestionTypeWithWorkerStat) => item.serialize(writer));
            if (this.total != 0)
                writer.writeInt64(2, this.total);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QuestionTypeWithWorkerStatsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QuestionTypeWithWorkerStatsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.question_type_stats, () => pb_1.Message.addToRepeatedWrapperField(message, 1, QuestionTypeWithWorkerStat.deserialize(reader), QuestionTypeWithWorkerStat));
                        break;
                    case 2:
                        message.total = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QuestionTypeWithWorkerStatsResponse {
            return QuestionTypeWithWorkerStatsResponse.deserialize(bytes);
        }
    }
    export class QuestionTypeWithWorkerStat extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            question_type_id?: number;
            question_type_title?: string;
            consult_type_id?: number;
            consult_type_name?: string;
            worker_id?: number;
            worker_account?: string;
            worker_nickname?: string;
            group_id?: number;
            group_nickname?: string;
            sub_group_id?: number;
            sub_group_nickname?: string;
            add_remark_num?: number;
            reception_user_num?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("question_type_id" in data && data.question_type_id != undefined) {
                    this.question_type_id = data.question_type_id;
                }
                if ("question_type_title" in data && data.question_type_title != undefined) {
                    this.question_type_title = data.question_type_title;
                }
                if ("consult_type_id" in data && data.consult_type_id != undefined) {
                    this.consult_type_id = data.consult_type_id;
                }
                if ("consult_type_name" in data && data.consult_type_name != undefined) {
                    this.consult_type_name = data.consult_type_name;
                }
                if ("worker_id" in data && data.worker_id != undefined) {
                    this.worker_id = data.worker_id;
                }
                if ("worker_account" in data && data.worker_account != undefined) {
                    this.worker_account = data.worker_account;
                }
                if ("worker_nickname" in data && data.worker_nickname != undefined) {
                    this.worker_nickname = data.worker_nickname;
                }
                if ("group_id" in data && data.group_id != undefined) {
                    this.group_id = data.group_id;
                }
                if ("group_nickname" in data && data.group_nickname != undefined) {
                    this.group_nickname = data.group_nickname;
                }
                if ("sub_group_id" in data && data.sub_group_id != undefined) {
                    this.sub_group_id = data.sub_group_id;
                }
                if ("sub_group_nickname" in data && data.sub_group_nickname != undefined) {
                    this.sub_group_nickname = data.sub_group_nickname;
                }
                if ("add_remark_num" in data && data.add_remark_num != undefined) {
                    this.add_remark_num = data.add_remark_num;
                }
                if ("reception_user_num" in data && data.reception_user_num != undefined) {
                    this.reception_user_num = data.reception_user_num;
                }
            }
        }
        get question_type_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set question_type_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get question_type_title() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set question_type_title(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get consult_type_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set consult_type_id(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get consult_type_name() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set consult_type_name(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get worker_id() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set worker_id(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get worker_account() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set worker_account(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get worker_nickname() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set worker_nickname(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get group_id() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set group_id(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get group_nickname() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set group_nickname(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get sub_group_id() {
            return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
        }
        set sub_group_id(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        get sub_group_nickname() {
            return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
        }
        set sub_group_nickname(value: string) {
            pb_1.Message.setField(this, 11, value);
        }
        get add_remark_num() {
            return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;
        }
        set add_remark_num(value: number) {
            pb_1.Message.setField(this, 12, value);
        }
        get reception_user_num() {
            return pb_1.Message.getFieldWithDefault(this, 13, 0) as number;
        }
        set reception_user_num(value: number) {
            pb_1.Message.setField(this, 13, value);
        }
        static fromObject(data: {
            question_type_id?: number;
            question_type_title?: string;
            consult_type_id?: number;
            consult_type_name?: string;
            worker_id?: number;
            worker_account?: string;
            worker_nickname?: string;
            group_id?: number;
            group_nickname?: string;
            sub_group_id?: number;
            sub_group_nickname?: string;
            add_remark_num?: number;
            reception_user_num?: number;
        }): QuestionTypeWithWorkerStat {
            const message = new QuestionTypeWithWorkerStat({});
            if (data.question_type_id != null) {
                message.question_type_id = data.question_type_id;
            }
            if (data.question_type_title != null) {
                message.question_type_title = data.question_type_title;
            }
            if (data.consult_type_id != null) {
                message.consult_type_id = data.consult_type_id;
            }
            if (data.consult_type_name != null) {
                message.consult_type_name = data.consult_type_name;
            }
            if (data.worker_id != null) {
                message.worker_id = data.worker_id;
            }
            if (data.worker_account != null) {
                message.worker_account = data.worker_account;
            }
            if (data.worker_nickname != null) {
                message.worker_nickname = data.worker_nickname;
            }
            if (data.group_id != null) {
                message.group_id = data.group_id;
            }
            if (data.group_nickname != null) {
                message.group_nickname = data.group_nickname;
            }
            if (data.sub_group_id != null) {
                message.sub_group_id = data.sub_group_id;
            }
            if (data.sub_group_nickname != null) {
                message.sub_group_nickname = data.sub_group_nickname;
            }
            if (data.add_remark_num != null) {
                message.add_remark_num = data.add_remark_num;
            }
            if (data.reception_user_num != null) {
                message.reception_user_num = data.reception_user_num;
            }
            return message;
        }
        toObject() {
            const data: {
                question_type_id?: number;
                question_type_title?: string;
                consult_type_id?: number;
                consult_type_name?: string;
                worker_id?: number;
                worker_account?: string;
                worker_nickname?: string;
                group_id?: number;
                group_nickname?: string;
                sub_group_id?: number;
                sub_group_nickname?: string;
                add_remark_num?: number;
                reception_user_num?: number;
            } = {};
            if (this.question_type_id != null) {
                data.question_type_id = this.question_type_id;
            }
            if (this.question_type_title != null) {
                data.question_type_title = this.question_type_title;
            }
            if (this.consult_type_id != null) {
                data.consult_type_id = this.consult_type_id;
            }
            if (this.consult_type_name != null) {
                data.consult_type_name = this.consult_type_name;
            }
            if (this.worker_id != null) {
                data.worker_id = this.worker_id;
            }
            if (this.worker_account != null) {
                data.worker_account = this.worker_account;
            }
            if (this.worker_nickname != null) {
                data.worker_nickname = this.worker_nickname;
            }
            if (this.group_id != null) {
                data.group_id = this.group_id;
            }
            if (this.group_nickname != null) {
                data.group_nickname = this.group_nickname;
            }
            if (this.sub_group_id != null) {
                data.sub_group_id = this.sub_group_id;
            }
            if (this.sub_group_nickname != null) {
                data.sub_group_nickname = this.sub_group_nickname;
            }
            if (this.add_remark_num != null) {
                data.add_remark_num = this.add_remark_num;
            }
            if (this.reception_user_num != null) {
                data.reception_user_num = this.reception_user_num;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.question_type_id != 0)
                writer.writeInt32(1, this.question_type_id);
            if (this.question_type_title.length)
                writer.writeString(2, this.question_type_title);
            if (this.consult_type_id != 0)
                writer.writeInt32(3, this.consult_type_id);
            if (this.consult_type_name.length)
                writer.writeString(4, this.consult_type_name);
            if (this.worker_id != 0)
                writer.writeInt32(5, this.worker_id);
            if (this.worker_account.length)
                writer.writeString(6, this.worker_account);
            if (this.worker_nickname.length)
                writer.writeString(7, this.worker_nickname);
            if (this.group_id != 0)
                writer.writeInt32(8, this.group_id);
            if (this.group_nickname.length)
                writer.writeString(9, this.group_nickname);
            if (this.sub_group_id != 0)
                writer.writeInt32(10, this.sub_group_id);
            if (this.sub_group_nickname.length)
                writer.writeString(11, this.sub_group_nickname);
            if (this.add_remark_num != 0)
                writer.writeInt32(12, this.add_remark_num);
            if (this.reception_user_num != 0)
                writer.writeInt32(13, this.reception_user_num);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QuestionTypeWithWorkerStat {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QuestionTypeWithWorkerStat();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.question_type_id = reader.readInt32();
                        break;
                    case 2:
                        message.question_type_title = reader.readString();
                        break;
                    case 3:
                        message.consult_type_id = reader.readInt32();
                        break;
                    case 4:
                        message.consult_type_name = reader.readString();
                        break;
                    case 5:
                        message.worker_id = reader.readInt32();
                        break;
                    case 6:
                        message.worker_account = reader.readString();
                        break;
                    case 7:
                        message.worker_nickname = reader.readString();
                        break;
                    case 8:
                        message.group_id = reader.readInt32();
                        break;
                    case 9:
                        message.group_nickname = reader.readString();
                        break;
                    case 10:
                        message.sub_group_id = reader.readInt32();
                        break;
                    case 11:
                        message.sub_group_nickname = reader.readString();
                        break;
                    case 12:
                        message.add_remark_num = reader.readInt32();
                        break;
                    case 13:
                        message.reception_user_num = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QuestionTypeWithWorkerStat {
            return QuestionTypeWithWorkerStat.deserialize(bytes);
        }
    }
    export class QuestionTypeRemarkStatsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            group_id?: number;
            worker_account?: string;
            worker_nickname?: string;
            start_time?: dependency_5.google.protobuf.Timestamp;
            end_time?: dependency_5.google.protobuf.Timestamp;
            page?: number;
            pageSize?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("group_id" in data && data.group_id != undefined) {
                    this.group_id = data.group_id;
                }
                if ("worker_account" in data && data.worker_account != undefined) {
                    this.worker_account = data.worker_account;
                }
                if ("worker_nickname" in data && data.worker_nickname != undefined) {
                    this.worker_nickname = data.worker_nickname;
                }
                if ("start_time" in data && data.start_time != undefined) {
                    this.start_time = data.start_time;
                }
                if ("end_time" in data && data.end_time != undefined) {
                    this.end_time = data.end_time;
                }
                if ("page" in data && data.page != undefined) {
                    this.page = data.page;
                }
                if ("pageSize" in data && data.pageSize != undefined) {
                    this.pageSize = data.pageSize;
                }
            }
        }
        get group_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set group_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get worker_account() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set worker_account(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get worker_nickname() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set worker_nickname(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get start_time() {
            return pb_1.Message.getWrapperField(this, dependency_5.google.protobuf.Timestamp, 4) as dependency_5.google.protobuf.Timestamp;
        }
        set start_time(value: dependency_5.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_start_time() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get end_time() {
            return pb_1.Message.getWrapperField(this, dependency_5.google.protobuf.Timestamp, 5) as dependency_5.google.protobuf.Timestamp;
        }
        set end_time(value: dependency_5.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_end_time() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get page() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set page(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get pageSize() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set pageSize(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            group_id?: number;
            worker_account?: string;
            worker_nickname?: string;
            start_time?: ReturnType<typeof dependency_5.google.protobuf.Timestamp.prototype.toObject>;
            end_time?: ReturnType<typeof dependency_5.google.protobuf.Timestamp.prototype.toObject>;
            page?: number;
            pageSize?: number;
        }): QuestionTypeRemarkStatsRequest {
            const message = new QuestionTypeRemarkStatsRequest({});
            if (data.group_id != null) {
                message.group_id = data.group_id;
            }
            if (data.worker_account != null) {
                message.worker_account = data.worker_account;
            }
            if (data.worker_nickname != null) {
                message.worker_nickname = data.worker_nickname;
            }
            if (data.start_time != null) {
                message.start_time = dependency_5.google.protobuf.Timestamp.fromObject(data.start_time);
            }
            if (data.end_time != null) {
                message.end_time = dependency_5.google.protobuf.Timestamp.fromObject(data.end_time);
            }
            if (data.page != null) {
                message.page = data.page;
            }
            if (data.pageSize != null) {
                message.pageSize = data.pageSize;
            }
            return message;
        }
        toObject() {
            const data: {
                group_id?: number;
                worker_account?: string;
                worker_nickname?: string;
                start_time?: ReturnType<typeof dependency_5.google.protobuf.Timestamp.prototype.toObject>;
                end_time?: ReturnType<typeof dependency_5.google.protobuf.Timestamp.prototype.toObject>;
                page?: number;
                pageSize?: number;
            } = {};
            if (this.group_id != null) {
                data.group_id = this.group_id;
            }
            if (this.worker_account != null) {
                data.worker_account = this.worker_account;
            }
            if (this.worker_nickname != null) {
                data.worker_nickname = this.worker_nickname;
            }
            if (this.start_time != null) {
                data.start_time = this.start_time.toObject();
            }
            if (this.end_time != null) {
                data.end_time = this.end_time.toObject();
            }
            if (this.page != null) {
                data.page = this.page;
            }
            if (this.pageSize != null) {
                data.pageSize = this.pageSize;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.group_id != 0)
                writer.writeInt32(1, this.group_id);
            if (this.worker_account.length)
                writer.writeString(2, this.worker_account);
            if (this.worker_nickname.length)
                writer.writeString(3, this.worker_nickname);
            if (this.has_start_time)
                writer.writeMessage(4, this.start_time, () => this.start_time.serialize(writer));
            if (this.has_end_time)
                writer.writeMessage(5, this.end_time, () => this.end_time.serialize(writer));
            if (this.page != 0)
                writer.writeUint32(6, this.page);
            if (this.pageSize != 0)
                writer.writeUint32(7, this.pageSize);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QuestionTypeRemarkStatsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QuestionTypeRemarkStatsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.group_id = reader.readInt32();
                        break;
                    case 2:
                        message.worker_account = reader.readString();
                        break;
                    case 3:
                        message.worker_nickname = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.start_time, () => message.start_time = dependency_5.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.end_time, () => message.end_time = dependency_5.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 6:
                        message.page = reader.readUint32();
                        break;
                    case 7:
                        message.pageSize = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QuestionTypeRemarkStatsRequest {
            return QuestionTypeRemarkStatsRequest.deserialize(bytes);
        }
    }
    export class QuestionTypeRemarkStatsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            question_type_remark_stats?: QuestionTypeRemarkStat[];
            total?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("question_type_remark_stats" in data && data.question_type_remark_stats != undefined) {
                    this.question_type_remark_stats = data.question_type_remark_stats;
                }
                if ("total" in data && data.total != undefined) {
                    this.total = data.total;
                }
            }
        }
        get question_type_remark_stats() {
            return pb_1.Message.getRepeatedWrapperField(this, QuestionTypeRemarkStat, 1) as QuestionTypeRemarkStat[];
        }
        set question_type_remark_stats(value: QuestionTypeRemarkStat[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get total() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set total(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            question_type_remark_stats?: ReturnType<typeof QuestionTypeRemarkStat.prototype.toObject>[];
            total?: number;
        }): QuestionTypeRemarkStatsResponse {
            const message = new QuestionTypeRemarkStatsResponse({});
            if (data.question_type_remark_stats != null) {
                message.question_type_remark_stats = data.question_type_remark_stats.map(item => QuestionTypeRemarkStat.fromObject(item));
            }
            if (data.total != null) {
                message.total = data.total;
            }
            return message;
        }
        toObject() {
            const data: {
                question_type_remark_stats?: ReturnType<typeof QuestionTypeRemarkStat.prototype.toObject>[];
                total?: number;
            } = {};
            if (this.question_type_remark_stats != null) {
                data.question_type_remark_stats = this.question_type_remark_stats.map((item: QuestionTypeRemarkStat) => item.toObject());
            }
            if (this.total != null) {
                data.total = this.total;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.question_type_remark_stats.length)
                writer.writeRepeatedMessage(1, this.question_type_remark_stats, (item: QuestionTypeRemarkStat) => item.serialize(writer));
            if (this.total != 0)
                writer.writeInt64(2, this.total);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QuestionTypeRemarkStatsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QuestionTypeRemarkStatsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.question_type_remark_stats, () => pb_1.Message.addToRepeatedWrapperField(message, 1, QuestionTypeRemarkStat.deserialize(reader), QuestionTypeRemarkStat));
                        break;
                    case 2:
                        message.total = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QuestionTypeRemarkStatsResponse {
            return QuestionTypeRemarkStatsResponse.deserialize(bytes);
        }
    }
    export class QuestionTypeRemarkStat extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            worker_id?: number;
            worker_account?: string;
            worker_nickname?: string;
            group_id?: number;
            group_nickname?: string;
            sub_group_id?: number;
            sub_group_nickname?: string;
            add_remark_num?: number;
            reception_user_num?: number;
            day_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("worker_id" in data && data.worker_id != undefined) {
                    this.worker_id = data.worker_id;
                }
                if ("worker_account" in data && data.worker_account != undefined) {
                    this.worker_account = data.worker_account;
                }
                if ("worker_nickname" in data && data.worker_nickname != undefined) {
                    this.worker_nickname = data.worker_nickname;
                }
                if ("group_id" in data && data.group_id != undefined) {
                    this.group_id = data.group_id;
                }
                if ("group_nickname" in data && data.group_nickname != undefined) {
                    this.group_nickname = data.group_nickname;
                }
                if ("sub_group_id" in data && data.sub_group_id != undefined) {
                    this.sub_group_id = data.sub_group_id;
                }
                if ("sub_group_nickname" in data && data.sub_group_nickname != undefined) {
                    this.sub_group_nickname = data.sub_group_nickname;
                }
                if ("add_remark_num" in data && data.add_remark_num != undefined) {
                    this.add_remark_num = data.add_remark_num;
                }
                if ("reception_user_num" in data && data.reception_user_num != undefined) {
                    this.reception_user_num = data.reception_user_num;
                }
                if ("day_id" in data && data.day_id != undefined) {
                    this.day_id = data.day_id;
                }
            }
        }
        get worker_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set worker_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get worker_account() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set worker_account(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get worker_nickname() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set worker_nickname(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get group_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set group_id(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get group_nickname() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set group_nickname(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get sub_group_id() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set sub_group_id(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get sub_group_nickname() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set sub_group_nickname(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get add_remark_num() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set add_remark_num(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get reception_user_num() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set reception_user_num(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get day_id() {
            return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
        }
        set day_id(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        static fromObject(data: {
            worker_id?: number;
            worker_account?: string;
            worker_nickname?: string;
            group_id?: number;
            group_nickname?: string;
            sub_group_id?: number;
            sub_group_nickname?: string;
            add_remark_num?: number;
            reception_user_num?: number;
            day_id?: number;
        }): QuestionTypeRemarkStat {
            const message = new QuestionTypeRemarkStat({});
            if (data.worker_id != null) {
                message.worker_id = data.worker_id;
            }
            if (data.worker_account != null) {
                message.worker_account = data.worker_account;
            }
            if (data.worker_nickname != null) {
                message.worker_nickname = data.worker_nickname;
            }
            if (data.group_id != null) {
                message.group_id = data.group_id;
            }
            if (data.group_nickname != null) {
                message.group_nickname = data.group_nickname;
            }
            if (data.sub_group_id != null) {
                message.sub_group_id = data.sub_group_id;
            }
            if (data.sub_group_nickname != null) {
                message.sub_group_nickname = data.sub_group_nickname;
            }
            if (data.add_remark_num != null) {
                message.add_remark_num = data.add_remark_num;
            }
            if (data.reception_user_num != null) {
                message.reception_user_num = data.reception_user_num;
            }
            if (data.day_id != null) {
                message.day_id = data.day_id;
            }
            return message;
        }
        toObject() {
            const data: {
                worker_id?: number;
                worker_account?: string;
                worker_nickname?: string;
                group_id?: number;
                group_nickname?: string;
                sub_group_id?: number;
                sub_group_nickname?: string;
                add_remark_num?: number;
                reception_user_num?: number;
                day_id?: number;
            } = {};
            if (this.worker_id != null) {
                data.worker_id = this.worker_id;
            }
            if (this.worker_account != null) {
                data.worker_account = this.worker_account;
            }
            if (this.worker_nickname != null) {
                data.worker_nickname = this.worker_nickname;
            }
            if (this.group_id != null) {
                data.group_id = this.group_id;
            }
            if (this.group_nickname != null) {
                data.group_nickname = this.group_nickname;
            }
            if (this.sub_group_id != null) {
                data.sub_group_id = this.sub_group_id;
            }
            if (this.sub_group_nickname != null) {
                data.sub_group_nickname = this.sub_group_nickname;
            }
            if (this.add_remark_num != null) {
                data.add_remark_num = this.add_remark_num;
            }
            if (this.reception_user_num != null) {
                data.reception_user_num = this.reception_user_num;
            }
            if (this.day_id != null) {
                data.day_id = this.day_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.worker_id != 0)
                writer.writeInt32(1, this.worker_id);
            if (this.worker_account.length)
                writer.writeString(2, this.worker_account);
            if (this.worker_nickname.length)
                writer.writeString(3, this.worker_nickname);
            if (this.group_id != 0)
                writer.writeInt32(4, this.group_id);
            if (this.group_nickname.length)
                writer.writeString(5, this.group_nickname);
            if (this.sub_group_id != 0)
                writer.writeInt32(6, this.sub_group_id);
            if (this.sub_group_nickname.length)
                writer.writeString(7, this.sub_group_nickname);
            if (this.add_remark_num != 0)
                writer.writeInt32(8, this.add_remark_num);
            if (this.reception_user_num != 0)
                writer.writeInt32(9, this.reception_user_num);
            if (this.day_id != 0)
                writer.writeInt32(10, this.day_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QuestionTypeRemarkStat {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QuestionTypeRemarkStat();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.worker_id = reader.readInt32();
                        break;
                    case 2:
                        message.worker_account = reader.readString();
                        break;
                    case 3:
                        message.worker_nickname = reader.readString();
                        break;
                    case 4:
                        message.group_id = reader.readInt32();
                        break;
                    case 5:
                        message.group_nickname = reader.readString();
                        break;
                    case 6:
                        message.sub_group_id = reader.readInt32();
                        break;
                    case 7:
                        message.sub_group_nickname = reader.readString();
                        break;
                    case 8:
                        message.add_remark_num = reader.readInt32();
                        break;
                    case 9:
                        message.reception_user_num = reader.readInt32();
                        break;
                    case 10:
                        message.day_id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QuestionTypeRemarkStat {
            return QuestionTypeRemarkStat.deserialize(bytes);
        }
    }
    export class QuestionTypeWorkerRemarkStatsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            worker_id?: number;
            day_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("worker_id" in data && data.worker_id != undefined) {
                    this.worker_id = data.worker_id;
                }
                if ("day_id" in data && data.day_id != undefined) {
                    this.day_id = data.day_id;
                }
            }
        }
        get worker_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set worker_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get day_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set day_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            worker_id?: number;
            day_id?: number;
        }): QuestionTypeWorkerRemarkStatsRequest {
            const message = new QuestionTypeWorkerRemarkStatsRequest({});
            if (data.worker_id != null) {
                message.worker_id = data.worker_id;
            }
            if (data.day_id != null) {
                message.day_id = data.day_id;
            }
            return message;
        }
        toObject() {
            const data: {
                worker_id?: number;
                day_id?: number;
            } = {};
            if (this.worker_id != null) {
                data.worker_id = this.worker_id;
            }
            if (this.day_id != null) {
                data.day_id = this.day_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.worker_id != 0)
                writer.writeInt32(1, this.worker_id);
            if (this.day_id != 0)
                writer.writeInt32(2, this.day_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QuestionTypeWorkerRemarkStatsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QuestionTypeWorkerRemarkStatsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.worker_id = reader.readInt32();
                        break;
                    case 2:
                        message.day_id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QuestionTypeWorkerRemarkStatsRequest {
            return QuestionTypeWorkerRemarkStatsRequest.deserialize(bytes);
        }
    }
    export class QuestionTypeWorkerRemarkStatsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            question_type_worker_remark_stats?: QuestionTypeWorkerRemarkStat[];
            total?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("question_type_worker_remark_stats" in data && data.question_type_worker_remark_stats != undefined) {
                    this.question_type_worker_remark_stats = data.question_type_worker_remark_stats;
                }
                if ("total" in data && data.total != undefined) {
                    this.total = data.total;
                }
            }
        }
        get question_type_worker_remark_stats() {
            return pb_1.Message.getRepeatedWrapperField(this, QuestionTypeWorkerRemarkStat, 1) as QuestionTypeWorkerRemarkStat[];
        }
        set question_type_worker_remark_stats(value: QuestionTypeWorkerRemarkStat[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get total() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set total(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            question_type_worker_remark_stats?: ReturnType<typeof QuestionTypeWorkerRemarkStat.prototype.toObject>[];
            total?: number;
        }): QuestionTypeWorkerRemarkStatsResponse {
            const message = new QuestionTypeWorkerRemarkStatsResponse({});
            if (data.question_type_worker_remark_stats != null) {
                message.question_type_worker_remark_stats = data.question_type_worker_remark_stats.map(item => QuestionTypeWorkerRemarkStat.fromObject(item));
            }
            if (data.total != null) {
                message.total = data.total;
            }
            return message;
        }
        toObject() {
            const data: {
                question_type_worker_remark_stats?: ReturnType<typeof QuestionTypeWorkerRemarkStat.prototype.toObject>[];
                total?: number;
            } = {};
            if (this.question_type_worker_remark_stats != null) {
                data.question_type_worker_remark_stats = this.question_type_worker_remark_stats.map((item: QuestionTypeWorkerRemarkStat) => item.toObject());
            }
            if (this.total != null) {
                data.total = this.total;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.question_type_worker_remark_stats.length)
                writer.writeRepeatedMessage(1, this.question_type_worker_remark_stats, (item: QuestionTypeWorkerRemarkStat) => item.serialize(writer));
            if (this.total != 0)
                writer.writeInt64(2, this.total);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QuestionTypeWorkerRemarkStatsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QuestionTypeWorkerRemarkStatsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.question_type_worker_remark_stats, () => pb_1.Message.addToRepeatedWrapperField(message, 1, QuestionTypeWorkerRemarkStat.deserialize(reader), QuestionTypeWorkerRemarkStat));
                        break;
                    case 2:
                        message.total = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QuestionTypeWorkerRemarkStatsResponse {
            return QuestionTypeWorkerRemarkStatsResponse.deserialize(bytes);
        }
    }
    export class QuestionTypeWorkerRemarkStat extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            question_type_id?: number;
            question_type_title?: string;
            add_remark_num?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("question_type_id" in data && data.question_type_id != undefined) {
                    this.question_type_id = data.question_type_id;
                }
                if ("question_type_title" in data && data.question_type_title != undefined) {
                    this.question_type_title = data.question_type_title;
                }
                if ("add_remark_num" in data && data.add_remark_num != undefined) {
                    this.add_remark_num = data.add_remark_num;
                }
            }
        }
        get question_type_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set question_type_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get question_type_title() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set question_type_title(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get add_remark_num() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set add_remark_num(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            question_type_id?: number;
            question_type_title?: string;
            add_remark_num?: number;
        }): QuestionTypeWorkerRemarkStat {
            const message = new QuestionTypeWorkerRemarkStat({});
            if (data.question_type_id != null) {
                message.question_type_id = data.question_type_id;
            }
            if (data.question_type_title != null) {
                message.question_type_title = data.question_type_title;
            }
            if (data.add_remark_num != null) {
                message.add_remark_num = data.add_remark_num;
            }
            return message;
        }
        toObject() {
            const data: {
                question_type_id?: number;
                question_type_title?: string;
                add_remark_num?: number;
            } = {};
            if (this.question_type_id != null) {
                data.question_type_id = this.question_type_id;
            }
            if (this.question_type_title != null) {
                data.question_type_title = this.question_type_title;
            }
            if (this.add_remark_num != null) {
                data.add_remark_num = this.add_remark_num;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.question_type_id != 0)
                writer.writeInt32(1, this.question_type_id);
            if (this.question_type_title.length)
                writer.writeString(2, this.question_type_title);
            if (this.add_remark_num != 0)
                writer.writeInt32(3, this.add_remark_num);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QuestionTypeWorkerRemarkStat {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QuestionTypeWorkerRemarkStat();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.question_type_id = reader.readInt32();
                        break;
                    case 2:
                        message.question_type_title = reader.readString();
                        break;
                    case 3:
                        message.add_remark_num = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QuestionTypeWorkerRemarkStat {
            return QuestionTypeWorkerRemarkStat.deserialize(bytes);
        }
    }
    export class ConsultTypeRemarkStatsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            page?: number;
            pageSize?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("page" in data && data.page != undefined) {
                    this.page = data.page;
                }
                if ("pageSize" in data && data.pageSize != undefined) {
                    this.pageSize = data.pageSize;
                }
            }
        }
        get page() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set page(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get pageSize() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set pageSize(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            page?: number;
            pageSize?: number;
        }): ConsultTypeRemarkStatsRequest {
            const message = new ConsultTypeRemarkStatsRequest({});
            if (data.page != null) {
                message.page = data.page;
            }
            if (data.pageSize != null) {
                message.pageSize = data.pageSize;
            }
            return message;
        }
        toObject() {
            const data: {
                page?: number;
                pageSize?: number;
            } = {};
            if (this.page != null) {
                data.page = this.page;
            }
            if (this.pageSize != null) {
                data.pageSize = this.pageSize;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.page != 0)
                writer.writeUint32(1, this.page);
            if (this.pageSize != 0)
                writer.writeUint32(2, this.pageSize);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ConsultTypeRemarkStatsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ConsultTypeRemarkStatsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.page = reader.readUint32();
                        break;
                    case 2:
                        message.pageSize = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ConsultTypeRemarkStatsRequest {
            return ConsultTypeRemarkStatsRequest.deserialize(bytes);
        }
    }
    export class ConsultTypeRemarkStatsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            consult_type_remark_stats?: ConsultTypeRemarkStat[];
            total?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("consult_type_remark_stats" in data && data.consult_type_remark_stats != undefined) {
                    this.consult_type_remark_stats = data.consult_type_remark_stats;
                }
                if ("total" in data && data.total != undefined) {
                    this.total = data.total;
                }
            }
        }
        get consult_type_remark_stats() {
            return pb_1.Message.getRepeatedWrapperField(this, ConsultTypeRemarkStat, 1) as ConsultTypeRemarkStat[];
        }
        set consult_type_remark_stats(value: ConsultTypeRemarkStat[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get total() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set total(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            consult_type_remark_stats?: ReturnType<typeof ConsultTypeRemarkStat.prototype.toObject>[];
            total?: number;
        }): ConsultTypeRemarkStatsResponse {
            const message = new ConsultTypeRemarkStatsResponse({});
            if (data.consult_type_remark_stats != null) {
                message.consult_type_remark_stats = data.consult_type_remark_stats.map(item => ConsultTypeRemarkStat.fromObject(item));
            }
            if (data.total != null) {
                message.total = data.total;
            }
            return message;
        }
        toObject() {
            const data: {
                consult_type_remark_stats?: ReturnType<typeof ConsultTypeRemarkStat.prototype.toObject>[];
                total?: number;
            } = {};
            if (this.consult_type_remark_stats != null) {
                data.consult_type_remark_stats = this.consult_type_remark_stats.map((item: ConsultTypeRemarkStat) => item.toObject());
            }
            if (this.total != null) {
                data.total = this.total;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.consult_type_remark_stats.length)
                writer.writeRepeatedMessage(1, this.consult_type_remark_stats, (item: ConsultTypeRemarkStat) => item.serialize(writer));
            if (this.total != 0)
                writer.writeInt64(2, this.total);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ConsultTypeRemarkStatsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ConsultTypeRemarkStatsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.consult_type_remark_stats, () => pb_1.Message.addToRepeatedWrapperField(message, 1, ConsultTypeRemarkStat.deserialize(reader), ConsultTypeRemarkStat));
                        break;
                    case 2:
                        message.total = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ConsultTypeRemarkStatsResponse {
            return ConsultTypeRemarkStatsResponse.deserialize(bytes);
        }
    }
    export class ConsultTypeRemarkStat extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            consult_type_id?: number;
            consult_type_name?: string;
            reception_user_num?: number;
            add_remark_num?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("consult_type_id" in data && data.consult_type_id != undefined) {
                    this.consult_type_id = data.consult_type_id;
                }
                if ("consult_type_name" in data && data.consult_type_name != undefined) {
                    this.consult_type_name = data.consult_type_name;
                }
                if ("reception_user_num" in data && data.reception_user_num != undefined) {
                    this.reception_user_num = data.reception_user_num;
                }
                if ("add_remark_num" in data && data.add_remark_num != undefined) {
                    this.add_remark_num = data.add_remark_num;
                }
            }
        }
        get consult_type_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set consult_type_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get consult_type_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set consult_type_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get reception_user_num() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set reception_user_num(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get add_remark_num() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set add_remark_num(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            consult_type_id?: number;
            consult_type_name?: string;
            reception_user_num?: number;
            add_remark_num?: number;
        }): ConsultTypeRemarkStat {
            const message = new ConsultTypeRemarkStat({});
            if (data.consult_type_id != null) {
                message.consult_type_id = data.consult_type_id;
            }
            if (data.consult_type_name != null) {
                message.consult_type_name = data.consult_type_name;
            }
            if (data.reception_user_num != null) {
                message.reception_user_num = data.reception_user_num;
            }
            if (data.add_remark_num != null) {
                message.add_remark_num = data.add_remark_num;
            }
            return message;
        }
        toObject() {
            const data: {
                consult_type_id?: number;
                consult_type_name?: string;
                reception_user_num?: number;
                add_remark_num?: number;
            } = {};
            if (this.consult_type_id != null) {
                data.consult_type_id = this.consult_type_id;
            }
            if (this.consult_type_name != null) {
                data.consult_type_name = this.consult_type_name;
            }
            if (this.reception_user_num != null) {
                data.reception_user_num = this.reception_user_num;
            }
            if (this.add_remark_num != null) {
                data.add_remark_num = this.add_remark_num;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.consult_type_id != 0)
                writer.writeInt32(1, this.consult_type_id);
            if (this.consult_type_name.length)
                writer.writeString(2, this.consult_type_name);
            if (this.reception_user_num != 0)
                writer.writeInt32(3, this.reception_user_num);
            if (this.add_remark_num != 0)
                writer.writeInt32(4, this.add_remark_num);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ConsultTypeRemarkStat {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ConsultTypeRemarkStat();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.consult_type_id = reader.readInt32();
                        break;
                    case 2:
                        message.consult_type_name = reader.readString();
                        break;
                    case 3:
                        message.reception_user_num = reader.readInt32();
                        break;
                    case 4:
                        message.add_remark_num = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ConsultTypeRemarkStat {
            return ConsultTypeRemarkStat.deserialize(bytes);
        }
    }
    export class ConsultTypeWorkerRemarkStatsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            consult_type_id?: number;
            page?: number;
            pageSize?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("consult_type_id" in data && data.consult_type_id != undefined) {
                    this.consult_type_id = data.consult_type_id;
                }
                if ("page" in data && data.page != undefined) {
                    this.page = data.page;
                }
                if ("pageSize" in data && data.pageSize != undefined) {
                    this.pageSize = data.pageSize;
                }
            }
        }
        get consult_type_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set consult_type_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get page() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set page(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get pageSize() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set pageSize(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            consult_type_id?: number;
            page?: number;
            pageSize?: number;
        }): ConsultTypeWorkerRemarkStatsRequest {
            const message = new ConsultTypeWorkerRemarkStatsRequest({});
            if (data.consult_type_id != null) {
                message.consult_type_id = data.consult_type_id;
            }
            if (data.page != null) {
                message.page = data.page;
            }
            if (data.pageSize != null) {
                message.pageSize = data.pageSize;
            }
            return message;
        }
        toObject() {
            const data: {
                consult_type_id?: number;
                page?: number;
                pageSize?: number;
            } = {};
            if (this.consult_type_id != null) {
                data.consult_type_id = this.consult_type_id;
            }
            if (this.page != null) {
                data.page = this.page;
            }
            if (this.pageSize != null) {
                data.pageSize = this.pageSize;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.consult_type_id != 0)
                writer.writeInt32(1, this.consult_type_id);
            if (this.page != 0)
                writer.writeUint32(2, this.page);
            if (this.pageSize != 0)
                writer.writeUint32(3, this.pageSize);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ConsultTypeWorkerRemarkStatsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ConsultTypeWorkerRemarkStatsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.consult_type_id = reader.readInt32();
                        break;
                    case 2:
                        message.page = reader.readUint32();
                        break;
                    case 3:
                        message.pageSize = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ConsultTypeWorkerRemarkStatsRequest {
            return ConsultTypeWorkerRemarkStatsRequest.deserialize(bytes);
        }
    }
    export class ConsultTypeWorkerRemarkStatsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            worker_remark_stats?: ConsultTypeWorkerRemarkStat[];
            total?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("worker_remark_stats" in data && data.worker_remark_stats != undefined) {
                    this.worker_remark_stats = data.worker_remark_stats;
                }
                if ("total" in data && data.total != undefined) {
                    this.total = data.total;
                }
            }
        }
        get worker_remark_stats() {
            return pb_1.Message.getRepeatedWrapperField(this, ConsultTypeWorkerRemarkStat, 1) as ConsultTypeWorkerRemarkStat[];
        }
        set worker_remark_stats(value: ConsultTypeWorkerRemarkStat[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get total() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set total(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            worker_remark_stats?: ReturnType<typeof ConsultTypeWorkerRemarkStat.prototype.toObject>[];
            total?: number;
        }): ConsultTypeWorkerRemarkStatsResponse {
            const message = new ConsultTypeWorkerRemarkStatsResponse({});
            if (data.worker_remark_stats != null) {
                message.worker_remark_stats = data.worker_remark_stats.map(item => ConsultTypeWorkerRemarkStat.fromObject(item));
            }
            if (data.total != null) {
                message.total = data.total;
            }
            return message;
        }
        toObject() {
            const data: {
                worker_remark_stats?: ReturnType<typeof ConsultTypeWorkerRemarkStat.prototype.toObject>[];
                total?: number;
            } = {};
            if (this.worker_remark_stats != null) {
                data.worker_remark_stats = this.worker_remark_stats.map((item: ConsultTypeWorkerRemarkStat) => item.toObject());
            }
            if (this.total != null) {
                data.total = this.total;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.worker_remark_stats.length)
                writer.writeRepeatedMessage(1, this.worker_remark_stats, (item: ConsultTypeWorkerRemarkStat) => item.serialize(writer));
            if (this.total != 0)
                writer.writeInt64(2, this.total);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ConsultTypeWorkerRemarkStatsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ConsultTypeWorkerRemarkStatsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.worker_remark_stats, () => pb_1.Message.addToRepeatedWrapperField(message, 1, ConsultTypeWorkerRemarkStat.deserialize(reader), ConsultTypeWorkerRemarkStat));
                        break;
                    case 2:
                        message.total = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ConsultTypeWorkerRemarkStatsResponse {
            return ConsultTypeWorkerRemarkStatsResponse.deserialize(bytes);
        }
    }
    export class ConsultTypeWorkerRemarkStat extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            consult_type_id?: number;
            consult_type_name?: string;
            worker_id?: number;
            worker_account?: string;
            worker_nickname?: string;
            add_remark_num?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("consult_type_id" in data && data.consult_type_id != undefined) {
                    this.consult_type_id = data.consult_type_id;
                }
                if ("consult_type_name" in data && data.consult_type_name != undefined) {
                    this.consult_type_name = data.consult_type_name;
                }
                if ("worker_id" in data && data.worker_id != undefined) {
                    this.worker_id = data.worker_id;
                }
                if ("worker_account" in data && data.worker_account != undefined) {
                    this.worker_account = data.worker_account;
                }
                if ("worker_nickname" in data && data.worker_nickname != undefined) {
                    this.worker_nickname = data.worker_nickname;
                }
                if ("add_remark_num" in data && data.add_remark_num != undefined) {
                    this.add_remark_num = data.add_remark_num;
                }
            }
        }
        get consult_type_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set consult_type_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get consult_type_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set consult_type_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get worker_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set worker_id(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get worker_account() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set worker_account(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get worker_nickname() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set worker_nickname(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get add_remark_num() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set add_remark_num(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            consult_type_id?: number;
            consult_type_name?: string;
            worker_id?: number;
            worker_account?: string;
            worker_nickname?: string;
            add_remark_num?: number;
        }): ConsultTypeWorkerRemarkStat {
            const message = new ConsultTypeWorkerRemarkStat({});
            if (data.consult_type_id != null) {
                message.consult_type_id = data.consult_type_id;
            }
            if (data.consult_type_name != null) {
                message.consult_type_name = data.consult_type_name;
            }
            if (data.worker_id != null) {
                message.worker_id = data.worker_id;
            }
            if (data.worker_account != null) {
                message.worker_account = data.worker_account;
            }
            if (data.worker_nickname != null) {
                message.worker_nickname = data.worker_nickname;
            }
            if (data.add_remark_num != null) {
                message.add_remark_num = data.add_remark_num;
            }
            return message;
        }
        toObject() {
            const data: {
                consult_type_id?: number;
                consult_type_name?: string;
                worker_id?: number;
                worker_account?: string;
                worker_nickname?: string;
                add_remark_num?: number;
            } = {};
            if (this.consult_type_id != null) {
                data.consult_type_id = this.consult_type_id;
            }
            if (this.consult_type_name != null) {
                data.consult_type_name = this.consult_type_name;
            }
            if (this.worker_id != null) {
                data.worker_id = this.worker_id;
            }
            if (this.worker_account != null) {
                data.worker_account = this.worker_account;
            }
            if (this.worker_nickname != null) {
                data.worker_nickname = this.worker_nickname;
            }
            if (this.add_remark_num != null) {
                data.add_remark_num = this.add_remark_num;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.consult_type_id != 0)
                writer.writeInt32(1, this.consult_type_id);
            if (this.consult_type_name.length)
                writer.writeString(2, this.consult_type_name);
            if (this.worker_id != 0)
                writer.writeInt32(3, this.worker_id);
            if (this.worker_account.length)
                writer.writeString(4, this.worker_account);
            if (this.worker_nickname.length)
                writer.writeString(5, this.worker_nickname);
            if (this.add_remark_num != 0)
                writer.writeInt32(6, this.add_remark_num);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ConsultTypeWorkerRemarkStat {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ConsultTypeWorkerRemarkStat();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.consult_type_id = reader.readInt32();
                        break;
                    case 2:
                        message.consult_type_name = reader.readString();
                        break;
                    case 3:
                        message.worker_id = reader.readInt32();
                        break;
                    case 4:
                        message.worker_account = reader.readString();
                        break;
                    case 5:
                        message.worker_nickname = reader.readString();
                        break;
                    case 6:
                        message.add_remark_num = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ConsultTypeWorkerRemarkStat {
            return ConsultTypeWorkerRemarkStat.deserialize(bytes);
        }
    }
    export class QuestionTypeStatsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            page?: number;
            pageSize?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("page" in data && data.page != undefined) {
                    this.page = data.page;
                }
                if ("pageSize" in data && data.pageSize != undefined) {
                    this.pageSize = data.pageSize;
                }
            }
        }
        get page() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set page(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get pageSize() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set pageSize(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            page?: number;
            pageSize?: number;
        }): QuestionTypeStatsRequest {
            const message = new QuestionTypeStatsRequest({});
            if (data.page != null) {
                message.page = data.page;
            }
            if (data.pageSize != null) {
                message.pageSize = data.pageSize;
            }
            return message;
        }
        toObject() {
            const data: {
                page?: number;
                pageSize?: number;
            } = {};
            if (this.page != null) {
                data.page = this.page;
            }
            if (this.pageSize != null) {
                data.pageSize = this.pageSize;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.page != 0)
                writer.writeUint32(1, this.page);
            if (this.pageSize != 0)
                writer.writeUint32(2, this.pageSize);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QuestionTypeStatsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QuestionTypeStatsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.page = reader.readUint32();
                        break;
                    case 2:
                        message.pageSize = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QuestionTypeStatsRequest {
            return QuestionTypeStatsRequest.deserialize(bytes);
        }
    }
    export class QuestionTypeStatsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            question_type_stats?: QuestionTypeStat[];
            total?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("question_type_stats" in data && data.question_type_stats != undefined) {
                    this.question_type_stats = data.question_type_stats;
                }
                if ("total" in data && data.total != undefined) {
                    this.total = data.total;
                }
            }
        }
        get question_type_stats() {
            return pb_1.Message.getRepeatedWrapperField(this, QuestionTypeStat, 1) as QuestionTypeStat[];
        }
        set question_type_stats(value: QuestionTypeStat[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get total() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set total(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            question_type_stats?: ReturnType<typeof QuestionTypeStat.prototype.toObject>[];
            total?: number;
        }): QuestionTypeStatsResponse {
            const message = new QuestionTypeStatsResponse({});
            if (data.question_type_stats != null) {
                message.question_type_stats = data.question_type_stats.map(item => QuestionTypeStat.fromObject(item));
            }
            if (data.total != null) {
                message.total = data.total;
            }
            return message;
        }
        toObject() {
            const data: {
                question_type_stats?: ReturnType<typeof QuestionTypeStat.prototype.toObject>[];
                total?: number;
            } = {};
            if (this.question_type_stats != null) {
                data.question_type_stats = this.question_type_stats.map((item: QuestionTypeStat) => item.toObject());
            }
            if (this.total != null) {
                data.total = this.total;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.question_type_stats.length)
                writer.writeRepeatedMessage(1, this.question_type_stats, (item: QuestionTypeStat) => item.serialize(writer));
            if (this.total != 0)
                writer.writeInt64(2, this.total);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QuestionTypeStatsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QuestionTypeStatsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.question_type_stats, () => pb_1.Message.addToRepeatedWrapperField(message, 1, QuestionTypeStat.deserialize(reader), QuestionTypeStat));
                        break;
                    case 2:
                        message.total = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QuestionTypeStatsResponse {
            return QuestionTypeStatsResponse.deserialize(bytes);
        }
    }
    export class QuestionTypeStat extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            question_type_id?: number;
            question_type_title?: string;
            with_consult_type_count?: number;
            with_consult_types?: ConsultTypeQuestion[];
            add_remark_num?: number;
            reception_user_num?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("question_type_id" in data && data.question_type_id != undefined) {
                    this.question_type_id = data.question_type_id;
                }
                if ("question_type_title" in data && data.question_type_title != undefined) {
                    this.question_type_title = data.question_type_title;
                }
                if ("with_consult_type_count" in data && data.with_consult_type_count != undefined) {
                    this.with_consult_type_count = data.with_consult_type_count;
                }
                if ("with_consult_types" in data && data.with_consult_types != undefined) {
                    this.with_consult_types = data.with_consult_types;
                }
                if ("add_remark_num" in data && data.add_remark_num != undefined) {
                    this.add_remark_num = data.add_remark_num;
                }
                if ("reception_user_num" in data && data.reception_user_num != undefined) {
                    this.reception_user_num = data.reception_user_num;
                }
            }
        }
        get question_type_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set question_type_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get question_type_title() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set question_type_title(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get with_consult_type_count() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set with_consult_type_count(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get with_consult_types() {
            return pb_1.Message.getRepeatedWrapperField(this, ConsultTypeQuestion, 4) as ConsultTypeQuestion[];
        }
        set with_consult_types(value: ConsultTypeQuestion[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get add_remark_num() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set add_remark_num(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get reception_user_num() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set reception_user_num(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            question_type_id?: number;
            question_type_title?: string;
            with_consult_type_count?: number;
            with_consult_types?: ReturnType<typeof ConsultTypeQuestion.prototype.toObject>[];
            add_remark_num?: number;
            reception_user_num?: number;
        }): QuestionTypeStat {
            const message = new QuestionTypeStat({});
            if (data.question_type_id != null) {
                message.question_type_id = data.question_type_id;
            }
            if (data.question_type_title != null) {
                message.question_type_title = data.question_type_title;
            }
            if (data.with_consult_type_count != null) {
                message.with_consult_type_count = data.with_consult_type_count;
            }
            if (data.with_consult_types != null) {
                message.with_consult_types = data.with_consult_types.map(item => ConsultTypeQuestion.fromObject(item));
            }
            if (data.add_remark_num != null) {
                message.add_remark_num = data.add_remark_num;
            }
            if (data.reception_user_num != null) {
                message.reception_user_num = data.reception_user_num;
            }
            return message;
        }
        toObject() {
            const data: {
                question_type_id?: number;
                question_type_title?: string;
                with_consult_type_count?: number;
                with_consult_types?: ReturnType<typeof ConsultTypeQuestion.prototype.toObject>[];
                add_remark_num?: number;
                reception_user_num?: number;
            } = {};
            if (this.question_type_id != null) {
                data.question_type_id = this.question_type_id;
            }
            if (this.question_type_title != null) {
                data.question_type_title = this.question_type_title;
            }
            if (this.with_consult_type_count != null) {
                data.with_consult_type_count = this.with_consult_type_count;
            }
            if (this.with_consult_types != null) {
                data.with_consult_types = this.with_consult_types.map((item: ConsultTypeQuestion) => item.toObject());
            }
            if (this.add_remark_num != null) {
                data.add_remark_num = this.add_remark_num;
            }
            if (this.reception_user_num != null) {
                data.reception_user_num = this.reception_user_num;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.question_type_id != 0)
                writer.writeInt32(1, this.question_type_id);
            if (this.question_type_title.length)
                writer.writeString(2, this.question_type_title);
            if (this.with_consult_type_count != 0)
                writer.writeInt32(3, this.with_consult_type_count);
            if (this.with_consult_types.length)
                writer.writeRepeatedMessage(4, this.with_consult_types, (item: ConsultTypeQuestion) => item.serialize(writer));
            if (this.add_remark_num != 0)
                writer.writeInt32(5, this.add_remark_num);
            if (this.reception_user_num != 0)
                writer.writeInt32(6, this.reception_user_num);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QuestionTypeStat {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QuestionTypeStat();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.question_type_id = reader.readInt32();
                        break;
                    case 2:
                        message.question_type_title = reader.readString();
                        break;
                    case 3:
                        message.with_consult_type_count = reader.readInt32();
                        break;
                    case 4:
                        reader.readMessage(message.with_consult_types, () => pb_1.Message.addToRepeatedWrapperField(message, 4, ConsultTypeQuestion.deserialize(reader), ConsultTypeQuestion));
                        break;
                    case 5:
                        message.add_remark_num = reader.readInt32();
                        break;
                    case 6:
                        message.reception_user_num = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QuestionTypeStat {
            return QuestionTypeStat.deserialize(bytes);
        }
    }
    export class UpdateQuestionTypeRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            question_type_id?: number;
            question_type_title?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("question_type_id" in data && data.question_type_id != undefined) {
                    this.question_type_id = data.question_type_id;
                }
                if ("question_type_title" in data && data.question_type_title != undefined) {
                    this.question_type_title = data.question_type_title;
                }
            }
        }
        get question_type_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set question_type_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get question_type_title() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set question_type_title(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            question_type_id?: number;
            question_type_title?: string;
        }): UpdateQuestionTypeRequest {
            const message = new UpdateQuestionTypeRequest({});
            if (data.question_type_id != null) {
                message.question_type_id = data.question_type_id;
            }
            if (data.question_type_title != null) {
                message.question_type_title = data.question_type_title;
            }
            return message;
        }
        toObject() {
            const data: {
                question_type_id?: number;
                question_type_title?: string;
            } = {};
            if (this.question_type_id != null) {
                data.question_type_id = this.question_type_id;
            }
            if (this.question_type_title != null) {
                data.question_type_title = this.question_type_title;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.question_type_id != 0)
                writer.writeInt32(1, this.question_type_id);
            if (this.question_type_title.length)
                writer.writeString(2, this.question_type_title);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateQuestionTypeRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateQuestionTypeRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.question_type_id = reader.readInt32();
                        break;
                    case 2:
                        message.question_type_title = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateQuestionTypeRequest {
            return UpdateQuestionTypeRequest.deserialize(bytes);
        }
    }
    export class DeleteQuestionTypeRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            question_type_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("question_type_id" in data && data.question_type_id != undefined) {
                    this.question_type_id = data.question_type_id;
                }
            }
        }
        get question_type_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set question_type_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            question_type_id?: number;
        }): DeleteQuestionTypeRequest {
            const message = new DeleteQuestionTypeRequest({});
            if (data.question_type_id != null) {
                message.question_type_id = data.question_type_id;
            }
            return message;
        }
        toObject() {
            const data: {
                question_type_id?: number;
            } = {};
            if (this.question_type_id != null) {
                data.question_type_id = this.question_type_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.question_type_id != 0)
                writer.writeInt32(1, this.question_type_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteQuestionTypeRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteQuestionTypeRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.question_type_id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteQuestionTypeRequest {
            return DeleteQuestionTypeRequest.deserialize(bytes);
        }
    }
    export class AddQuestionTypeRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            question_type_title?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("question_type_title" in data && data.question_type_title != undefined) {
                    this.question_type_title = data.question_type_title;
                }
            }
        }
        get question_type_title() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set question_type_title(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            question_type_title?: string;
        }): AddQuestionTypeRequest {
            const message = new AddQuestionTypeRequest({});
            if (data.question_type_title != null) {
                message.question_type_title = data.question_type_title;
            }
            return message;
        }
        toObject() {
            const data: {
                question_type_title?: string;
            } = {};
            if (this.question_type_title != null) {
                data.question_type_title = this.question_type_title;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.question_type_title.length)
                writer.writeString(1, this.question_type_title);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AddQuestionTypeRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AddQuestionTypeRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.question_type_title = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AddQuestionTypeRequest {
            return AddQuestionTypeRequest.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedDataStatisticService {
        static definition = {
            WorkerStatistics: {
                path: "/api.core.DataStatistic/WorkerStatistics",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: WorkerStatisticsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => WorkerStatisticsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: WorkerStatisticsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => WorkerStatisticsResponse.deserialize(new Uint8Array(bytes))
            },
            WorkerReceptionLogs: {
                path: "/api.core.DataStatistic/WorkerReceptionLogs",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: WorkerReceptionLogsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => WorkerReceptionLogsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: WorkerReceptionLogsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => WorkerReceptionLogsResponse.deserialize(new Uint8Array(bytes))
            },
            ExportWorkerReceptionLogs: {
                path: "/api.core.DataStatistic/ExportWorkerReceptionLogs",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ExportWorkerReceptionLogsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ExportWorkerReceptionLogsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            QuestionTypes: {
                path: "/api.core.DataStatistic/QuestionTypes",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QuestionTypesRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QuestionTypesRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QuestionTypesResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QuestionTypesResponse.deserialize(new Uint8Array(bytes))
            },
            ConsultTypeQuestionStats: {
                path: "/api.core.DataStatistic/ConsultTypeQuestionStats",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ConsultTypeQuestionStatsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ConsultTypeQuestionStatsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ConsultTypeQuestionStatsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ConsultTypeQuestionStatsResponse.deserialize(new Uint8Array(bytes))
            },
            ConsultTypeQuestions: {
                path: "/api.core.DataStatistic/ConsultTypeQuestions",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ConsultTypeQuestionsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ConsultTypeQuestionsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ConsultTypeQuestionsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ConsultTypeQuestionsResponse.deserialize(new Uint8Array(bytes))
            },
            AddConsultTypeQuestion: {
                path: "/api.core.DataStatistic/AddConsultTypeQuestion",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: AddConsultTypeQuestionRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => AddConsultTypeQuestionRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            DeleteConsultTypeQuestion: {
                path: "/api.core.DataStatistic/DeleteConsultTypeQuestion",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DeleteConsultTypeQuestionRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DeleteConsultTypeQuestionRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            UpdateConsultTypeQuestion: {
                path: "/api.core.DataStatistic/UpdateConsultTypeQuestion",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdateConsultTypeQuestionRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdateConsultTypeQuestionRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            AddQuestionTypeRemark: {
                path: "/api.core.DataStatistic/AddQuestionTypeRemark",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: AddQuestionTypeRemarkRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => AddQuestionTypeRemarkRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            QuestionTypeRemarks: {
                path: "/api.core.DataStatistic/QuestionTypeRemarks",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QuestionTypeRemarksRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QuestionTypeRemarksRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QuestionTypeRemarksResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QuestionTypeRemarksResponse.deserialize(new Uint8Array(bytes))
            },
            QuestionTypeWithWorkerStats: {
                path: "/api.core.DataStatistic/QuestionTypeWithWorkerStats",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QuestionTypeWithWorkerStatsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QuestionTypeWithWorkerStatsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QuestionTypeWithWorkerStatsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QuestionTypeWithWorkerStatsResponse.deserialize(new Uint8Array(bytes))
            },
            QuestionTypeRemarkStats: {
                path: "/api.core.DataStatistic/QuestionTypeRemarkStats",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QuestionTypeRemarkStatsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QuestionTypeRemarkStatsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QuestionTypeRemarkStatsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QuestionTypeRemarkStatsResponse.deserialize(new Uint8Array(bytes))
            },
            QuestionTypeWorkerRemarkStats: {
                path: "/api.core.DataStatistic/QuestionTypeWorkerRemarkStats",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QuestionTypeWorkerRemarkStatsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QuestionTypeWorkerRemarkStatsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QuestionTypeWorkerRemarkStatsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QuestionTypeWorkerRemarkStatsResponse.deserialize(new Uint8Array(bytes))
            },
            ConsultTypeRemarkStats: {
                path: "/api.core.DataStatistic/ConsultTypeRemarkStats",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ConsultTypeRemarkStatsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ConsultTypeRemarkStatsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ConsultTypeRemarkStatsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ConsultTypeRemarkStatsResponse.deserialize(new Uint8Array(bytes))
            },
            ConsultTypeWorkerRemarkStats: {
                path: "/api.core.DataStatistic/ConsultTypeWorkerRemarkStats",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ConsultTypeWorkerRemarkStatsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ConsultTypeWorkerRemarkStatsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ConsultTypeWorkerRemarkStatsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ConsultTypeWorkerRemarkStatsResponse.deserialize(new Uint8Array(bytes))
            },
            QuestionTypeStats: {
                path: "/api.core.DataStatistic/QuestionTypeStats",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QuestionTypeStatsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QuestionTypeStatsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QuestionTypeStatsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QuestionTypeStatsResponse.deserialize(new Uint8Array(bytes))
            },
            UpdateQuestionType: {
                path: "/api.core.DataStatistic/UpdateQuestionType",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdateQuestionTypeRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdateQuestionTypeRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            DeleteQuestionType: {
                path: "/api.core.DataStatistic/DeleteQuestionType",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DeleteQuestionTypeRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DeleteQuestionTypeRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            AddQuestionType: {
                path: "/api.core.DataStatistic/AddQuestionType",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: AddQuestionTypeRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => AddQuestionTypeRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract WorkerStatistics(call: grpc_1.ServerUnaryCall<WorkerStatisticsRequest, WorkerStatisticsResponse>, callback: grpc_1.sendUnaryData<WorkerStatisticsResponse>): void;
        abstract WorkerReceptionLogs(call: grpc_1.ServerUnaryCall<WorkerReceptionLogsRequest, WorkerReceptionLogsResponse>, callback: grpc_1.sendUnaryData<WorkerReceptionLogsResponse>): void;
        abstract ExportWorkerReceptionLogs(call: grpc_1.ServerUnaryCall<ExportWorkerReceptionLogsRequest, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
        abstract QuestionTypes(call: grpc_1.ServerUnaryCall<QuestionTypesRequest, QuestionTypesResponse>, callback: grpc_1.sendUnaryData<QuestionTypesResponse>): void;
        abstract ConsultTypeQuestionStats(call: grpc_1.ServerUnaryCall<ConsultTypeQuestionStatsRequest, ConsultTypeQuestionStatsResponse>, callback: grpc_1.sendUnaryData<ConsultTypeQuestionStatsResponse>): void;
        abstract ConsultTypeQuestions(call: grpc_1.ServerUnaryCall<ConsultTypeQuestionsRequest, ConsultTypeQuestionsResponse>, callback: grpc_1.sendUnaryData<ConsultTypeQuestionsResponse>): void;
        abstract AddConsultTypeQuestion(call: grpc_1.ServerUnaryCall<AddConsultTypeQuestionRequest, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
        abstract DeleteConsultTypeQuestion(call: grpc_1.ServerUnaryCall<DeleteConsultTypeQuestionRequest, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
        abstract UpdateConsultTypeQuestion(call: grpc_1.ServerUnaryCall<UpdateConsultTypeQuestionRequest, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
        abstract AddQuestionTypeRemark(call: grpc_1.ServerUnaryCall<AddQuestionTypeRemarkRequest, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
        abstract QuestionTypeRemarks(call: grpc_1.ServerUnaryCall<QuestionTypeRemarksRequest, QuestionTypeRemarksResponse>, callback: grpc_1.sendUnaryData<QuestionTypeRemarksResponse>): void;
        abstract QuestionTypeWithWorkerStats(call: grpc_1.ServerUnaryCall<QuestionTypeWithWorkerStatsRequest, QuestionTypeWithWorkerStatsResponse>, callback: grpc_1.sendUnaryData<QuestionTypeWithWorkerStatsResponse>): void;
        abstract QuestionTypeRemarkStats(call: grpc_1.ServerUnaryCall<QuestionTypeRemarkStatsRequest, QuestionTypeRemarkStatsResponse>, callback: grpc_1.sendUnaryData<QuestionTypeRemarkStatsResponse>): void;
        abstract QuestionTypeWorkerRemarkStats(call: grpc_1.ServerUnaryCall<QuestionTypeWorkerRemarkStatsRequest, QuestionTypeWorkerRemarkStatsResponse>, callback: grpc_1.sendUnaryData<QuestionTypeWorkerRemarkStatsResponse>): void;
        abstract ConsultTypeRemarkStats(call: grpc_1.ServerUnaryCall<ConsultTypeRemarkStatsRequest, ConsultTypeRemarkStatsResponse>, callback: grpc_1.sendUnaryData<ConsultTypeRemarkStatsResponse>): void;
        abstract ConsultTypeWorkerRemarkStats(call: grpc_1.ServerUnaryCall<ConsultTypeWorkerRemarkStatsRequest, ConsultTypeWorkerRemarkStatsResponse>, callback: grpc_1.sendUnaryData<ConsultTypeWorkerRemarkStatsResponse>): void;
        abstract QuestionTypeStats(call: grpc_1.ServerUnaryCall<QuestionTypeStatsRequest, QuestionTypeStatsResponse>, callback: grpc_1.sendUnaryData<QuestionTypeStatsResponse>): void;
        abstract UpdateQuestionType(call: grpc_1.ServerUnaryCall<UpdateQuestionTypeRequest, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
        abstract DeleteQuestionType(call: grpc_1.ServerUnaryCall<DeleteQuestionTypeRequest, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
        abstract AddQuestionType(call: grpc_1.ServerUnaryCall<AddQuestionTypeRequest, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
    }
    export class DataStatisticClient extends grpc_1.makeGenericClientConstructor(UnimplementedDataStatisticService.definition, "DataStatistic", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        WorkerStatistics: GrpcUnaryServiceInterface<WorkerStatisticsRequest, WorkerStatisticsResponse> = (message: WorkerStatisticsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<WorkerStatisticsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<WorkerStatisticsResponse>, callback?: grpc_1.requestCallback<WorkerStatisticsResponse>): grpc_1.ClientUnaryCall => {
            return super.WorkerStatistics(message, metadata, options, callback);
        };
        WorkerReceptionLogs: GrpcUnaryServiceInterface<WorkerReceptionLogsRequest, WorkerReceptionLogsResponse> = (message: WorkerReceptionLogsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<WorkerReceptionLogsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<WorkerReceptionLogsResponse>, callback?: grpc_1.requestCallback<WorkerReceptionLogsResponse>): grpc_1.ClientUnaryCall => {
            return super.WorkerReceptionLogs(message, metadata, options, callback);
        };
        ExportWorkerReceptionLogs: GrpcUnaryServiceInterface<ExportWorkerReceptionLogsRequest, dependency_2.google.protobuf.Empty> = (message: ExportWorkerReceptionLogsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_2.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.ExportWorkerReceptionLogs(message, metadata, options, callback);
        };
        QuestionTypes: GrpcUnaryServiceInterface<QuestionTypesRequest, QuestionTypesResponse> = (message: QuestionTypesRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QuestionTypesResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QuestionTypesResponse>, callback?: grpc_1.requestCallback<QuestionTypesResponse>): grpc_1.ClientUnaryCall => {
            return super.QuestionTypes(message, metadata, options, callback);
        };
        ConsultTypeQuestionStats: GrpcUnaryServiceInterface<ConsultTypeQuestionStatsRequest, ConsultTypeQuestionStatsResponse> = (message: ConsultTypeQuestionStatsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ConsultTypeQuestionStatsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ConsultTypeQuestionStatsResponse>, callback?: grpc_1.requestCallback<ConsultTypeQuestionStatsResponse>): grpc_1.ClientUnaryCall => {
            return super.ConsultTypeQuestionStats(message, metadata, options, callback);
        };
        ConsultTypeQuestions: GrpcUnaryServiceInterface<ConsultTypeQuestionsRequest, ConsultTypeQuestionsResponse> = (message: ConsultTypeQuestionsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ConsultTypeQuestionsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ConsultTypeQuestionsResponse>, callback?: grpc_1.requestCallback<ConsultTypeQuestionsResponse>): grpc_1.ClientUnaryCall => {
            return super.ConsultTypeQuestions(message, metadata, options, callback);
        };
        AddConsultTypeQuestion: GrpcUnaryServiceInterface<AddConsultTypeQuestionRequest, dependency_2.google.protobuf.Empty> = (message: AddConsultTypeQuestionRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_2.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.AddConsultTypeQuestion(message, metadata, options, callback);
        };
        DeleteConsultTypeQuestion: GrpcUnaryServiceInterface<DeleteConsultTypeQuestionRequest, dependency_2.google.protobuf.Empty> = (message: DeleteConsultTypeQuestionRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_2.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.DeleteConsultTypeQuestion(message, metadata, options, callback);
        };
        UpdateConsultTypeQuestion: GrpcUnaryServiceInterface<UpdateConsultTypeQuestionRequest, dependency_2.google.protobuf.Empty> = (message: UpdateConsultTypeQuestionRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_2.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.UpdateConsultTypeQuestion(message, metadata, options, callback);
        };
        AddQuestionTypeRemark: GrpcUnaryServiceInterface<AddQuestionTypeRemarkRequest, dependency_2.google.protobuf.Empty> = (message: AddQuestionTypeRemarkRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_2.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.AddQuestionTypeRemark(message, metadata, options, callback);
        };
        QuestionTypeRemarks: GrpcUnaryServiceInterface<QuestionTypeRemarksRequest, QuestionTypeRemarksResponse> = (message: QuestionTypeRemarksRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QuestionTypeRemarksResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QuestionTypeRemarksResponse>, callback?: grpc_1.requestCallback<QuestionTypeRemarksResponse>): grpc_1.ClientUnaryCall => {
            return super.QuestionTypeRemarks(message, metadata, options, callback);
        };
        QuestionTypeWithWorkerStats: GrpcUnaryServiceInterface<QuestionTypeWithWorkerStatsRequest, QuestionTypeWithWorkerStatsResponse> = (message: QuestionTypeWithWorkerStatsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QuestionTypeWithWorkerStatsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QuestionTypeWithWorkerStatsResponse>, callback?: grpc_1.requestCallback<QuestionTypeWithWorkerStatsResponse>): grpc_1.ClientUnaryCall => {
            return super.QuestionTypeWithWorkerStats(message, metadata, options, callback);
        };
        QuestionTypeRemarkStats: GrpcUnaryServiceInterface<QuestionTypeRemarkStatsRequest, QuestionTypeRemarkStatsResponse> = (message: QuestionTypeRemarkStatsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QuestionTypeRemarkStatsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QuestionTypeRemarkStatsResponse>, callback?: grpc_1.requestCallback<QuestionTypeRemarkStatsResponse>): grpc_1.ClientUnaryCall => {
            return super.QuestionTypeRemarkStats(message, metadata, options, callback);
        };
        QuestionTypeWorkerRemarkStats: GrpcUnaryServiceInterface<QuestionTypeWorkerRemarkStatsRequest, QuestionTypeWorkerRemarkStatsResponse> = (message: QuestionTypeWorkerRemarkStatsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QuestionTypeWorkerRemarkStatsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QuestionTypeWorkerRemarkStatsResponse>, callback?: grpc_1.requestCallback<QuestionTypeWorkerRemarkStatsResponse>): grpc_1.ClientUnaryCall => {
            return super.QuestionTypeWorkerRemarkStats(message, metadata, options, callback);
        };
        ConsultTypeRemarkStats: GrpcUnaryServiceInterface<ConsultTypeRemarkStatsRequest, ConsultTypeRemarkStatsResponse> = (message: ConsultTypeRemarkStatsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ConsultTypeRemarkStatsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ConsultTypeRemarkStatsResponse>, callback?: grpc_1.requestCallback<ConsultTypeRemarkStatsResponse>): grpc_1.ClientUnaryCall => {
            return super.ConsultTypeRemarkStats(message, metadata, options, callback);
        };
        ConsultTypeWorkerRemarkStats: GrpcUnaryServiceInterface<ConsultTypeWorkerRemarkStatsRequest, ConsultTypeWorkerRemarkStatsResponse> = (message: ConsultTypeWorkerRemarkStatsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ConsultTypeWorkerRemarkStatsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ConsultTypeWorkerRemarkStatsResponse>, callback?: grpc_1.requestCallback<ConsultTypeWorkerRemarkStatsResponse>): grpc_1.ClientUnaryCall => {
            return super.ConsultTypeWorkerRemarkStats(message, metadata, options, callback);
        };
        QuestionTypeStats: GrpcUnaryServiceInterface<QuestionTypeStatsRequest, QuestionTypeStatsResponse> = (message: QuestionTypeStatsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QuestionTypeStatsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QuestionTypeStatsResponse>, callback?: grpc_1.requestCallback<QuestionTypeStatsResponse>): grpc_1.ClientUnaryCall => {
            return super.QuestionTypeStats(message, metadata, options, callback);
        };
        UpdateQuestionType: GrpcUnaryServiceInterface<UpdateQuestionTypeRequest, dependency_2.google.protobuf.Empty> = (message: UpdateQuestionTypeRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_2.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.UpdateQuestionType(message, metadata, options, callback);
        };
        DeleteQuestionType: GrpcUnaryServiceInterface<DeleteQuestionTypeRequest, dependency_2.google.protobuf.Empty> = (message: DeleteQuestionTypeRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_2.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.DeleteQuestionType(message, metadata, options, callback);
        };
        AddQuestionType: GrpcUnaryServiceInterface<AddQuestionTypeRequest, dependency_2.google.protobuf.Empty> = (message: AddQuestionTypeRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_2.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.AddQuestionType(message, metadata, options, callback);
        };
    }
}
