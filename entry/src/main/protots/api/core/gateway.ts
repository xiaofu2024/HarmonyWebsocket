/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.26.1
 * source: api/core/gateway.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../option";
import * as dependency_2 from "./../../google/protobuf/empty";
import * as dependency_3 from "./../../validate/validate";
import * as dependency_4 from "./../common/c_entrance";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace api.core {
    export class GatewayNodeRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            gateway_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("gateway_id" in data && data.gateway_id != undefined) {
                    this.gateway_id = data.gateway_id;
                }
            }
        }
        get gateway_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set gateway_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            gateway_id?: number;
        }): GatewayNodeRequest {
            const message = new GatewayNodeRequest({});
            if (data.gateway_id != null) {
                message.gateway_id = data.gateway_id;
            }
            return message;
        }
        toObject() {
            const data: {
                gateway_id?: number;
            } = {};
            if (this.gateway_id != null) {
                data.gateway_id = this.gateway_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.gateway_id != 0)
                writer.writeInt32(1, this.gateway_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GatewayNodeRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GatewayNodeRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.gateway_id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GatewayNodeRequest {
            return GatewayNodeRequest.deserialize(bytes);
        }
    }
    export class GatewayRegisterRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            gateway_id?: number;
            client_type?: dependency_4.api.common.ClientType;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("gateway_id" in data && data.gateway_id != undefined) {
                    this.gateway_id = data.gateway_id;
                }
                if ("client_type" in data && data.client_type != undefined) {
                    this.client_type = data.client_type;
                }
            }
        }
        get gateway_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set gateway_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get client_type() {
            return pb_1.Message.getFieldWithDefault(this, 2, dependency_4.api.common.ClientType.CLIENT_TYPE_UNKNOWN) as dependency_4.api.common.ClientType;
        }
        set client_type(value: dependency_4.api.common.ClientType) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            gateway_id?: number;
            client_type?: dependency_4.api.common.ClientType;
        }): GatewayRegisterRequest {
            const message = new GatewayRegisterRequest({});
            if (data.gateway_id != null) {
                message.gateway_id = data.gateway_id;
            }
            if (data.client_type != null) {
                message.client_type = data.client_type;
            }
            return message;
        }
        toObject() {
            const data: {
                gateway_id?: number;
                client_type?: dependency_4.api.common.ClientType;
            } = {};
            if (this.gateway_id != null) {
                data.gateway_id = this.gateway_id;
            }
            if (this.client_type != null) {
                data.client_type = this.client_type;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.gateway_id != 0)
                writer.writeInt32(1, this.gateway_id);
            if (this.client_type != dependency_4.api.common.ClientType.CLIENT_TYPE_UNKNOWN)
                writer.writeEnum(2, this.client_type);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GatewayRegisterRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GatewayRegisterRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.gateway_id = reader.readInt32();
                        break;
                    case 2:
                        message.client_type = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GatewayRegisterRequest {
            return GatewayRegisterRequest.deserialize(bytes);
        }
    }
    export class GatewayRegisterResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            websocket_id?: number;
            websocket_time?: number;
            websocket_flag?: boolean;
            last_socket_id?: number;
            last_socket_time?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("websocket_id" in data && data.websocket_id != undefined) {
                    this.websocket_id = data.websocket_id;
                }
                if ("websocket_time" in data && data.websocket_time != undefined) {
                    this.websocket_time = data.websocket_time;
                }
                if ("websocket_flag" in data && data.websocket_flag != undefined) {
                    this.websocket_flag = data.websocket_flag;
                }
                if ("last_socket_id" in data && data.last_socket_id != undefined) {
                    this.last_socket_id = data.last_socket_id;
                }
                if ("last_socket_time" in data && data.last_socket_time != undefined) {
                    this.last_socket_time = data.last_socket_time;
                }
            }
        }
        get websocket_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set websocket_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get websocket_time() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set websocket_time(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get websocket_flag() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set websocket_flag(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        get last_socket_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set last_socket_id(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get last_socket_time() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set last_socket_time(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            websocket_id?: number;
            websocket_time?: number;
            websocket_flag?: boolean;
            last_socket_id?: number;
            last_socket_time?: number;
        }): GatewayRegisterResponse {
            const message = new GatewayRegisterResponse({});
            if (data.websocket_id != null) {
                message.websocket_id = data.websocket_id;
            }
            if (data.websocket_time != null) {
                message.websocket_time = data.websocket_time;
            }
            if (data.websocket_flag != null) {
                message.websocket_flag = data.websocket_flag;
            }
            if (data.last_socket_id != null) {
                message.last_socket_id = data.last_socket_id;
            }
            if (data.last_socket_time != null) {
                message.last_socket_time = data.last_socket_time;
            }
            return message;
        }
        toObject() {
            const data: {
                websocket_id?: number;
                websocket_time?: number;
                websocket_flag?: boolean;
                last_socket_id?: number;
                last_socket_time?: number;
            } = {};
            if (this.websocket_id != null) {
                data.websocket_id = this.websocket_id;
            }
            if (this.websocket_time != null) {
                data.websocket_time = this.websocket_time;
            }
            if (this.websocket_flag != null) {
                data.websocket_flag = this.websocket_flag;
            }
            if (this.last_socket_id != null) {
                data.last_socket_id = this.last_socket_id;
            }
            if (this.last_socket_time != null) {
                data.last_socket_time = this.last_socket_time;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.websocket_id != 0)
                writer.writeUint64(1, this.websocket_id);
            if (this.websocket_time != 0)
                writer.writeInt64(2, this.websocket_time);
            if (this.websocket_flag != false)
                writer.writeBool(3, this.websocket_flag);
            if (this.last_socket_id != 0)
                writer.writeUint64(4, this.last_socket_id);
            if (this.last_socket_time != 0)
                writer.writeInt64(5, this.last_socket_time);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GatewayRegisterResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GatewayRegisterResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.websocket_id = reader.readUint64();
                        break;
                    case 2:
                        message.websocket_time = reader.readInt64();
                        break;
                    case 3:
                        message.websocket_flag = reader.readBool();
                        break;
                    case 4:
                        message.last_socket_id = reader.readUint64();
                        break;
                    case 5:
                        message.last_socket_time = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GatewayRegisterResponse {
            return GatewayRegisterResponse.deserialize(bytes);
        }
    }
    export class OnlineTenantWorkers extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            tenant?: number;
            workers?: number[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("tenant" in data && data.tenant != undefined) {
                    this.tenant = data.tenant;
                }
                if ("workers" in data && data.workers != undefined) {
                    this.workers = data.workers;
                }
            }
        }
        get tenant() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set tenant(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get workers() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as number[];
        }
        set workers(value: number[]) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            tenant?: number;
            workers?: number[];
        }): OnlineTenantWorkers {
            const message = new OnlineTenantWorkers({});
            if (data.tenant != null) {
                message.tenant = data.tenant;
            }
            if (data.workers != null) {
                message.workers = data.workers;
            }
            return message;
        }
        toObject() {
            const data: {
                tenant?: number;
                workers?: number[];
            } = {};
            if (this.tenant != null) {
                data.tenant = this.tenant;
            }
            if (this.workers != null) {
                data.workers = this.workers;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.tenant != 0)
                writer.writeInt32(1, this.tenant);
            if (this.workers.length)
                writer.writePackedInt32(2, this.workers);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OnlineTenantWorkers {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OnlineTenantWorkers();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.tenant = reader.readInt32();
                        break;
                    case 2:
                        message.workers = reader.readPackedInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): OnlineTenantWorkers {
            return OnlineTenantWorkers.deserialize(bytes);
        }
    }
    export class GatewayBeaconRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            gateway_id?: number;
            duration?: number;
            tenants?: OnlineTenantWorkers[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("gateway_id" in data && data.gateway_id != undefined) {
                    this.gateway_id = data.gateway_id;
                }
                if ("duration" in data && data.duration != undefined) {
                    this.duration = data.duration;
                }
                if ("tenants" in data && data.tenants != undefined) {
                    this.tenants = data.tenants;
                }
            }
        }
        get gateway_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set gateway_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get duration() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set duration(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get tenants() {
            return pb_1.Message.getRepeatedWrapperField(this, OnlineTenantWorkers, 3) as OnlineTenantWorkers[];
        }
        set tenants(value: OnlineTenantWorkers[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        static fromObject(data: {
            gateway_id?: number;
            duration?: number;
            tenants?: ReturnType<typeof OnlineTenantWorkers.prototype.toObject>[];
        }): GatewayBeaconRequest {
            const message = new GatewayBeaconRequest({});
            if (data.gateway_id != null) {
                message.gateway_id = data.gateway_id;
            }
            if (data.duration != null) {
                message.duration = data.duration;
            }
            if (data.tenants != null) {
                message.tenants = data.tenants.map(item => OnlineTenantWorkers.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                gateway_id?: number;
                duration?: number;
                tenants?: ReturnType<typeof OnlineTenantWorkers.prototype.toObject>[];
            } = {};
            if (this.gateway_id != null) {
                data.gateway_id = this.gateway_id;
            }
            if (this.duration != null) {
                data.duration = this.duration;
            }
            if (this.tenants != null) {
                data.tenants = this.tenants.map((item: OnlineTenantWorkers) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.gateway_id != 0)
                writer.writeInt32(1, this.gateway_id);
            if (this.duration != 0)
                writer.writeInt32(2, this.duration);
            if (this.tenants.length)
                writer.writeRepeatedMessage(3, this.tenants, (item: OnlineTenantWorkers) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GatewayBeaconRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GatewayBeaconRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.gateway_id = reader.readInt32();
                        break;
                    case 2:
                        message.duration = reader.readInt32();
                        break;
                    case 3:
                        reader.readMessage(message.tenants, () => pb_1.Message.addToRepeatedWrapperField(message, 3, OnlineTenantWorkers.deserialize(reader), OnlineTenantWorkers));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GatewayBeaconRequest {
            return GatewayBeaconRequest.deserialize(bytes);
        }
    }
    export class GatewayTeardownRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            gateway_id?: number;
            gateway_offline?: boolean;
            websocket_time?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("gateway_id" in data && data.gateway_id != undefined) {
                    this.gateway_id = data.gateway_id;
                }
                if ("gateway_offline" in data && data.gateway_offline != undefined) {
                    this.gateway_offline = data.gateway_offline;
                }
                if ("websocket_time" in data && data.websocket_time != undefined) {
                    this.websocket_time = data.websocket_time;
                }
            }
        }
        get gateway_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set gateway_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get gateway_offline() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set gateway_offline(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get websocket_time() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set websocket_time(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            gateway_id?: number;
            gateway_offline?: boolean;
            websocket_time?: number;
        }): GatewayTeardownRequest {
            const message = new GatewayTeardownRequest({});
            if (data.gateway_id != null) {
                message.gateway_id = data.gateway_id;
            }
            if (data.gateway_offline != null) {
                message.gateway_offline = data.gateway_offline;
            }
            if (data.websocket_time != null) {
                message.websocket_time = data.websocket_time;
            }
            return message;
        }
        toObject() {
            const data: {
                gateway_id?: number;
                gateway_offline?: boolean;
                websocket_time?: number;
            } = {};
            if (this.gateway_id != null) {
                data.gateway_id = this.gateway_id;
            }
            if (this.gateway_offline != null) {
                data.gateway_offline = this.gateway_offline;
            }
            if (this.websocket_time != null) {
                data.websocket_time = this.websocket_time;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.gateway_id != 0)
                writer.writeInt32(1, this.gateway_id);
            if (this.gateway_offline != false)
                writer.writeBool(2, this.gateway_offline);
            if (this.websocket_time != 0)
                writer.writeInt64(3, this.websocket_time);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GatewayTeardownRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GatewayTeardownRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.gateway_id = reader.readInt32();
                        break;
                    case 2:
                        message.gateway_offline = reader.readBool();
                        break;
                    case 3:
                        message.websocket_time = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GatewayTeardownRequest {
            return GatewayTeardownRequest.deserialize(bytes);
        }
    }
    export class NewWorkerConnectRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            gateway_id?: number;
            query?: string;
            ip?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("gateway_id" in data && data.gateway_id != undefined) {
                    this.gateway_id = data.gateway_id;
                }
                if ("query" in data && data.query != undefined) {
                    this.query = data.query;
                }
                if ("ip" in data && data.ip != undefined) {
                    this.ip = data.ip;
                }
            }
        }
        get gateway_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set gateway_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get query() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set query(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get ip() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set ip(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            gateway_id?: number;
            query?: string;
            ip?: string;
        }): NewWorkerConnectRequest {
            const message = new NewWorkerConnectRequest({});
            if (data.gateway_id != null) {
                message.gateway_id = data.gateway_id;
            }
            if (data.query != null) {
                message.query = data.query;
            }
            if (data.ip != null) {
                message.ip = data.ip;
            }
            return message;
        }
        toObject() {
            const data: {
                gateway_id?: number;
                query?: string;
                ip?: string;
            } = {};
            if (this.gateway_id != null) {
                data.gateway_id = this.gateway_id;
            }
            if (this.query != null) {
                data.query = this.query;
            }
            if (this.ip != null) {
                data.ip = this.ip;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.gateway_id != 0)
                writer.writeInt32(1, this.gateway_id);
            if (this.query.length)
                writer.writeString(2, this.query);
            if (this.ip.length)
                writer.writeString(3, this.ip);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NewWorkerConnectRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NewWorkerConnectRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.gateway_id = reader.readInt32();
                        break;
                    case 2:
                        message.query = reader.readString();
                        break;
                    case 3:
                        message.ip = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): NewWorkerConnectRequest {
            return NewWorkerConnectRequest.deserialize(bytes);
        }
    }
    export class NewWorkerConnectResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            client_id?: number;
            token?: string;
            websocket_id?: number;
            websocket_time?: number;
            websocket_flag?: boolean;
            chat_expire_time?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("client_id" in data && data.client_id != undefined) {
                    this.client_id = data.client_id;
                }
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
                if ("websocket_id" in data && data.websocket_id != undefined) {
                    this.websocket_id = data.websocket_id;
                }
                if ("websocket_time" in data && data.websocket_time != undefined) {
                    this.websocket_time = data.websocket_time;
                }
                if ("websocket_flag" in data && data.websocket_flag != undefined) {
                    this.websocket_flag = data.websocket_flag;
                }
                if ("chat_expire_time" in data && data.chat_expire_time != undefined) {
                    this.chat_expire_time = data.chat_expire_time;
                }
            }
        }
        get client_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set client_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get websocket_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set websocket_id(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get websocket_time() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set websocket_time(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get websocket_flag() {
            return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
        }
        set websocket_flag(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        get chat_expire_time() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set chat_expire_time(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            client_id?: number;
            token?: string;
            websocket_id?: number;
            websocket_time?: number;
            websocket_flag?: boolean;
            chat_expire_time?: number;
        }): NewWorkerConnectResponse {
            const message = new NewWorkerConnectResponse({});
            if (data.client_id != null) {
                message.client_id = data.client_id;
            }
            if (data.token != null) {
                message.token = data.token;
            }
            if (data.websocket_id != null) {
                message.websocket_id = data.websocket_id;
            }
            if (data.websocket_time != null) {
                message.websocket_time = data.websocket_time;
            }
            if (data.websocket_flag != null) {
                message.websocket_flag = data.websocket_flag;
            }
            if (data.chat_expire_time != null) {
                message.chat_expire_time = data.chat_expire_time;
            }
            return message;
        }
        toObject() {
            const data: {
                client_id?: number;
                token?: string;
                websocket_id?: number;
                websocket_time?: number;
                websocket_flag?: boolean;
                chat_expire_time?: number;
            } = {};
            if (this.client_id != null) {
                data.client_id = this.client_id;
            }
            if (this.token != null) {
                data.token = this.token;
            }
            if (this.websocket_id != null) {
                data.websocket_id = this.websocket_id;
            }
            if (this.websocket_time != null) {
                data.websocket_time = this.websocket_time;
            }
            if (this.websocket_flag != null) {
                data.websocket_flag = this.websocket_flag;
            }
            if (this.chat_expire_time != null) {
                data.chat_expire_time = this.chat_expire_time;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.client_id != 0)
                writer.writeInt64(1, this.client_id);
            if (this.token.length)
                writer.writeString(2, this.token);
            if (this.websocket_id != 0)
                writer.writeUint64(3, this.websocket_id);
            if (this.websocket_time != 0)
                writer.writeInt64(4, this.websocket_time);
            if (this.websocket_flag != false)
                writer.writeBool(5, this.websocket_flag);
            if (this.chat_expire_time != 0)
                writer.writeInt64(6, this.chat_expire_time);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NewWorkerConnectResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NewWorkerConnectResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.client_id = reader.readInt64();
                        break;
                    case 2:
                        message.token = reader.readString();
                        break;
                    case 3:
                        message.websocket_id = reader.readUint64();
                        break;
                    case 4:
                        message.websocket_time = reader.readInt64();
                        break;
                    case 5:
                        message.websocket_flag = reader.readBool();
                        break;
                    case 6:
                        message.chat_expire_time = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): NewWorkerConnectResponse {
            return NewWorkerConnectResponse.deserialize(bytes);
        }
    }
    export class NewUserConnectRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            gateway_id?: number;
            query?: string;
            ip?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("gateway_id" in data && data.gateway_id != undefined) {
                    this.gateway_id = data.gateway_id;
                }
                if ("query" in data && data.query != undefined) {
                    this.query = data.query;
                }
                if ("ip" in data && data.ip != undefined) {
                    this.ip = data.ip;
                }
            }
        }
        get gateway_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set gateway_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get query() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set query(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get ip() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set ip(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            gateway_id?: number;
            query?: string;
            ip?: string;
        }): NewUserConnectRequest {
            const message = new NewUserConnectRequest({});
            if (data.gateway_id != null) {
                message.gateway_id = data.gateway_id;
            }
            if (data.query != null) {
                message.query = data.query;
            }
            if (data.ip != null) {
                message.ip = data.ip;
            }
            return message;
        }
        toObject() {
            const data: {
                gateway_id?: number;
                query?: string;
                ip?: string;
            } = {};
            if (this.gateway_id != null) {
                data.gateway_id = this.gateway_id;
            }
            if (this.query != null) {
                data.query = this.query;
            }
            if (this.ip != null) {
                data.ip = this.ip;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.gateway_id != 0)
                writer.writeInt32(1, this.gateway_id);
            if (this.query.length)
                writer.writeString(2, this.query);
            if (this.ip.length)
                writer.writeString(3, this.ip);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NewUserConnectRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NewUserConnectRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.gateway_id = reader.readInt32();
                        break;
                    case 2:
                        message.query = reader.readString();
                        break;
                    case 3:
                        message.ip = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): NewUserConnectRequest {
            return NewUserConnectRequest.deserialize(bytes);
        }
    }
    export class NewUserConnectResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            client_id?: number;
            token?: string;
            worker_id?: number;
            websocket_id?: number;
            websocket_time?: number;
            websocket_flag?: boolean;
            chat_expire_time?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("client_id" in data && data.client_id != undefined) {
                    this.client_id = data.client_id;
                }
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
                if ("worker_id" in data && data.worker_id != undefined) {
                    this.worker_id = data.worker_id;
                }
                if ("websocket_id" in data && data.websocket_id != undefined) {
                    this.websocket_id = data.websocket_id;
                }
                if ("websocket_time" in data && data.websocket_time != undefined) {
                    this.websocket_time = data.websocket_time;
                }
                if ("websocket_flag" in data && data.websocket_flag != undefined) {
                    this.websocket_flag = data.websocket_flag;
                }
                if ("chat_expire_time" in data && data.chat_expire_time != undefined) {
                    this.chat_expire_time = data.chat_expire_time;
                }
            }
        }
        get client_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set client_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get worker_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set worker_id(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get websocket_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set websocket_id(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get websocket_time() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set websocket_time(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get websocket_flag() {
            return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
        }
        set websocket_flag(value: boolean) {
            pb_1.Message.setField(this, 6, value);
        }
        get chat_expire_time() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set chat_expire_time(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            client_id?: number;
            token?: string;
            worker_id?: number;
            websocket_id?: number;
            websocket_time?: number;
            websocket_flag?: boolean;
            chat_expire_time?: number;
        }): NewUserConnectResponse {
            const message = new NewUserConnectResponse({});
            if (data.client_id != null) {
                message.client_id = data.client_id;
            }
            if (data.token != null) {
                message.token = data.token;
            }
            if (data.worker_id != null) {
                message.worker_id = data.worker_id;
            }
            if (data.websocket_id != null) {
                message.websocket_id = data.websocket_id;
            }
            if (data.websocket_time != null) {
                message.websocket_time = data.websocket_time;
            }
            if (data.websocket_flag != null) {
                message.websocket_flag = data.websocket_flag;
            }
            if (data.chat_expire_time != null) {
                message.chat_expire_time = data.chat_expire_time;
            }
            return message;
        }
        toObject() {
            const data: {
                client_id?: number;
                token?: string;
                worker_id?: number;
                websocket_id?: number;
                websocket_time?: number;
                websocket_flag?: boolean;
                chat_expire_time?: number;
            } = {};
            if (this.client_id != null) {
                data.client_id = this.client_id;
            }
            if (this.token != null) {
                data.token = this.token;
            }
            if (this.worker_id != null) {
                data.worker_id = this.worker_id;
            }
            if (this.websocket_id != null) {
                data.websocket_id = this.websocket_id;
            }
            if (this.websocket_time != null) {
                data.websocket_time = this.websocket_time;
            }
            if (this.websocket_flag != null) {
                data.websocket_flag = this.websocket_flag;
            }
            if (this.chat_expire_time != null) {
                data.chat_expire_time = this.chat_expire_time;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.client_id != 0)
                writer.writeInt64(1, this.client_id);
            if (this.token.length)
                writer.writeString(2, this.token);
            if (this.worker_id != 0)
                writer.writeInt32(3, this.worker_id);
            if (this.websocket_id != 0)
                writer.writeUint64(4, this.websocket_id);
            if (this.websocket_time != 0)
                writer.writeInt64(5, this.websocket_time);
            if (this.websocket_flag != false)
                writer.writeBool(6, this.websocket_flag);
            if (this.chat_expire_time != 0)
                writer.writeInt64(7, this.chat_expire_time);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NewUserConnectResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NewUserConnectResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.client_id = reader.readInt64();
                        break;
                    case 2:
                        message.token = reader.readString();
                        break;
                    case 3:
                        message.worker_id = reader.readInt32();
                        break;
                    case 4:
                        message.websocket_id = reader.readUint64();
                        break;
                    case 5:
                        message.websocket_time = reader.readInt64();
                        break;
                    case 6:
                        message.websocket_flag = reader.readBool();
                        break;
                    case 7:
                        message.chat_expire_time = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): NewUserConnectResponse {
            return NewUserConnectResponse.deserialize(bytes);
        }
    }
    export class NewDisconnectRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            client_id?: number[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("client_id" in data && data.client_id != undefined) {
                    this.client_id = data.client_id;
                }
            }
        }
        get client_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as number[];
        }
        set client_id(value: number[]) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            client_id?: number[];
        }): NewDisconnectRequest {
            const message = new NewDisconnectRequest({});
            if (data.client_id != null) {
                message.client_id = data.client_id;
            }
            return message;
        }
        toObject() {
            const data: {
                client_id?: number[];
            } = {};
            if (this.client_id != null) {
                data.client_id = this.client_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.client_id.length)
                writer.writePackedInt64(1, this.client_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NewDisconnectRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NewDisconnectRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.client_id = reader.readPackedInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): NewDisconnectRequest {
            return NewDisconnectRequest.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedGatewayManagerService {
        static definition = {
            Beacon: {
                path: "/api.core.GatewayManager/Beacon",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GatewayBeaconRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GatewayBeaconRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            Register: {
                path: "/api.core.GatewayManager/Register",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GatewayRegisterRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GatewayRegisterRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GatewayRegisterResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GatewayRegisterResponse.deserialize(new Uint8Array(bytes))
            },
            Teardown: {
                path: "/api.core.GatewayManager/Teardown",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GatewayTeardownRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GatewayTeardownRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            PubSubSYN: {
                path: "/api.core.GatewayManager/PubSubSYN",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GatewayNodeRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GatewayNodeRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            PubSubACK: {
                path: "/api.core.GatewayManager/PubSubACK",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GatewayNodeRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GatewayNodeRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            NewWorkerConnect: {
                path: "/api.core.GatewayManager/NewWorkerConnect",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: NewWorkerConnectRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => NewWorkerConnectRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: NewWorkerConnectResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => NewWorkerConnectResponse.deserialize(new Uint8Array(bytes))
            },
            NewUserConnect: {
                path: "/api.core.GatewayManager/NewUserConnect",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: NewUserConnectRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => NewUserConnectRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: NewUserConnectResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => NewUserConnectResponse.deserialize(new Uint8Array(bytes))
            },
            NewUserConnectV2: {
                path: "/api.core.GatewayManager/NewUserConnectV2",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: NewUserConnectRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => NewUserConnectRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: NewUserConnectResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => NewUserConnectResponse.deserialize(new Uint8Array(bytes))
            },
            NewDisconnect: {
                path: "/api.core.GatewayManager/NewDisconnect",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: NewDisconnectRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => NewDisconnectRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            WsLogOut: {
                path: "/api.core.GatewayManager/WsLogOut",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract Beacon(call: grpc_1.ServerUnaryCall<GatewayBeaconRequest, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
        abstract Register(call: grpc_1.ServerUnaryCall<GatewayRegisterRequest, GatewayRegisterResponse>, callback: grpc_1.sendUnaryData<GatewayRegisterResponse>): void;
        abstract Teardown(call: grpc_1.ServerUnaryCall<GatewayTeardownRequest, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
        abstract PubSubSYN(call: grpc_1.ServerUnaryCall<GatewayNodeRequest, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
        abstract PubSubACK(call: grpc_1.ServerUnaryCall<GatewayNodeRequest, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
        abstract NewWorkerConnect(call: grpc_1.ServerUnaryCall<NewWorkerConnectRequest, NewWorkerConnectResponse>, callback: grpc_1.sendUnaryData<NewWorkerConnectResponse>): void;
        abstract NewUserConnect(call: grpc_1.ServerUnaryCall<NewUserConnectRequest, NewUserConnectResponse>, callback: grpc_1.sendUnaryData<NewUserConnectResponse>): void;
        abstract NewUserConnectV2(call: grpc_1.ServerUnaryCall<NewUserConnectRequest, NewUserConnectResponse>, callback: grpc_1.sendUnaryData<NewUserConnectResponse>): void;
        abstract NewDisconnect(call: grpc_1.ServerUnaryCall<NewDisconnectRequest, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
        abstract WsLogOut(call: grpc_1.ServerUnaryCall<dependency_2.google.protobuf.Empty, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
    }
    export class GatewayManagerClient extends grpc_1.makeGenericClientConstructor(UnimplementedGatewayManagerService.definition, "GatewayManager", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        Beacon: GrpcUnaryServiceInterface<GatewayBeaconRequest, dependency_2.google.protobuf.Empty> = (message: GatewayBeaconRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_2.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.Beacon(message, metadata, options, callback);
        };
        Register: GrpcUnaryServiceInterface<GatewayRegisterRequest, GatewayRegisterResponse> = (message: GatewayRegisterRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GatewayRegisterResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GatewayRegisterResponse>, callback?: grpc_1.requestCallback<GatewayRegisterResponse>): grpc_1.ClientUnaryCall => {
            return super.Register(message, metadata, options, callback);
        };
        Teardown: GrpcUnaryServiceInterface<GatewayTeardownRequest, dependency_2.google.protobuf.Empty> = (message: GatewayTeardownRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_2.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.Teardown(message, metadata, options, callback);
        };
        PubSubSYN: GrpcUnaryServiceInterface<GatewayNodeRequest, dependency_2.google.protobuf.Empty> = (message: GatewayNodeRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_2.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.PubSubSYN(message, metadata, options, callback);
        };
        PubSubACK: GrpcUnaryServiceInterface<GatewayNodeRequest, dependency_2.google.protobuf.Empty> = (message: GatewayNodeRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_2.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.PubSubACK(message, metadata, options, callback);
        };
        NewWorkerConnect: GrpcUnaryServiceInterface<NewWorkerConnectRequest, NewWorkerConnectResponse> = (message: NewWorkerConnectRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<NewWorkerConnectResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<NewWorkerConnectResponse>, callback?: grpc_1.requestCallback<NewWorkerConnectResponse>): grpc_1.ClientUnaryCall => {
            return super.NewWorkerConnect(message, metadata, options, callback);
        };
        NewUserConnect: GrpcUnaryServiceInterface<NewUserConnectRequest, NewUserConnectResponse> = (message: NewUserConnectRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<NewUserConnectResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<NewUserConnectResponse>, callback?: grpc_1.requestCallback<NewUserConnectResponse>): grpc_1.ClientUnaryCall => {
            return super.NewUserConnect(message, metadata, options, callback);
        };
        NewUserConnectV2: GrpcUnaryServiceInterface<NewUserConnectRequest, NewUserConnectResponse> = (message: NewUserConnectRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<NewUserConnectResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<NewUserConnectResponse>, callback?: grpc_1.requestCallback<NewUserConnectResponse>): grpc_1.ClientUnaryCall => {
            return super.NewUserConnectV2(message, metadata, options, callback);
        };
        NewDisconnect: GrpcUnaryServiceInterface<NewDisconnectRequest, dependency_2.google.protobuf.Empty> = (message: NewDisconnectRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_2.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.NewDisconnect(message, metadata, options, callback);
        };
        WsLogOut: GrpcUnaryServiceInterface<dependency_2.google.protobuf.Empty, dependency_2.google.protobuf.Empty> = (message: dependency_2.google.protobuf.Empty, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_2.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.WsLogOut(message, metadata, options, callback);
        };
    }
}
