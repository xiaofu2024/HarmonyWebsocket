/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.26.1
 * source: api/core/message.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../option";
import * as dependency_2 from "./../../validate/validate";
import * as dependency_3 from "./../../google/protobuf/empty";
import * as dependency_4 from "./../../google/protobuf/timestamp";
import * as dependency_5 from "./../common/c_message";
import * as dependency_6 from "./../common/c_chat";
import * as dependency_7 from "./front";
import * as dependency_8 from "./../common/c_entrance";
import * as dependency_9 from "./../common/c_base";
import * as dependency_10 from "./worker";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace api.core {
    export enum MessageSenderType {
        SENDER_TYPE_ALL = 0,
        SENDER_TYPE_USER = 1,
        SENDER_TYPE_WORKER = 2
    }
    export enum CustomerKeywordType {
        CKT_All = 0,
        CKT_Customer = 1,
        CKT_Worker = 2
    }
    export class MessageSyncRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            chat_id?: number;
            msg_id?: number;
            count?: number;
            with_last_one?: boolean;
            worker_id?: number;
            consult_id?: number;
            user_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("chat_id" in data && data.chat_id != undefined) {
                    this.chat_id = data.chat_id;
                }
                if ("msg_id" in data && data.msg_id != undefined) {
                    this.msg_id = data.msg_id;
                }
                if ("count" in data && data.count != undefined) {
                    this.count = data.count;
                }
                if ("with_last_one" in data && data.with_last_one != undefined) {
                    this.with_last_one = data.with_last_one;
                }
                if ("worker_id" in data && data.worker_id != undefined) {
                    this.worker_id = data.worker_id;
                }
                if ("consult_id" in data && data.consult_id != undefined) {
                    this.consult_id = data.consult_id;
                }
                if ("user_id" in data && data.user_id != undefined) {
                    this.user_id = data.user_id;
                }
            }
        }
        get chat_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set chat_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get msg_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set msg_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get count() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set count(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get with_last_one() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set with_last_one(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        get worker_id() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set worker_id(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get consult_id() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set consult_id(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get user_id() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set user_id(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            chat_id?: number;
            msg_id?: number;
            count?: number;
            with_last_one?: boolean;
            worker_id?: number;
            consult_id?: number;
            user_id?: number;
        }): MessageSyncRequest {
            const message = new MessageSyncRequest({});
            if (data.chat_id != null) {
                message.chat_id = data.chat_id;
            }
            if (data.msg_id != null) {
                message.msg_id = data.msg_id;
            }
            if (data.count != null) {
                message.count = data.count;
            }
            if (data.with_last_one != null) {
                message.with_last_one = data.with_last_one;
            }
            if (data.worker_id != null) {
                message.worker_id = data.worker_id;
            }
            if (data.consult_id != null) {
                message.consult_id = data.consult_id;
            }
            if (data.user_id != null) {
                message.user_id = data.user_id;
            }
            return message;
        }
        toObject() {
            const data: {
                chat_id?: number;
                msg_id?: number;
                count?: number;
                with_last_one?: boolean;
                worker_id?: number;
                consult_id?: number;
                user_id?: number;
            } = {};
            if (this.chat_id != null) {
                data.chat_id = this.chat_id;
            }
            if (this.msg_id != null) {
                data.msg_id = this.msg_id;
            }
            if (this.count != null) {
                data.count = this.count;
            }
            if (this.with_last_one != null) {
                data.with_last_one = this.with_last_one;
            }
            if (this.worker_id != null) {
                data.worker_id = this.worker_id;
            }
            if (this.consult_id != null) {
                data.consult_id = this.consult_id;
            }
            if (this.user_id != null) {
                data.user_id = this.user_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.chat_id != 0)
                writer.writeInt64(1, this.chat_id);
            if (this.msg_id != 0)
                writer.writeInt64(2, this.msg_id);
            if (this.count != 0)
                writer.writeInt32(3, this.count);
            if (this.with_last_one != false)
                writer.writeBool(4, this.with_last_one);
            if (this.worker_id != 0)
                writer.writeInt32(5, this.worker_id);
            if (this.consult_id != 0)
                writer.writeUint32(6, this.consult_id);
            if (this.user_id != 0)
                writer.writeInt32(7, this.user_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MessageSyncRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MessageSyncRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.chat_id = reader.readInt64();
                        break;
                    case 2:
                        message.msg_id = reader.readInt64();
                        break;
                    case 3:
                        message.count = reader.readInt32();
                        break;
                    case 4:
                        message.with_last_one = reader.readBool();
                        break;
                    case 5:
                        message.worker_id = reader.readInt32();
                        break;
                    case 6:
                        message.consult_id = reader.readUint32();
                        break;
                    case 7:
                        message.user_id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MessageSyncRequest {
            return MessageSyncRequest.deserialize(bytes);
        }
    }
    export class MessageSyncResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            request?: MessageSyncRequest;
            list?: dependency_5.api.common.Message[];
            last_msg_id?: number;
            nick?: string;
            replyList?: dependency_5.api.common.Message[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2, 5], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("request" in data && data.request != undefined) {
                    this.request = data.request;
                }
                if ("list" in data && data.list != undefined) {
                    this.list = data.list;
                }
                if ("last_msg_id" in data && data.last_msg_id != undefined) {
                    this.last_msg_id = data.last_msg_id;
                }
                if ("nick" in data && data.nick != undefined) {
                    this.nick = data.nick;
                }
                if ("replyList" in data && data.replyList != undefined) {
                    this.replyList = data.replyList;
                }
            }
        }
        get request() {
            return pb_1.Message.getWrapperField(this, MessageSyncRequest, 1) as MessageSyncRequest;
        }
        set request(value: MessageSyncRequest) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_request() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get list() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_5.api.common.Message, 2) as dependency_5.api.common.Message[];
        }
        set list(value: dependency_5.api.common.Message[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get last_msg_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set last_msg_id(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get nick() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set nick(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get replyList() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_5.api.common.Message, 5) as dependency_5.api.common.Message[];
        }
        set replyList(value: dependency_5.api.common.Message[]) {
            pb_1.Message.setRepeatedWrapperField(this, 5, value);
        }
        static fromObject(data: {
            request?: ReturnType<typeof MessageSyncRequest.prototype.toObject>;
            list?: ReturnType<typeof dependency_5.api.common.Message.prototype.toObject>[];
            last_msg_id?: number;
            nick?: string;
            replyList?: ReturnType<typeof dependency_5.api.common.Message.prototype.toObject>[];
        }): MessageSyncResponse {
            const message = new MessageSyncResponse({});
            if (data.request != null) {
                message.request = MessageSyncRequest.fromObject(data.request);
            }
            if (data.list != null) {
                message.list = data.list.map(item => dependency_5.api.common.Message.fromObject(item));
            }
            if (data.last_msg_id != null) {
                message.last_msg_id = data.last_msg_id;
            }
            if (data.nick != null) {
                message.nick = data.nick;
            }
            if (data.replyList != null) {
                message.replyList = data.replyList.map(item => dependency_5.api.common.Message.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                request?: ReturnType<typeof MessageSyncRequest.prototype.toObject>;
                list?: ReturnType<typeof dependency_5.api.common.Message.prototype.toObject>[];
                last_msg_id?: number;
                nick?: string;
                replyList?: ReturnType<typeof dependency_5.api.common.Message.prototype.toObject>[];
            } = {};
            if (this.request != null) {
                data.request = this.request.toObject();
            }
            if (this.list != null) {
                data.list = this.list.map((item: dependency_5.api.common.Message) => item.toObject());
            }
            if (this.last_msg_id != null) {
                data.last_msg_id = this.last_msg_id;
            }
            if (this.nick != null) {
                data.nick = this.nick;
            }
            if (this.replyList != null) {
                data.replyList = this.replyList.map((item: dependency_5.api.common.Message) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_request)
                writer.writeMessage(1, this.request, () => this.request.serialize(writer));
            if (this.list.length)
                writer.writeRepeatedMessage(2, this.list, (item: dependency_5.api.common.Message) => item.serialize(writer));
            if (this.last_msg_id != 0)
                writer.writeInt64(3, this.last_msg_id);
            if (this.nick.length)
                writer.writeString(4, this.nick);
            if (this.replyList.length)
                writer.writeRepeatedMessage(5, this.replyList, (item: dependency_5.api.common.Message) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MessageSyncResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MessageSyncResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.request, () => message.request = MessageSyncRequest.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.list, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_5.api.common.Message.deserialize(reader), dependency_5.api.common.Message));
                        break;
                    case 3:
                        message.last_msg_id = reader.readInt64();
                        break;
                    case 4:
                        message.nick = reader.readString();
                        break;
                    case 5:
                        reader.readMessage(message.replyList, () => pb_1.Message.addToRepeatedWrapperField(message, 5, dependency_5.api.common.Message.deserialize(reader), dependency_5.api.common.Message));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MessageSyncResponse {
            return MessageSyncResponse.deserialize(bytes);
        }
    }
    export class MessageSyncV2Request extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            chat_id?: number;
            msg_id?: number;
            count?: number;
            with_last_one?: boolean;
            worker_id?: number;
            consult_id?: number;
            user_id?: number;
            start_at?: number;
            end_at?: number;
            search?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("chat_id" in data && data.chat_id != undefined) {
                    this.chat_id = data.chat_id;
                }
                if ("msg_id" in data && data.msg_id != undefined) {
                    this.msg_id = data.msg_id;
                }
                if ("count" in data && data.count != undefined) {
                    this.count = data.count;
                }
                if ("with_last_one" in data && data.with_last_one != undefined) {
                    this.with_last_one = data.with_last_one;
                }
                if ("worker_id" in data && data.worker_id != undefined) {
                    this.worker_id = data.worker_id;
                }
                if ("consult_id" in data && data.consult_id != undefined) {
                    this.consult_id = data.consult_id;
                }
                if ("user_id" in data && data.user_id != undefined) {
                    this.user_id = data.user_id;
                }
                if ("start_at" in data && data.start_at != undefined) {
                    this.start_at = data.start_at;
                }
                if ("end_at" in data && data.end_at != undefined) {
                    this.end_at = data.end_at;
                }
                if ("search" in data && data.search != undefined) {
                    this.search = data.search;
                }
            }
        }
        get chat_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set chat_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get msg_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set msg_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get count() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set count(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get with_last_one() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set with_last_one(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        get worker_id() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set worker_id(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get consult_id() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set consult_id(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get user_id() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set user_id(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get start_at() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set start_at(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get end_at() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set end_at(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get search() {
            return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
        }
        set search(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        static fromObject(data: {
            chat_id?: number;
            msg_id?: number;
            count?: number;
            with_last_one?: boolean;
            worker_id?: number;
            consult_id?: number;
            user_id?: number;
            start_at?: number;
            end_at?: number;
            search?: string;
        }): MessageSyncV2Request {
            const message = new MessageSyncV2Request({});
            if (data.chat_id != null) {
                message.chat_id = data.chat_id;
            }
            if (data.msg_id != null) {
                message.msg_id = data.msg_id;
            }
            if (data.count != null) {
                message.count = data.count;
            }
            if (data.with_last_one != null) {
                message.with_last_one = data.with_last_one;
            }
            if (data.worker_id != null) {
                message.worker_id = data.worker_id;
            }
            if (data.consult_id != null) {
                message.consult_id = data.consult_id;
            }
            if (data.user_id != null) {
                message.user_id = data.user_id;
            }
            if (data.start_at != null) {
                message.start_at = data.start_at;
            }
            if (data.end_at != null) {
                message.end_at = data.end_at;
            }
            if (data.search != null) {
                message.search = data.search;
            }
            return message;
        }
        toObject() {
            const data: {
                chat_id?: number;
                msg_id?: number;
                count?: number;
                with_last_one?: boolean;
                worker_id?: number;
                consult_id?: number;
                user_id?: number;
                start_at?: number;
                end_at?: number;
                search?: string;
            } = {};
            if (this.chat_id != null) {
                data.chat_id = this.chat_id;
            }
            if (this.msg_id != null) {
                data.msg_id = this.msg_id;
            }
            if (this.count != null) {
                data.count = this.count;
            }
            if (this.with_last_one != null) {
                data.with_last_one = this.with_last_one;
            }
            if (this.worker_id != null) {
                data.worker_id = this.worker_id;
            }
            if (this.consult_id != null) {
                data.consult_id = this.consult_id;
            }
            if (this.user_id != null) {
                data.user_id = this.user_id;
            }
            if (this.start_at != null) {
                data.start_at = this.start_at;
            }
            if (this.end_at != null) {
                data.end_at = this.end_at;
            }
            if (this.search != null) {
                data.search = this.search;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.chat_id != 0)
                writer.writeInt64(1, this.chat_id);
            if (this.msg_id != 0)
                writer.writeInt64(2, this.msg_id);
            if (this.count != 0)
                writer.writeInt32(3, this.count);
            if (this.with_last_one != false)
                writer.writeBool(4, this.with_last_one);
            if (this.worker_id != 0)
                writer.writeInt32(5, this.worker_id);
            if (this.consult_id != 0)
                writer.writeUint32(6, this.consult_id);
            if (this.user_id != 0)
                writer.writeInt32(7, this.user_id);
            if (this.start_at != 0)
                writer.writeInt64(8, this.start_at);
            if (this.end_at != 0)
                writer.writeInt64(9, this.end_at);
            if (this.search.length)
                writer.writeString(10, this.search);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MessageSyncV2Request {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MessageSyncV2Request();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.chat_id = reader.readInt64();
                        break;
                    case 2:
                        message.msg_id = reader.readInt64();
                        break;
                    case 3:
                        message.count = reader.readInt32();
                        break;
                    case 4:
                        message.with_last_one = reader.readBool();
                        break;
                    case 5:
                        message.worker_id = reader.readInt32();
                        break;
                    case 6:
                        message.consult_id = reader.readUint32();
                        break;
                    case 7:
                        message.user_id = reader.readInt32();
                        break;
                    case 8:
                        message.start_at = reader.readInt64();
                        break;
                    case 9:
                        message.end_at = reader.readInt64();
                        break;
                    case 10:
                        message.search = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MessageSyncV2Request {
            return MessageSyncV2Request.deserialize(bytes);
        }
    }
    export class MessageSyncV2Response extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            request?: MessageSyncV2Request;
            list?: dependency_5.api.common.Message[];
            last_msg_id?: number;
            replyList?: dependency_5.api.common.Message[];
            uid?: number;
            nick?: string;
            avatar?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2, 4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("request" in data && data.request != undefined) {
                    this.request = data.request;
                }
                if ("list" in data && data.list != undefined) {
                    this.list = data.list;
                }
                if ("last_msg_id" in data && data.last_msg_id != undefined) {
                    this.last_msg_id = data.last_msg_id;
                }
                if ("replyList" in data && data.replyList != undefined) {
                    this.replyList = data.replyList;
                }
                if ("uid" in data && data.uid != undefined) {
                    this.uid = data.uid;
                }
                if ("nick" in data && data.nick != undefined) {
                    this.nick = data.nick;
                }
                if ("avatar" in data && data.avatar != undefined) {
                    this.avatar = data.avatar;
                }
            }
        }
        get request() {
            return pb_1.Message.getWrapperField(this, MessageSyncV2Request, 1) as MessageSyncV2Request;
        }
        set request(value: MessageSyncV2Request) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_request() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get list() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_5.api.common.Message, 2) as dependency_5.api.common.Message[];
        }
        set list(value: dependency_5.api.common.Message[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get last_msg_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set last_msg_id(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get replyList() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_5.api.common.Message, 4) as dependency_5.api.common.Message[];
        }
        set replyList(value: dependency_5.api.common.Message[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get uid() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set uid(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get nick() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set nick(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get avatar() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set avatar(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            request?: ReturnType<typeof MessageSyncV2Request.prototype.toObject>;
            list?: ReturnType<typeof dependency_5.api.common.Message.prototype.toObject>[];
            last_msg_id?: number;
            replyList?: ReturnType<typeof dependency_5.api.common.Message.prototype.toObject>[];
            uid?: number;
            nick?: string;
            avatar?: string;
        }): MessageSyncV2Response {
            const message = new MessageSyncV2Response({});
            if (data.request != null) {
                message.request = MessageSyncV2Request.fromObject(data.request);
            }
            if (data.list != null) {
                message.list = data.list.map(item => dependency_5.api.common.Message.fromObject(item));
            }
            if (data.last_msg_id != null) {
                message.last_msg_id = data.last_msg_id;
            }
            if (data.replyList != null) {
                message.replyList = data.replyList.map(item => dependency_5.api.common.Message.fromObject(item));
            }
            if (data.uid != null) {
                message.uid = data.uid;
            }
            if (data.nick != null) {
                message.nick = data.nick;
            }
            if (data.avatar != null) {
                message.avatar = data.avatar;
            }
            return message;
        }
        toObject() {
            const data: {
                request?: ReturnType<typeof MessageSyncV2Request.prototype.toObject>;
                list?: ReturnType<typeof dependency_5.api.common.Message.prototype.toObject>[];
                last_msg_id?: number;
                replyList?: ReturnType<typeof dependency_5.api.common.Message.prototype.toObject>[];
                uid?: number;
                nick?: string;
                avatar?: string;
            } = {};
            if (this.request != null) {
                data.request = this.request.toObject();
            }
            if (this.list != null) {
                data.list = this.list.map((item: dependency_5.api.common.Message) => item.toObject());
            }
            if (this.last_msg_id != null) {
                data.last_msg_id = this.last_msg_id;
            }
            if (this.replyList != null) {
                data.replyList = this.replyList.map((item: dependency_5.api.common.Message) => item.toObject());
            }
            if (this.uid != null) {
                data.uid = this.uid;
            }
            if (this.nick != null) {
                data.nick = this.nick;
            }
            if (this.avatar != null) {
                data.avatar = this.avatar;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_request)
                writer.writeMessage(1, this.request, () => this.request.serialize(writer));
            if (this.list.length)
                writer.writeRepeatedMessage(2, this.list, (item: dependency_5.api.common.Message) => item.serialize(writer));
            if (this.last_msg_id != 0)
                writer.writeInt64(3, this.last_msg_id);
            if (this.replyList.length)
                writer.writeRepeatedMessage(4, this.replyList, (item: dependency_5.api.common.Message) => item.serialize(writer));
            if (this.uid != 0)
                writer.writeInt32(5, this.uid);
            if (this.nick.length)
                writer.writeString(6, this.nick);
            if (this.avatar.length)
                writer.writeString(7, this.avatar);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MessageSyncV2Response {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MessageSyncV2Response();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.request, () => message.request = MessageSyncV2Request.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.list, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_5.api.common.Message.deserialize(reader), dependency_5.api.common.Message));
                        break;
                    case 3:
                        message.last_msg_id = reader.readInt64();
                        break;
                    case 4:
                        reader.readMessage(message.replyList, () => pb_1.Message.addToRepeatedWrapperField(message, 4, dependency_5.api.common.Message.deserialize(reader), dependency_5.api.common.Message));
                        break;
                    case 5:
                        message.uid = reader.readInt32();
                        break;
                    case 6:
                        message.nick = reader.readString();
                        break;
                    case 7:
                        message.avatar = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MessageSyncV2Response {
            return MessageSyncV2Response.deserialize(bytes);
        }
    }
    export class MessageSyncManagerRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            chat_id?: number;
            msg_id?: number;
            count?: number;
            with_last_one?: boolean;
            consult_id?: number;
            user_id?: number;
            start_at?: number;
            end_at?: number;
            nick?: string;
            search?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("chat_id" in data && data.chat_id != undefined) {
                    this.chat_id = data.chat_id;
                }
                if ("msg_id" in data && data.msg_id != undefined) {
                    this.msg_id = data.msg_id;
                }
                if ("count" in data && data.count != undefined) {
                    this.count = data.count;
                }
                if ("with_last_one" in data && data.with_last_one != undefined) {
                    this.with_last_one = data.with_last_one;
                }
                if ("consult_id" in data && data.consult_id != undefined) {
                    this.consult_id = data.consult_id;
                }
                if ("user_id" in data && data.user_id != undefined) {
                    this.user_id = data.user_id;
                }
                if ("start_at" in data && data.start_at != undefined) {
                    this.start_at = data.start_at;
                }
                if ("end_at" in data && data.end_at != undefined) {
                    this.end_at = data.end_at;
                }
                if ("nick" in data && data.nick != undefined) {
                    this.nick = data.nick;
                }
                if ("search" in data && data.search != undefined) {
                    this.search = data.search;
                }
            }
        }
        get chat_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set chat_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get msg_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set msg_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get count() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set count(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get with_last_one() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set with_last_one(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        get consult_id() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set consult_id(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get user_id() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set user_id(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get start_at() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set start_at(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get end_at() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set end_at(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get nick() {
            return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
        }
        set nick(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        get search() {
            return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
        }
        set search(value: string) {
            pb_1.Message.setField(this, 11, value);
        }
        static fromObject(data: {
            chat_id?: number;
            msg_id?: number;
            count?: number;
            with_last_one?: boolean;
            consult_id?: number;
            user_id?: number;
            start_at?: number;
            end_at?: number;
            nick?: string;
            search?: string;
        }): MessageSyncManagerRequest {
            const message = new MessageSyncManagerRequest({});
            if (data.chat_id != null) {
                message.chat_id = data.chat_id;
            }
            if (data.msg_id != null) {
                message.msg_id = data.msg_id;
            }
            if (data.count != null) {
                message.count = data.count;
            }
            if (data.with_last_one != null) {
                message.with_last_one = data.with_last_one;
            }
            if (data.consult_id != null) {
                message.consult_id = data.consult_id;
            }
            if (data.user_id != null) {
                message.user_id = data.user_id;
            }
            if (data.start_at != null) {
                message.start_at = data.start_at;
            }
            if (data.end_at != null) {
                message.end_at = data.end_at;
            }
            if (data.nick != null) {
                message.nick = data.nick;
            }
            if (data.search != null) {
                message.search = data.search;
            }
            return message;
        }
        toObject() {
            const data: {
                chat_id?: number;
                msg_id?: number;
                count?: number;
                with_last_one?: boolean;
                consult_id?: number;
                user_id?: number;
                start_at?: number;
                end_at?: number;
                nick?: string;
                search?: string;
            } = {};
            if (this.chat_id != null) {
                data.chat_id = this.chat_id;
            }
            if (this.msg_id != null) {
                data.msg_id = this.msg_id;
            }
            if (this.count != null) {
                data.count = this.count;
            }
            if (this.with_last_one != null) {
                data.with_last_one = this.with_last_one;
            }
            if (this.consult_id != null) {
                data.consult_id = this.consult_id;
            }
            if (this.user_id != null) {
                data.user_id = this.user_id;
            }
            if (this.start_at != null) {
                data.start_at = this.start_at;
            }
            if (this.end_at != null) {
                data.end_at = this.end_at;
            }
            if (this.nick != null) {
                data.nick = this.nick;
            }
            if (this.search != null) {
                data.search = this.search;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.chat_id != 0)
                writer.writeInt64(1, this.chat_id);
            if (this.msg_id != 0)
                writer.writeInt64(2, this.msg_id);
            if (this.count != 0)
                writer.writeInt32(3, this.count);
            if (this.with_last_one != false)
                writer.writeBool(4, this.with_last_one);
            if (this.consult_id != 0)
                writer.writeUint32(6, this.consult_id);
            if (this.user_id != 0)
                writer.writeInt32(7, this.user_id);
            if (this.start_at != 0)
                writer.writeInt64(8, this.start_at);
            if (this.end_at != 0)
                writer.writeInt64(9, this.end_at);
            if (this.nick.length)
                writer.writeString(10, this.nick);
            if (this.search.length)
                writer.writeString(11, this.search);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MessageSyncManagerRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MessageSyncManagerRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.chat_id = reader.readInt64();
                        break;
                    case 2:
                        message.msg_id = reader.readInt64();
                        break;
                    case 3:
                        message.count = reader.readInt32();
                        break;
                    case 4:
                        message.with_last_one = reader.readBool();
                        break;
                    case 6:
                        message.consult_id = reader.readUint32();
                        break;
                    case 7:
                        message.user_id = reader.readInt32();
                        break;
                    case 8:
                        message.start_at = reader.readInt64();
                        break;
                    case 9:
                        message.end_at = reader.readInt64();
                        break;
                    case 10:
                        message.nick = reader.readString();
                        break;
                    case 11:
                        message.search = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MessageSyncManagerRequest {
            return MessageSyncManagerRequest.deserialize(bytes);
        }
    }
    export class MessageSyncManagerResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            request?: MessageSyncV2Request;
            list?: MessageWithWorker[];
            replyList?: dependency_5.api.common.Message[];
            last_msg_id?: number;
            uid?: number;
            nick?: string;
            avatar?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2, 3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("request" in data && data.request != undefined) {
                    this.request = data.request;
                }
                if ("list" in data && data.list != undefined) {
                    this.list = data.list;
                }
                if ("replyList" in data && data.replyList != undefined) {
                    this.replyList = data.replyList;
                }
                if ("last_msg_id" in data && data.last_msg_id != undefined) {
                    this.last_msg_id = data.last_msg_id;
                }
                if ("uid" in data && data.uid != undefined) {
                    this.uid = data.uid;
                }
                if ("nick" in data && data.nick != undefined) {
                    this.nick = data.nick;
                }
                if ("avatar" in data && data.avatar != undefined) {
                    this.avatar = data.avatar;
                }
            }
        }
        get request() {
            return pb_1.Message.getWrapperField(this, MessageSyncV2Request, 1) as MessageSyncV2Request;
        }
        set request(value: MessageSyncV2Request) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_request() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get list() {
            return pb_1.Message.getRepeatedWrapperField(this, MessageWithWorker, 2) as MessageWithWorker[];
        }
        set list(value: MessageWithWorker[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get replyList() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_5.api.common.Message, 3) as dependency_5.api.common.Message[];
        }
        set replyList(value: dependency_5.api.common.Message[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get last_msg_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set last_msg_id(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get uid() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set uid(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get nick() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set nick(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get avatar() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set avatar(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            request?: ReturnType<typeof MessageSyncV2Request.prototype.toObject>;
            list?: ReturnType<typeof MessageWithWorker.prototype.toObject>[];
            replyList?: ReturnType<typeof dependency_5.api.common.Message.prototype.toObject>[];
            last_msg_id?: number;
            uid?: number;
            nick?: string;
            avatar?: string;
        }): MessageSyncManagerResponse {
            const message = new MessageSyncManagerResponse({});
            if (data.request != null) {
                message.request = MessageSyncV2Request.fromObject(data.request);
            }
            if (data.list != null) {
                message.list = data.list.map(item => MessageWithWorker.fromObject(item));
            }
            if (data.replyList != null) {
                message.replyList = data.replyList.map(item => dependency_5.api.common.Message.fromObject(item));
            }
            if (data.last_msg_id != null) {
                message.last_msg_id = data.last_msg_id;
            }
            if (data.uid != null) {
                message.uid = data.uid;
            }
            if (data.nick != null) {
                message.nick = data.nick;
            }
            if (data.avatar != null) {
                message.avatar = data.avatar;
            }
            return message;
        }
        toObject() {
            const data: {
                request?: ReturnType<typeof MessageSyncV2Request.prototype.toObject>;
                list?: ReturnType<typeof MessageWithWorker.prototype.toObject>[];
                replyList?: ReturnType<typeof dependency_5.api.common.Message.prototype.toObject>[];
                last_msg_id?: number;
                uid?: number;
                nick?: string;
                avatar?: string;
            } = {};
            if (this.request != null) {
                data.request = this.request.toObject();
            }
            if (this.list != null) {
                data.list = this.list.map((item: MessageWithWorker) => item.toObject());
            }
            if (this.replyList != null) {
                data.replyList = this.replyList.map((item: dependency_5.api.common.Message) => item.toObject());
            }
            if (this.last_msg_id != null) {
                data.last_msg_id = this.last_msg_id;
            }
            if (this.uid != null) {
                data.uid = this.uid;
            }
            if (this.nick != null) {
                data.nick = this.nick;
            }
            if (this.avatar != null) {
                data.avatar = this.avatar;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_request)
                writer.writeMessage(1, this.request, () => this.request.serialize(writer));
            if (this.list.length)
                writer.writeRepeatedMessage(2, this.list, (item: MessageWithWorker) => item.serialize(writer));
            if (this.replyList.length)
                writer.writeRepeatedMessage(3, this.replyList, (item: dependency_5.api.common.Message) => item.serialize(writer));
            if (this.last_msg_id != 0)
                writer.writeInt64(4, this.last_msg_id);
            if (this.uid != 0)
                writer.writeInt32(5, this.uid);
            if (this.nick.length)
                writer.writeString(6, this.nick);
            if (this.avatar.length)
                writer.writeString(7, this.avatar);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MessageSyncManagerResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MessageSyncManagerResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.request, () => message.request = MessageSyncV2Request.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.list, () => pb_1.Message.addToRepeatedWrapperField(message, 2, MessageWithWorker.deserialize(reader), MessageWithWorker));
                        break;
                    case 3:
                        reader.readMessage(message.replyList, () => pb_1.Message.addToRepeatedWrapperField(message, 3, dependency_5.api.common.Message.deserialize(reader), dependency_5.api.common.Message));
                        break;
                    case 4:
                        message.last_msg_id = reader.readInt64();
                        break;
                    case 5:
                        message.uid = reader.readInt32();
                        break;
                    case 6:
                        message.nick = reader.readString();
                        break;
                    case 7:
                        message.avatar = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MessageSyncManagerResponse {
            return MessageSyncManagerResponse.deserialize(bytes);
        }
    }
    export class MessageWithWorker extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            msg?: dependency_5.api.common.Message;
            sender_uid?: number;
            sender_name?: string;
            sender_avatar?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("msg" in data && data.msg != undefined) {
                    this.msg = data.msg;
                }
                if ("sender_uid" in data && data.sender_uid != undefined) {
                    this.sender_uid = data.sender_uid;
                }
                if ("sender_name" in data && data.sender_name != undefined) {
                    this.sender_name = data.sender_name;
                }
                if ("sender_avatar" in data && data.sender_avatar != undefined) {
                    this.sender_avatar = data.sender_avatar;
                }
            }
        }
        get msg() {
            return pb_1.Message.getWrapperField(this, dependency_5.api.common.Message, 1) as dependency_5.api.common.Message;
        }
        set msg(value: dependency_5.api.common.Message) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_msg() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get sender_uid() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set sender_uid(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get sender_name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set sender_name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get sender_avatar() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set sender_avatar(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            msg?: ReturnType<typeof dependency_5.api.common.Message.prototype.toObject>;
            sender_uid?: number;
            sender_name?: string;
            sender_avatar?: string;
        }): MessageWithWorker {
            const message = new MessageWithWorker({});
            if (data.msg != null) {
                message.msg = dependency_5.api.common.Message.fromObject(data.msg);
            }
            if (data.sender_uid != null) {
                message.sender_uid = data.sender_uid;
            }
            if (data.sender_name != null) {
                message.sender_name = data.sender_name;
            }
            if (data.sender_avatar != null) {
                message.sender_avatar = data.sender_avatar;
            }
            return message;
        }
        toObject() {
            const data: {
                msg?: ReturnType<typeof dependency_5.api.common.Message.prototype.toObject>;
                sender_uid?: number;
                sender_name?: string;
                sender_avatar?: string;
            } = {};
            if (this.msg != null) {
                data.msg = this.msg.toObject();
            }
            if (this.sender_uid != null) {
                data.sender_uid = this.sender_uid;
            }
            if (this.sender_name != null) {
                data.sender_name = this.sender_name;
            }
            if (this.sender_avatar != null) {
                data.sender_avatar = this.sender_avatar;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_msg)
                writer.writeMessage(1, this.msg, () => this.msg.serialize(writer));
            if (this.sender_uid != 0)
                writer.writeInt32(2, this.sender_uid);
            if (this.sender_name.length)
                writer.writeString(3, this.sender_name);
            if (this.sender_avatar.length)
                writer.writeString(4, this.sender_avatar);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MessageWithWorker {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MessageWithWorker();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.msg, () => message.msg = dependency_5.api.common.Message.deserialize(reader));
                        break;
                    case 2:
                        message.sender_uid = reader.readInt32();
                        break;
                    case 3:
                        message.sender_name = reader.readString();
                        break;
                    case 4:
                        message.sender_avatar = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MessageWithWorker {
            return MessageWithWorker.deserialize(bytes);
        }
    }
    export class MessageSyncManagerPageRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            chat_id?: number;
            user_id?: number;
            worker_id?: number;
            page_up_down?: dependency_9.api.common.PageUpDown;
            count?: number;
            start_at?: number;
            end_at?: number;
            sender_type?: MessageSenderType;
            last_msg_id?: number;
            last_msg_created_at?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("chat_id" in data && data.chat_id != undefined) {
                    this.chat_id = data.chat_id;
                }
                if ("user_id" in data && data.user_id != undefined) {
                    this.user_id = data.user_id;
                }
                if ("worker_id" in data && data.worker_id != undefined) {
                    this.worker_id = data.worker_id;
                }
                if ("page_up_down" in data && data.page_up_down != undefined) {
                    this.page_up_down = data.page_up_down;
                }
                if ("count" in data && data.count != undefined) {
                    this.count = data.count;
                }
                if ("start_at" in data && data.start_at != undefined) {
                    this.start_at = data.start_at;
                }
                if ("end_at" in data && data.end_at != undefined) {
                    this.end_at = data.end_at;
                }
                if ("sender_type" in data && data.sender_type != undefined) {
                    this.sender_type = data.sender_type;
                }
                if ("last_msg_id" in data && data.last_msg_id != undefined) {
                    this.last_msg_id = data.last_msg_id;
                }
                if ("last_msg_created_at" in data && data.last_msg_created_at != undefined) {
                    this.last_msg_created_at = data.last_msg_created_at;
                }
            }
        }
        get chat_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set chat_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get user_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set user_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get worker_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set worker_id(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get page_up_down() {
            return pb_1.Message.getFieldWithDefault(this, 5, dependency_9.api.common.PageUpDown.PUD_DEFAULT) as dependency_9.api.common.PageUpDown;
        }
        set page_up_down(value: dependency_9.api.common.PageUpDown) {
            pb_1.Message.setField(this, 5, value);
        }
        get count() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set count(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get start_at() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set start_at(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get end_at() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set end_at(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get sender_type() {
            return pb_1.Message.getFieldWithDefault(this, 9, MessageSenderType.SENDER_TYPE_ALL) as MessageSenderType;
        }
        set sender_type(value: MessageSenderType) {
            pb_1.Message.setField(this, 9, value);
        }
        get last_msg_id() {
            return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
        }
        set last_msg_id(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        get last_msg_created_at() {
            return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
        }
        set last_msg_created_at(value: number) {
            pb_1.Message.setField(this, 11, value);
        }
        static fromObject(data: {
            chat_id?: number;
            user_id?: number;
            worker_id?: number;
            page_up_down?: dependency_9.api.common.PageUpDown;
            count?: number;
            start_at?: number;
            end_at?: number;
            sender_type?: MessageSenderType;
            last_msg_id?: number;
            last_msg_created_at?: number;
        }): MessageSyncManagerPageRequest {
            const message = new MessageSyncManagerPageRequest({});
            if (data.chat_id != null) {
                message.chat_id = data.chat_id;
            }
            if (data.user_id != null) {
                message.user_id = data.user_id;
            }
            if (data.worker_id != null) {
                message.worker_id = data.worker_id;
            }
            if (data.page_up_down != null) {
                message.page_up_down = data.page_up_down;
            }
            if (data.count != null) {
                message.count = data.count;
            }
            if (data.start_at != null) {
                message.start_at = data.start_at;
            }
            if (data.end_at != null) {
                message.end_at = data.end_at;
            }
            if (data.sender_type != null) {
                message.sender_type = data.sender_type;
            }
            if (data.last_msg_id != null) {
                message.last_msg_id = data.last_msg_id;
            }
            if (data.last_msg_created_at != null) {
                message.last_msg_created_at = data.last_msg_created_at;
            }
            return message;
        }
        toObject() {
            const data: {
                chat_id?: number;
                user_id?: number;
                worker_id?: number;
                page_up_down?: dependency_9.api.common.PageUpDown;
                count?: number;
                start_at?: number;
                end_at?: number;
                sender_type?: MessageSenderType;
                last_msg_id?: number;
                last_msg_created_at?: number;
            } = {};
            if (this.chat_id != null) {
                data.chat_id = this.chat_id;
            }
            if (this.user_id != null) {
                data.user_id = this.user_id;
            }
            if (this.worker_id != null) {
                data.worker_id = this.worker_id;
            }
            if (this.page_up_down != null) {
                data.page_up_down = this.page_up_down;
            }
            if (this.count != null) {
                data.count = this.count;
            }
            if (this.start_at != null) {
                data.start_at = this.start_at;
            }
            if (this.end_at != null) {
                data.end_at = this.end_at;
            }
            if (this.sender_type != null) {
                data.sender_type = this.sender_type;
            }
            if (this.last_msg_id != null) {
                data.last_msg_id = this.last_msg_id;
            }
            if (this.last_msg_created_at != null) {
                data.last_msg_created_at = this.last_msg_created_at;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.chat_id != 0)
                writer.writeInt64(1, this.chat_id);
            if (this.user_id != 0)
                writer.writeInt32(2, this.user_id);
            if (this.worker_id != 0)
                writer.writeInt32(3, this.worker_id);
            if (this.page_up_down != dependency_9.api.common.PageUpDown.PUD_DEFAULT)
                writer.writeEnum(5, this.page_up_down);
            if (this.count != 0)
                writer.writeInt32(6, this.count);
            if (this.start_at != 0)
                writer.writeInt64(7, this.start_at);
            if (this.end_at != 0)
                writer.writeInt64(8, this.end_at);
            if (this.sender_type != MessageSenderType.SENDER_TYPE_ALL)
                writer.writeEnum(9, this.sender_type);
            if (this.last_msg_id != 0)
                writer.writeInt64(10, this.last_msg_id);
            if (this.last_msg_created_at != 0)
                writer.writeInt64(11, this.last_msg_created_at);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MessageSyncManagerPageRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MessageSyncManagerPageRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.chat_id = reader.readInt64();
                        break;
                    case 2:
                        message.user_id = reader.readInt32();
                        break;
                    case 3:
                        message.worker_id = reader.readInt32();
                        break;
                    case 5:
                        message.page_up_down = reader.readEnum();
                        break;
                    case 6:
                        message.count = reader.readInt32();
                        break;
                    case 7:
                        message.start_at = reader.readInt64();
                        break;
                    case 8:
                        message.end_at = reader.readInt64();
                        break;
                    case 9:
                        message.sender_type = reader.readEnum();
                        break;
                    case 10:
                        message.last_msg_id = reader.readInt64();
                        break;
                    case 11:
                        message.last_msg_created_at = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MessageSyncManagerPageRequest {
            return MessageSyncManagerPageRequest.deserialize(bytes);
        }
    }
    export class MessageSyncManagerPageResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            list?: MessageWithInfo[];
            last_msg_id?: number;
            total?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("list" in data && data.list != undefined) {
                    this.list = data.list;
                }
                if ("last_msg_id" in data && data.last_msg_id != undefined) {
                    this.last_msg_id = data.last_msg_id;
                }
                if ("total" in data && data.total != undefined) {
                    this.total = data.total;
                }
            }
        }
        get list() {
            return pb_1.Message.getRepeatedWrapperField(this, MessageWithInfo, 2) as MessageWithInfo[];
        }
        set list(value: MessageWithInfo[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get last_msg_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set last_msg_id(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get total() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set total(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            list?: ReturnType<typeof MessageWithInfo.prototype.toObject>[];
            last_msg_id?: number;
            total?: number;
        }): MessageSyncManagerPageResponse {
            const message = new MessageSyncManagerPageResponse({});
            if (data.list != null) {
                message.list = data.list.map(item => MessageWithInfo.fromObject(item));
            }
            if (data.last_msg_id != null) {
                message.last_msg_id = data.last_msg_id;
            }
            if (data.total != null) {
                message.total = data.total;
            }
            return message;
        }
        toObject() {
            const data: {
                list?: ReturnType<typeof MessageWithInfo.prototype.toObject>[];
                last_msg_id?: number;
                total?: number;
            } = {};
            if (this.list != null) {
                data.list = this.list.map((item: MessageWithInfo) => item.toObject());
            }
            if (this.last_msg_id != null) {
                data.last_msg_id = this.last_msg_id;
            }
            if (this.total != null) {
                data.total = this.total;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.list.length)
                writer.writeRepeatedMessage(2, this.list, (item: MessageWithInfo) => item.serialize(writer));
            if (this.last_msg_id != 0)
                writer.writeInt64(4, this.last_msg_id);
            if (this.total != 0)
                writer.writeInt32(5, this.total);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MessageSyncManagerPageResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MessageSyncManagerPageResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 2:
                        reader.readMessage(message.list, () => pb_1.Message.addToRepeatedWrapperField(message, 2, MessageWithInfo.deserialize(reader), MessageWithInfo));
                        break;
                    case 4:
                        message.last_msg_id = reader.readInt64();
                        break;
                    case 5:
                        message.total = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MessageSyncManagerPageResponse {
            return MessageSyncManagerPageResponse.deserialize(bytes);
        }
    }
    export class MessageWithInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            msg?: dependency_5.api.common.Message;
            sender?: MessageSenderInfo;
            receiver?: MessageSenderInfo;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("msg" in data && data.msg != undefined) {
                    this.msg = data.msg;
                }
                if ("sender" in data && data.sender != undefined) {
                    this.sender = data.sender;
                }
                if ("receiver" in data && data.receiver != undefined) {
                    this.receiver = data.receiver;
                }
            }
        }
        get msg() {
            return pb_1.Message.getWrapperField(this, dependency_5.api.common.Message, 1) as dependency_5.api.common.Message;
        }
        set msg(value: dependency_5.api.common.Message) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_msg() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get sender() {
            return pb_1.Message.getWrapperField(this, MessageSenderInfo, 2) as MessageSenderInfo;
        }
        set sender(value: MessageSenderInfo) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_sender() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get receiver() {
            return pb_1.Message.getWrapperField(this, MessageSenderInfo, 3) as MessageSenderInfo;
        }
        set receiver(value: MessageSenderInfo) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_receiver() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            msg?: ReturnType<typeof dependency_5.api.common.Message.prototype.toObject>;
            sender?: ReturnType<typeof MessageSenderInfo.prototype.toObject>;
            receiver?: ReturnType<typeof MessageSenderInfo.prototype.toObject>;
        }): MessageWithInfo {
            const message = new MessageWithInfo({});
            if (data.msg != null) {
                message.msg = dependency_5.api.common.Message.fromObject(data.msg);
            }
            if (data.sender != null) {
                message.sender = MessageSenderInfo.fromObject(data.sender);
            }
            if (data.receiver != null) {
                message.receiver = MessageSenderInfo.fromObject(data.receiver);
            }
            return message;
        }
        toObject() {
            const data: {
                msg?: ReturnType<typeof dependency_5.api.common.Message.prototype.toObject>;
                sender?: ReturnType<typeof MessageSenderInfo.prototype.toObject>;
                receiver?: ReturnType<typeof MessageSenderInfo.prototype.toObject>;
            } = {};
            if (this.msg != null) {
                data.msg = this.msg.toObject();
            }
            if (this.sender != null) {
                data.sender = this.sender.toObject();
            }
            if (this.receiver != null) {
                data.receiver = this.receiver.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_msg)
                writer.writeMessage(1, this.msg, () => this.msg.serialize(writer));
            if (this.has_sender)
                writer.writeMessage(2, this.sender, () => this.sender.serialize(writer));
            if (this.has_receiver)
                writer.writeMessage(3, this.receiver, () => this.receiver.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MessageWithInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MessageWithInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.msg, () => message.msg = dependency_5.api.common.Message.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.sender, () => message.sender = MessageSenderInfo.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.receiver, () => message.receiver = MessageSenderInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MessageWithInfo {
            return MessageWithInfo.deserialize(bytes);
        }
    }
    export class MessageSyncManagerTotalResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            total?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("total" in data && data.total != undefined) {
                    this.total = data.total;
                }
            }
        }
        get total() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set total(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            total?: number;
        }): MessageSyncManagerTotalResponse {
            const message = new MessageSyncManagerTotalResponse({});
            if (data.total != null) {
                message.total = data.total;
            }
            return message;
        }
        toObject() {
            const data: {
                total?: number;
            } = {};
            if (this.total != null) {
                data.total = this.total;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.total != 0)
                writer.writeInt32(5, this.total);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MessageSyncManagerTotalResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MessageSyncManagerTotalResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 5:
                        message.total = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MessageSyncManagerTotalResponse {
            return MessageSyncManagerTotalResponse.deserialize(bytes);
        }
    }
    export class MessageSenderInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            uid?: number;
            role?: number;
            consult_id?: number;
            consult_name?: string;
            ip?: string;
            account?: string;
            name?: string;
            user_name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("uid" in data && data.uid != undefined) {
                    this.uid = data.uid;
                }
                if ("role" in data && data.role != undefined) {
                    this.role = data.role;
                }
                if ("consult_id" in data && data.consult_id != undefined) {
                    this.consult_id = data.consult_id;
                }
                if ("consult_name" in data && data.consult_name != undefined) {
                    this.consult_name = data.consult_name;
                }
                if ("ip" in data && data.ip != undefined) {
                    this.ip = data.ip;
                }
                if ("account" in data && data.account != undefined) {
                    this.account = data.account;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("user_name" in data && data.user_name != undefined) {
                    this.user_name = data.user_name;
                }
            }
        }
        get uid() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set uid(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get role() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set role(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get consult_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set consult_id(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get consult_name() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set consult_name(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get ip() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set ip(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get account() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set account(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get user_name() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set user_name(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        static fromObject(data: {
            uid?: number;
            role?: number;
            consult_id?: number;
            consult_name?: string;
            ip?: string;
            account?: string;
            name?: string;
            user_name?: string;
        }): MessageSenderInfo {
            const message = new MessageSenderInfo({});
            if (data.uid != null) {
                message.uid = data.uid;
            }
            if (data.role != null) {
                message.role = data.role;
            }
            if (data.consult_id != null) {
                message.consult_id = data.consult_id;
            }
            if (data.consult_name != null) {
                message.consult_name = data.consult_name;
            }
            if (data.ip != null) {
                message.ip = data.ip;
            }
            if (data.account != null) {
                message.account = data.account;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.user_name != null) {
                message.user_name = data.user_name;
            }
            return message;
        }
        toObject() {
            const data: {
                uid?: number;
                role?: number;
                consult_id?: number;
                consult_name?: string;
                ip?: string;
                account?: string;
                name?: string;
                user_name?: string;
            } = {};
            if (this.uid != null) {
                data.uid = this.uid;
            }
            if (this.role != null) {
                data.role = this.role;
            }
            if (this.consult_id != null) {
                data.consult_id = this.consult_id;
            }
            if (this.consult_name != null) {
                data.consult_name = this.consult_name;
            }
            if (this.ip != null) {
                data.ip = this.ip;
            }
            if (this.account != null) {
                data.account = this.account;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.user_name != null) {
                data.user_name = this.user_name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.uid != 0)
                writer.writeInt32(1, this.uid);
            if (this.role != 0)
                writer.writeInt32(2, this.role);
            if (this.consult_id != 0)
                writer.writeInt32(4, this.consult_id);
            if (this.consult_name.length)
                writer.writeString(5, this.consult_name);
            if (this.ip.length)
                writer.writeString(6, this.ip);
            if (this.account.length)
                writer.writeString(7, this.account);
            if (this.name.length)
                writer.writeString(8, this.name);
            if (this.user_name.length)
                writer.writeString(9, this.user_name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MessageSenderInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MessageSenderInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.uid = reader.readInt32();
                        break;
                    case 2:
                        message.role = reader.readInt32();
                        break;
                    case 4:
                        message.consult_id = reader.readInt32();
                        break;
                    case 5:
                        message.consult_name = reader.readString();
                        break;
                    case 6:
                        message.ip = reader.readString();
                        break;
                    case 7:
                        message.account = reader.readString();
                        break;
                    case 8:
                        message.name = reader.readString();
                        break;
                    case 9:
                        message.user_name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MessageSenderInfo {
            return MessageSenderInfo.deserialize(bytes);
        }
    }
    export class MessageSyncManagerSessionPageRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            chat_id?: number;
            user_id?: number;
            worker_id?: number;
            start_at?: number;
            end_at?: number;
            page?: dependency_9.api.common.Page;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("chat_id" in data && data.chat_id != undefined) {
                    this.chat_id = data.chat_id;
                }
                if ("user_id" in data && data.user_id != undefined) {
                    this.user_id = data.user_id;
                }
                if ("worker_id" in data && data.worker_id != undefined) {
                    this.worker_id = data.worker_id;
                }
                if ("start_at" in data && data.start_at != undefined) {
                    this.start_at = data.start_at;
                }
                if ("end_at" in data && data.end_at != undefined) {
                    this.end_at = data.end_at;
                }
                if ("page" in data && data.page != undefined) {
                    this.page = data.page;
                }
            }
        }
        get chat_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set chat_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get user_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set user_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get worker_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set worker_id(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get start_at() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set start_at(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get end_at() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set end_at(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get page() {
            return pb_1.Message.getWrapperField(this, dependency_9.api.common.Page, 7) as dependency_9.api.common.Page;
        }
        set page(value: dependency_9.api.common.Page) {
            pb_1.Message.setWrapperField(this, 7, value);
        }
        get has_page() {
            return pb_1.Message.getField(this, 7) != null;
        }
        static fromObject(data: {
            chat_id?: number;
            user_id?: number;
            worker_id?: number;
            start_at?: number;
            end_at?: number;
            page?: ReturnType<typeof dependency_9.api.common.Page.prototype.toObject>;
        }): MessageSyncManagerSessionPageRequest {
            const message = new MessageSyncManagerSessionPageRequest({});
            if (data.chat_id != null) {
                message.chat_id = data.chat_id;
            }
            if (data.user_id != null) {
                message.user_id = data.user_id;
            }
            if (data.worker_id != null) {
                message.worker_id = data.worker_id;
            }
            if (data.start_at != null) {
                message.start_at = data.start_at;
            }
            if (data.end_at != null) {
                message.end_at = data.end_at;
            }
            if (data.page != null) {
                message.page = dependency_9.api.common.Page.fromObject(data.page);
            }
            return message;
        }
        toObject() {
            const data: {
                chat_id?: number;
                user_id?: number;
                worker_id?: number;
                start_at?: number;
                end_at?: number;
                page?: ReturnType<typeof dependency_9.api.common.Page.prototype.toObject>;
            } = {};
            if (this.chat_id != null) {
                data.chat_id = this.chat_id;
            }
            if (this.user_id != null) {
                data.user_id = this.user_id;
            }
            if (this.worker_id != null) {
                data.worker_id = this.worker_id;
            }
            if (this.start_at != null) {
                data.start_at = this.start_at;
            }
            if (this.end_at != null) {
                data.end_at = this.end_at;
            }
            if (this.page != null) {
                data.page = this.page.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.chat_id != 0)
                writer.writeInt64(1, this.chat_id);
            if (this.user_id != 0)
                writer.writeInt32(2, this.user_id);
            if (this.worker_id != 0)
                writer.writeInt32(3, this.worker_id);
            if (this.start_at != 0)
                writer.writeInt64(5, this.start_at);
            if (this.end_at != 0)
                writer.writeInt64(6, this.end_at);
            if (this.has_page)
                writer.writeMessage(7, this.page, () => this.page.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MessageSyncManagerSessionPageRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MessageSyncManagerSessionPageRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.chat_id = reader.readInt64();
                        break;
                    case 2:
                        message.user_id = reader.readInt32();
                        break;
                    case 3:
                        message.worker_id = reader.readInt32();
                        break;
                    case 5:
                        message.start_at = reader.readInt64();
                        break;
                    case 6:
                        message.end_at = reader.readInt64();
                        break;
                    case 7:
                        reader.readMessage(message.page, () => message.page = dependency_9.api.common.Page.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MessageSyncManagerSessionPageRequest {
            return MessageSyncManagerSessionPageRequest.deserialize(bytes);
        }
    }
    export class MessageSyncManagerSessionPageResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            page?: dependency_9.api.common.Page;
            total?: number;
            list?: MessageSyncManagerSession[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("page" in data && data.page != undefined) {
                    this.page = data.page;
                }
                if ("total" in data && data.total != undefined) {
                    this.total = data.total;
                }
                if ("list" in data && data.list != undefined) {
                    this.list = data.list;
                }
            }
        }
        get page() {
            return pb_1.Message.getWrapperField(this, dependency_9.api.common.Page, 1) as dependency_9.api.common.Page;
        }
        set page(value: dependency_9.api.common.Page) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_page() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get total() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set total(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get list() {
            return pb_1.Message.getRepeatedWrapperField(this, MessageSyncManagerSession, 2) as MessageSyncManagerSession[];
        }
        set list(value: MessageSyncManagerSession[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            page?: ReturnType<typeof dependency_9.api.common.Page.prototype.toObject>;
            total?: number;
            list?: ReturnType<typeof MessageSyncManagerSession.prototype.toObject>[];
        }): MessageSyncManagerSessionPageResponse {
            const message = new MessageSyncManagerSessionPageResponse({});
            if (data.page != null) {
                message.page = dependency_9.api.common.Page.fromObject(data.page);
            }
            if (data.total != null) {
                message.total = data.total;
            }
            if (data.list != null) {
                message.list = data.list.map(item => MessageSyncManagerSession.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                page?: ReturnType<typeof dependency_9.api.common.Page.prototype.toObject>;
                total?: number;
                list?: ReturnType<typeof MessageSyncManagerSession.prototype.toObject>[];
            } = {};
            if (this.page != null) {
                data.page = this.page.toObject();
            }
            if (this.total != null) {
                data.total = this.total;
            }
            if (this.list != null) {
                data.list = this.list.map((item: MessageSyncManagerSession) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_page)
                writer.writeMessage(1, this.page, () => this.page.serialize(writer));
            if (this.total != 0)
                writer.writeInt32(5, this.total);
            if (this.list.length)
                writer.writeRepeatedMessage(2, this.list, (item: MessageSyncManagerSession) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MessageSyncManagerSessionPageResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MessageSyncManagerSessionPageResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.page, () => message.page = dependency_9.api.common.Page.deserialize(reader));
                        break;
                    case 5:
                        message.total = reader.readInt32();
                        break;
                    case 2:
                        reader.readMessage(message.list, () => pb_1.Message.addToRepeatedWrapperField(message, 2, MessageSyncManagerSession.deserialize(reader), MessageSyncManagerSession));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MessageSyncManagerSessionPageResponse {
            return MessageSyncManagerSessionPageResponse.deserialize(bytes);
        }
    }
    export class MessageSyncManagerSession extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            user_id?: number;
            user_name?: string;
            worker_id?: number;
            worker_name?: string;
            consult_id?: number;
            consult_name?: string;
            assign_time?: dependency_4.google.protobuf.Timestamp;
            chat_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("user_id" in data && data.user_id != undefined) {
                    this.user_id = data.user_id;
                }
                if ("user_name" in data && data.user_name != undefined) {
                    this.user_name = data.user_name;
                }
                if ("worker_id" in data && data.worker_id != undefined) {
                    this.worker_id = data.worker_id;
                }
                if ("worker_name" in data && data.worker_name != undefined) {
                    this.worker_name = data.worker_name;
                }
                if ("consult_id" in data && data.consult_id != undefined) {
                    this.consult_id = data.consult_id;
                }
                if ("consult_name" in data && data.consult_name != undefined) {
                    this.consult_name = data.consult_name;
                }
                if ("assign_time" in data && data.assign_time != undefined) {
                    this.assign_time = data.assign_time;
                }
                if ("chat_id" in data && data.chat_id != undefined) {
                    this.chat_id = data.chat_id;
                }
            }
        }
        get user_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set user_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get user_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set user_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get worker_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set worker_id(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get worker_name() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set worker_name(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get consult_id() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set consult_id(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get consult_name() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set consult_name(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get assign_time() {
            return pb_1.Message.getWrapperField(this, dependency_4.google.protobuf.Timestamp, 7) as dependency_4.google.protobuf.Timestamp;
        }
        set assign_time(value: dependency_4.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 7, value);
        }
        get has_assign_time() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get chat_id() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set chat_id(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        static fromObject(data: {
            user_id?: number;
            user_name?: string;
            worker_id?: number;
            worker_name?: string;
            consult_id?: number;
            consult_name?: string;
            assign_time?: ReturnType<typeof dependency_4.google.protobuf.Timestamp.prototype.toObject>;
            chat_id?: number;
        }): MessageSyncManagerSession {
            const message = new MessageSyncManagerSession({});
            if (data.user_id != null) {
                message.user_id = data.user_id;
            }
            if (data.user_name != null) {
                message.user_name = data.user_name;
            }
            if (data.worker_id != null) {
                message.worker_id = data.worker_id;
            }
            if (data.worker_name != null) {
                message.worker_name = data.worker_name;
            }
            if (data.consult_id != null) {
                message.consult_id = data.consult_id;
            }
            if (data.consult_name != null) {
                message.consult_name = data.consult_name;
            }
            if (data.assign_time != null) {
                message.assign_time = dependency_4.google.protobuf.Timestamp.fromObject(data.assign_time);
            }
            if (data.chat_id != null) {
                message.chat_id = data.chat_id;
            }
            return message;
        }
        toObject() {
            const data: {
                user_id?: number;
                user_name?: string;
                worker_id?: number;
                worker_name?: string;
                consult_id?: number;
                consult_name?: string;
                assign_time?: ReturnType<typeof dependency_4.google.protobuf.Timestamp.prototype.toObject>;
                chat_id?: number;
            } = {};
            if (this.user_id != null) {
                data.user_id = this.user_id;
            }
            if (this.user_name != null) {
                data.user_name = this.user_name;
            }
            if (this.worker_id != null) {
                data.worker_id = this.worker_id;
            }
            if (this.worker_name != null) {
                data.worker_name = this.worker_name;
            }
            if (this.consult_id != null) {
                data.consult_id = this.consult_id;
            }
            if (this.consult_name != null) {
                data.consult_name = this.consult_name;
            }
            if (this.assign_time != null) {
                data.assign_time = this.assign_time.toObject();
            }
            if (this.chat_id != null) {
                data.chat_id = this.chat_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.user_id != 0)
                writer.writeInt32(1, this.user_id);
            if (this.user_name.length)
                writer.writeString(2, this.user_name);
            if (this.worker_id != 0)
                writer.writeInt32(3, this.worker_id);
            if (this.worker_name.length)
                writer.writeString(4, this.worker_name);
            if (this.consult_id != 0)
                writer.writeInt32(5, this.consult_id);
            if (this.consult_name.length)
                writer.writeString(6, this.consult_name);
            if (this.has_assign_time)
                writer.writeMessage(7, this.assign_time, () => this.assign_time.serialize(writer));
            if (this.chat_id != 0)
                writer.writeInt64(8, this.chat_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MessageSyncManagerSession {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MessageSyncManagerSession();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.user_id = reader.readInt32();
                        break;
                    case 2:
                        message.user_name = reader.readString();
                        break;
                    case 3:
                        message.worker_id = reader.readInt32();
                        break;
                    case 4:
                        message.worker_name = reader.readString();
                        break;
                    case 5:
                        message.consult_id = reader.readInt32();
                        break;
                    case 6:
                        message.consult_name = reader.readString();
                        break;
                    case 7:
                        reader.readMessage(message.assign_time, () => message.assign_time = dependency_4.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 8:
                        message.chat_id = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MessageSyncManagerSession {
            return MessageSyncManagerSession.deserialize(bytes);
        }
    }
    export class ManagerSessionCustomerQueryRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            batch?: dependency_9.api.common.Batch;
            keyword?: string;
            type?: CustomerKeywordType;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("batch" in data && data.batch != undefined) {
                    this.batch = data.batch;
                }
                if ("keyword" in data && data.keyword != undefined) {
                    this.keyword = data.keyword;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
            }
        }
        get batch() {
            return pb_1.Message.getWrapperField(this, dependency_9.api.common.Batch, 1) as dependency_9.api.common.Batch;
        }
        set batch(value: dependency_9.api.common.Batch) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_batch() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get keyword() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set keyword(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 3, CustomerKeywordType.CKT_All) as CustomerKeywordType;
        }
        set type(value: CustomerKeywordType) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            batch?: ReturnType<typeof dependency_9.api.common.Batch.prototype.toObject>;
            keyword?: string;
            type?: CustomerKeywordType;
        }): ManagerSessionCustomerQueryRequest {
            const message = new ManagerSessionCustomerQueryRequest({});
            if (data.batch != null) {
                message.batch = dependency_9.api.common.Batch.fromObject(data.batch);
            }
            if (data.keyword != null) {
                message.keyword = data.keyword;
            }
            if (data.type != null) {
                message.type = data.type;
            }
            return message;
        }
        toObject() {
            const data: {
                batch?: ReturnType<typeof dependency_9.api.common.Batch.prototype.toObject>;
                keyword?: string;
                type?: CustomerKeywordType;
            } = {};
            if (this.batch != null) {
                data.batch = this.batch.toObject();
            }
            if (this.keyword != null) {
                data.keyword = this.keyword;
            }
            if (this.type != null) {
                data.type = this.type;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_batch)
                writer.writeMessage(1, this.batch, () => this.batch.serialize(writer));
            if (this.keyword.length)
                writer.writeString(2, this.keyword);
            if (this.type != CustomerKeywordType.CKT_All)
                writer.writeEnum(3, this.type);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ManagerSessionCustomerQueryRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ManagerSessionCustomerQueryRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.batch, () => message.batch = dependency_9.api.common.Batch.deserialize(reader));
                        break;
                    case 2:
                        message.keyword = reader.readString();
                        break;
                    case 3:
                        message.type = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ManagerSessionCustomerQueryRequest {
            return ManagerSessionCustomerQueryRequest.deserialize(bytes);
        }
    }
    export class ManagerSessionCustomerQueryResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            items?: dependency_10.api.core.SessionCustomer[];
            batch?: dependency_9.api.common.Batch;
            total?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("items" in data && data.items != undefined) {
                    this.items = data.items;
                }
                if ("batch" in data && data.batch != undefined) {
                    this.batch = data.batch;
                }
                if ("total" in data && data.total != undefined) {
                    this.total = data.total;
                }
            }
        }
        get items() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_10.api.core.SessionCustomer, 1) as dependency_10.api.core.SessionCustomer[];
        }
        set items(value: dependency_10.api.core.SessionCustomer[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get batch() {
            return pb_1.Message.getWrapperField(this, dependency_9.api.common.Batch, 2) as dependency_9.api.common.Batch;
        }
        set batch(value: dependency_9.api.common.Batch) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_batch() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get total() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set total(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            items?: ReturnType<typeof dependency_10.api.core.SessionCustomer.prototype.toObject>[];
            batch?: ReturnType<typeof dependency_9.api.common.Batch.prototype.toObject>;
            total?: number;
        }): ManagerSessionCustomerQueryResponse {
            const message = new ManagerSessionCustomerQueryResponse({});
            if (data.items != null) {
                message.items = data.items.map(item => dependency_10.api.core.SessionCustomer.fromObject(item));
            }
            if (data.batch != null) {
                message.batch = dependency_9.api.common.Batch.fromObject(data.batch);
            }
            if (data.total != null) {
                message.total = data.total;
            }
            return message;
        }
        toObject() {
            const data: {
                items?: ReturnType<typeof dependency_10.api.core.SessionCustomer.prototype.toObject>[];
                batch?: ReturnType<typeof dependency_9.api.common.Batch.prototype.toObject>;
                total?: number;
            } = {};
            if (this.items != null) {
                data.items = this.items.map((item: dependency_10.api.core.SessionCustomer) => item.toObject());
            }
            if (this.batch != null) {
                data.batch = this.batch.toObject();
            }
            if (this.total != null) {
                data.total = this.total;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.items.length)
                writer.writeRepeatedMessage(1, this.items, (item: dependency_10.api.core.SessionCustomer) => item.serialize(writer));
            if (this.has_batch)
                writer.writeMessage(2, this.batch, () => this.batch.serialize(writer));
            if (this.total != 0)
                writer.writeInt32(3, this.total);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ManagerSessionCustomerQueryResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ManagerSessionCustomerQueryResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.items, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_10.api.core.SessionCustomer.deserialize(reader), dependency_10.api.core.SessionCustomer));
                        break;
                    case 2:
                        reader.readMessage(message.batch, () => message.batch = dependency_9.api.common.Batch.deserialize(reader));
                        break;
                    case 3:
                        message.total = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ManagerSessionCustomerQueryResponse {
            return ManagerSessionCustomerQueryResponse.deserialize(bytes);
        }
    }
    export class MessageConsultRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            chat_id?: number;
            user_id?: number;
            start_at?: number;
            end_at?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("chat_id" in data && data.chat_id != undefined) {
                    this.chat_id = data.chat_id;
                }
                if ("user_id" in data && data.user_id != undefined) {
                    this.user_id = data.user_id;
                }
                if ("start_at" in data && data.start_at != undefined) {
                    this.start_at = data.start_at;
                }
                if ("end_at" in data && data.end_at != undefined) {
                    this.end_at = data.end_at;
                }
            }
        }
        get chat_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set chat_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get user_id() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set user_id(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get start_at() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set start_at(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get end_at() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set end_at(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        static fromObject(data: {
            chat_id?: number;
            user_id?: number;
            start_at?: number;
            end_at?: number;
        }): MessageConsultRequest {
            const message = new MessageConsultRequest({});
            if (data.chat_id != null) {
                message.chat_id = data.chat_id;
            }
            if (data.user_id != null) {
                message.user_id = data.user_id;
            }
            if (data.start_at != null) {
                message.start_at = data.start_at;
            }
            if (data.end_at != null) {
                message.end_at = data.end_at;
            }
            return message;
        }
        toObject() {
            const data: {
                chat_id?: number;
                user_id?: number;
                start_at?: number;
                end_at?: number;
            } = {};
            if (this.chat_id != null) {
                data.chat_id = this.chat_id;
            }
            if (this.user_id != null) {
                data.user_id = this.user_id;
            }
            if (this.start_at != null) {
                data.start_at = this.start_at;
            }
            if (this.end_at != null) {
                data.end_at = this.end_at;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.chat_id != 0)
                writer.writeInt64(1, this.chat_id);
            if (this.user_id != 0)
                writer.writeInt32(7, this.user_id);
            if (this.start_at != 0)
                writer.writeInt64(8, this.start_at);
            if (this.end_at != 0)
                writer.writeInt64(9, this.end_at);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MessageConsultRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MessageConsultRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.chat_id = reader.readInt64();
                        break;
                    case 7:
                        message.user_id = reader.readInt32();
                        break;
                    case 8:
                        message.start_at = reader.readInt64();
                        break;
                    case 9:
                        message.end_at = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MessageConsultRequest {
            return MessageConsultRequest.deserialize(bytes);
        }
    }
    export class MessageConsultResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            list?: ConsultWithTotal[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("list" in data && data.list != undefined) {
                    this.list = data.list;
                }
            }
        }
        get list() {
            return pb_1.Message.getRepeatedWrapperField(this, ConsultWithTotal, 1) as ConsultWithTotal[];
        }
        set list(value: ConsultWithTotal[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            list?: ReturnType<typeof ConsultWithTotal.prototype.toObject>[];
        }): MessageConsultResponse {
            const message = new MessageConsultResponse({});
            if (data.list != null) {
                message.list = data.list.map(item => ConsultWithTotal.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                list?: ReturnType<typeof ConsultWithTotal.prototype.toObject>[];
            } = {};
            if (this.list != null) {
                data.list = this.list.map((item: ConsultWithTotal) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.list.length)
                writer.writeRepeatedMessage(1, this.list, (item: ConsultWithTotal) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MessageConsultResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MessageConsultResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.list, () => pb_1.Message.addToRepeatedWrapperField(message, 1, ConsultWithTotal.deserialize(reader), ConsultWithTotal));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MessageConsultResponse {
            return MessageConsultResponse.deserialize(bytes);
        }
    }
    export class ConsultWithTotal extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            consult?: dependency_8.api.common.Consult;
            total?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("consult" in data && data.consult != undefined) {
                    this.consult = data.consult;
                }
                if ("total" in data && data.total != undefined) {
                    this.total = data.total;
                }
            }
        }
        get consult() {
            return pb_1.Message.getWrapperField(this, dependency_8.api.common.Consult, 1) as dependency_8.api.common.Consult;
        }
        set consult(value: dependency_8.api.common.Consult) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_consult() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get total() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set total(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            consult?: ReturnType<typeof dependency_8.api.common.Consult.prototype.toObject>;
            total?: number;
        }): ConsultWithTotal {
            const message = new ConsultWithTotal({});
            if (data.consult != null) {
                message.consult = dependency_8.api.common.Consult.fromObject(data.consult);
            }
            if (data.total != null) {
                message.total = data.total;
            }
            return message;
        }
        toObject() {
            const data: {
                consult?: ReturnType<typeof dependency_8.api.common.Consult.prototype.toObject>;
                total?: number;
            } = {};
            if (this.consult != null) {
                data.consult = this.consult.toObject();
            }
            if (this.total != null) {
                data.total = this.total;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_consult)
                writer.writeMessage(1, this.consult, () => this.consult.serialize(writer));
            if (this.total != 0)
                writer.writeInt32(2, this.total);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ConsultWithTotal {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ConsultWithTotal();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.consult, () => message.consult = dependency_8.api.common.Consult.deserialize(reader));
                        break;
                    case 2:
                        message.total = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ConsultWithTotal {
            return ConsultWithTotal.deserialize(bytes);
        }
    }
    export class MessageSearchRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            content?: string;
            chat_id?: number;
            msg_id?: number;
            start?: dependency_4.google.protobuf.Timestamp;
            end?: dependency_4.google.protobuf.Timestamp;
            count?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("content" in data && data.content != undefined) {
                    this.content = data.content;
                }
                if ("chat_id" in data && data.chat_id != undefined) {
                    this.chat_id = data.chat_id;
                }
                if ("msg_id" in data && data.msg_id != undefined) {
                    this.msg_id = data.msg_id;
                }
                if ("start" in data && data.start != undefined) {
                    this.start = data.start;
                }
                if ("end" in data && data.end != undefined) {
                    this.end = data.end;
                }
                if ("count" in data && data.count != undefined) {
                    this.count = data.count;
                }
            }
        }
        get content() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set content(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get chat_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set chat_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get msg_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set msg_id(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get start() {
            return pb_1.Message.getWrapperField(this, dependency_4.google.protobuf.Timestamp, 4) as dependency_4.google.protobuf.Timestamp;
        }
        set start(value: dependency_4.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_start() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get end() {
            return pb_1.Message.getWrapperField(this, dependency_4.google.protobuf.Timestamp, 5) as dependency_4.google.protobuf.Timestamp;
        }
        set end(value: dependency_4.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_end() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get count() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set count(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            content?: string;
            chat_id?: number;
            msg_id?: number;
            start?: ReturnType<typeof dependency_4.google.protobuf.Timestamp.prototype.toObject>;
            end?: ReturnType<typeof dependency_4.google.protobuf.Timestamp.prototype.toObject>;
            count?: number;
        }): MessageSearchRequest {
            const message = new MessageSearchRequest({});
            if (data.content != null) {
                message.content = data.content;
            }
            if (data.chat_id != null) {
                message.chat_id = data.chat_id;
            }
            if (data.msg_id != null) {
                message.msg_id = data.msg_id;
            }
            if (data.start != null) {
                message.start = dependency_4.google.protobuf.Timestamp.fromObject(data.start);
            }
            if (data.end != null) {
                message.end = dependency_4.google.protobuf.Timestamp.fromObject(data.end);
            }
            if (data.count != null) {
                message.count = data.count;
            }
            return message;
        }
        toObject() {
            const data: {
                content?: string;
                chat_id?: number;
                msg_id?: number;
                start?: ReturnType<typeof dependency_4.google.protobuf.Timestamp.prototype.toObject>;
                end?: ReturnType<typeof dependency_4.google.protobuf.Timestamp.prototype.toObject>;
                count?: number;
            } = {};
            if (this.content != null) {
                data.content = this.content;
            }
            if (this.chat_id != null) {
                data.chat_id = this.chat_id;
            }
            if (this.msg_id != null) {
                data.msg_id = this.msg_id;
            }
            if (this.start != null) {
                data.start = this.start.toObject();
            }
            if (this.end != null) {
                data.end = this.end.toObject();
            }
            if (this.count != null) {
                data.count = this.count;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.content.length)
                writer.writeString(1, this.content);
            if (this.chat_id != 0)
                writer.writeInt64(2, this.chat_id);
            if (this.msg_id != 0)
                writer.writeInt64(3, this.msg_id);
            if (this.has_start)
                writer.writeMessage(4, this.start, () => this.start.serialize(writer));
            if (this.has_end)
                writer.writeMessage(5, this.end, () => this.end.serialize(writer));
            if (this.count != 0)
                writer.writeInt32(6, this.count);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MessageSearchRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MessageSearchRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.content = reader.readString();
                        break;
                    case 2:
                        message.chat_id = reader.readInt64();
                        break;
                    case 3:
                        message.msg_id = reader.readInt64();
                        break;
                    case 4:
                        reader.readMessage(message.start, () => message.start = dependency_4.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.end, () => message.end = dependency_4.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 6:
                        message.count = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MessageSearchRequest {
            return MessageSearchRequest.deserialize(bytes);
        }
    }
    export class MessageSearchResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            request?: MessageSearchRequest;
            list?: dependency_5.api.common.Message[];
            last_msg_id?: number;
            detail?: Map<number, dependency_6.api.common.ChatDetail>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("request" in data && data.request != undefined) {
                    this.request = data.request;
                }
                if ("list" in data && data.list != undefined) {
                    this.list = data.list;
                }
                if ("last_msg_id" in data && data.last_msg_id != undefined) {
                    this.last_msg_id = data.last_msg_id;
                }
                if ("detail" in data && data.detail != undefined) {
                    this.detail = data.detail;
                }
            }
            if (!this.detail)
                this.detail = new Map();
        }
        get request() {
            return pb_1.Message.getWrapperField(this, MessageSearchRequest, 1) as MessageSearchRequest;
        }
        set request(value: MessageSearchRequest) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_request() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get list() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_5.api.common.Message, 2) as dependency_5.api.common.Message[];
        }
        set list(value: dependency_5.api.common.Message[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get last_msg_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set last_msg_id(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get detail() {
            return pb_1.Message.getField(this, 4) as any as Map<number, dependency_6.api.common.ChatDetail>;
        }
        set detail(value: Map<number, dependency_6.api.common.ChatDetail>) {
            pb_1.Message.setField(this, 4, value as any);
        }
        static fromObject(data: {
            request?: ReturnType<typeof MessageSearchRequest.prototype.toObject>;
            list?: ReturnType<typeof dependency_5.api.common.Message.prototype.toObject>[];
            last_msg_id?: number;
            detail?: {
                [key: number]: ReturnType<typeof dependency_6.api.common.ChatDetail.prototype.toObject>;
            };
        }): MessageSearchResponse {
            const message = new MessageSearchResponse({});
            if (data.request != null) {
                message.request = MessageSearchRequest.fromObject(data.request);
            }
            if (data.list != null) {
                message.list = data.list.map(item => dependency_5.api.common.Message.fromObject(item));
            }
            if (data.last_msg_id != null) {
                message.last_msg_id = data.last_msg_id;
            }
            if (typeof data.detail == "object") {
                message.detail = new Map(Object.entries(data.detail).map(([key, value]) => [Number(key), dependency_6.api.common.ChatDetail.fromObject(value)]));
            }
            return message;
        }
        toObject() {
            const data: {
                request?: ReturnType<typeof MessageSearchRequest.prototype.toObject>;
                list?: ReturnType<typeof dependency_5.api.common.Message.prototype.toObject>[];
                last_msg_id?: number;
                detail?: {
                    [key: number]: ReturnType<typeof dependency_6.api.common.ChatDetail.prototype.toObject>;
                };
            } = {};
            if (this.request != null) {
                data.request = this.request.toObject();
            }
            if (this.list != null) {
                data.list = this.list.map((item: dependency_5.api.common.Message) => item.toObject());
            }
            if (this.last_msg_id != null) {
                data.last_msg_id = this.last_msg_id;
            }
            if (this.detail != null) {
                data.detail = (Object.fromEntries)((Array.from)(this.detail).map(([key, value]) => [key, value.toObject()]));
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_request)
                writer.writeMessage(1, this.request, () => this.request.serialize(writer));
            if (this.list.length)
                writer.writeRepeatedMessage(2, this.list, (item: dependency_5.api.common.Message) => item.serialize(writer));
            if (this.last_msg_id != 0)
                writer.writeInt64(3, this.last_msg_id);
            for (const [key, value] of this.detail) {
                writer.writeMessage(4, this.detail, () => {
                    writer.writeInt64(1, key);
                    writer.writeMessage(2, value, () => value.serialize(writer));
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MessageSearchResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MessageSearchResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.request, () => message.request = MessageSearchRequest.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.list, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_5.api.common.Message.deserialize(reader), dependency_5.api.common.Message));
                        break;
                    case 3:
                        message.last_msg_id = reader.readInt64();
                        break;
                    case 4:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.detail as any, reader, reader.readInt64, () => {
                            let value;
                            reader.readMessage(message, () => value = dependency_6.api.common.ChatDetail.deserialize(reader));
                            return value;
                        }));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MessageSearchResponse {
            return MessageSearchResponse.deserialize(bytes);
        }
    }
    export class QuerySpecMsgRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            chat_id?: number;
            msg_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("chat_id" in data && data.chat_id != undefined) {
                    this.chat_id = data.chat_id;
                }
                if ("msg_id" in data && data.msg_id != undefined) {
                    this.msg_id = data.msg_id;
                }
            }
        }
        get chat_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set chat_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get msg_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set msg_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            chat_id?: number;
            msg_id?: number;
        }): QuerySpecMsgRequest {
            const message = new QuerySpecMsgRequest({});
            if (data.chat_id != null) {
                message.chat_id = data.chat_id;
            }
            if (data.msg_id != null) {
                message.msg_id = data.msg_id;
            }
            return message;
        }
        toObject() {
            const data: {
                chat_id?: number;
                msg_id?: number;
            } = {};
            if (this.chat_id != null) {
                data.chat_id = this.chat_id;
            }
            if (this.msg_id != null) {
                data.msg_id = this.msg_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.chat_id != 0)
                writer.writeInt64(1, this.chat_id);
            if (this.msg_id != 0)
                writer.writeInt64(2, this.msg_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QuerySpecMsgRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QuerySpecMsgRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.chat_id = reader.readInt64();
                        break;
                    case 2:
                        message.msg_id = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QuerySpecMsgRequest {
            return QuerySpecMsgRequest.deserialize(bytes);
        }
    }
    export class QuerySpecMsgResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            msg?: dependency_5.api.common.Message;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("msg" in data && data.msg != undefined) {
                    this.msg = data.msg;
                }
            }
        }
        get msg() {
            return pb_1.Message.getWrapperField(this, dependency_5.api.common.Message, 1) as dependency_5.api.common.Message;
        }
        set msg(value: dependency_5.api.common.Message) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_msg() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            msg?: ReturnType<typeof dependency_5.api.common.Message.prototype.toObject>;
        }): QuerySpecMsgResponse {
            const message = new QuerySpecMsgResponse({});
            if (data.msg != null) {
                message.msg = dependency_5.api.common.Message.fromObject(data.msg);
            }
            return message;
        }
        toObject() {
            const data: {
                msg?: ReturnType<typeof dependency_5.api.common.Message.prototype.toObject>;
            } = {};
            if (this.msg != null) {
                data.msg = this.msg.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_msg)
                writer.writeMessage(1, this.msg, () => this.msg.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QuerySpecMsgResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QuerySpecMsgResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.msg, () => message.msg = dependency_5.api.common.Message.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QuerySpecMsgResponse {
            return QuerySpecMsgResponse.deserialize(bytes);
        }
    }
    export class QuerySyncRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            chat_id?: number;
            msg_id?: number;
            start?: number;
            end?: number;
            count?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("chat_id" in data && data.chat_id != undefined) {
                    this.chat_id = data.chat_id;
                }
                if ("msg_id" in data && data.msg_id != undefined) {
                    this.msg_id = data.msg_id;
                }
                if ("start" in data && data.start != undefined) {
                    this.start = data.start;
                }
                if ("end" in data && data.end != undefined) {
                    this.end = data.end;
                }
                if ("count" in data && data.count != undefined) {
                    this.count = data.count;
                }
            }
        }
        get chat_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set chat_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get msg_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set msg_id(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get start() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set start(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get end() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set end(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get count() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set count(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            chat_id?: number;
            msg_id?: number;
            start?: number;
            end?: number;
            count?: number;
        }): QuerySyncRequest {
            const message = new QuerySyncRequest({});
            if (data.chat_id != null) {
                message.chat_id = data.chat_id;
            }
            if (data.msg_id != null) {
                message.msg_id = data.msg_id;
            }
            if (data.start != null) {
                message.start = data.start;
            }
            if (data.end != null) {
                message.end = data.end;
            }
            if (data.count != null) {
                message.count = data.count;
            }
            return message;
        }
        toObject() {
            const data: {
                chat_id?: number;
                msg_id?: number;
                start?: number;
                end?: number;
                count?: number;
            } = {};
            if (this.chat_id != null) {
                data.chat_id = this.chat_id;
            }
            if (this.msg_id != null) {
                data.msg_id = this.msg_id;
            }
            if (this.start != null) {
                data.start = this.start;
            }
            if (this.end != null) {
                data.end = this.end;
            }
            if (this.count != null) {
                data.count = this.count;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.chat_id != 0)
                writer.writeInt64(2, this.chat_id);
            if (this.msg_id != 0)
                writer.writeInt64(3, this.msg_id);
            if (this.start != 0)
                writer.writeInt64(4, this.start);
            if (this.end != 0)
                writer.writeInt64(5, this.end);
            if (this.count != 0)
                writer.writeInt32(6, this.count);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QuerySyncRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QuerySyncRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 2:
                        message.chat_id = reader.readInt64();
                        break;
                    case 3:
                        message.msg_id = reader.readInt64();
                        break;
                    case 4:
                        message.start = reader.readInt64();
                        break;
                    case 5:
                        message.end = reader.readInt64();
                        break;
                    case 6:
                        message.count = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QuerySyncRequest {
            return QuerySyncRequest.deserialize(bytes);
        }
    }
    export class QuerySyncResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            request?: QuerySyncRequest;
            list?: dependency_5.api.common.Message[];
            last_msg_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("request" in data && data.request != undefined) {
                    this.request = data.request;
                }
                if ("list" in data && data.list != undefined) {
                    this.list = data.list;
                }
                if ("last_msg_id" in data && data.last_msg_id != undefined) {
                    this.last_msg_id = data.last_msg_id;
                }
            }
        }
        get request() {
            return pb_1.Message.getWrapperField(this, QuerySyncRequest, 1) as QuerySyncRequest;
        }
        set request(value: QuerySyncRequest) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_request() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get list() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_5.api.common.Message, 2) as dependency_5.api.common.Message[];
        }
        set list(value: dependency_5.api.common.Message[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get last_msg_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set last_msg_id(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            request?: ReturnType<typeof QuerySyncRequest.prototype.toObject>;
            list?: ReturnType<typeof dependency_5.api.common.Message.prototype.toObject>[];
            last_msg_id?: number;
        }): QuerySyncResponse {
            const message = new QuerySyncResponse({});
            if (data.request != null) {
                message.request = QuerySyncRequest.fromObject(data.request);
            }
            if (data.list != null) {
                message.list = data.list.map(item => dependency_5.api.common.Message.fromObject(item));
            }
            if (data.last_msg_id != null) {
                message.last_msg_id = data.last_msg_id;
            }
            return message;
        }
        toObject() {
            const data: {
                request?: ReturnType<typeof QuerySyncRequest.prototype.toObject>;
                list?: ReturnType<typeof dependency_5.api.common.Message.prototype.toObject>[];
                last_msg_id?: number;
            } = {};
            if (this.request != null) {
                data.request = this.request.toObject();
            }
            if (this.list != null) {
                data.list = this.list.map((item: dependency_5.api.common.Message) => item.toObject());
            }
            if (this.last_msg_id != null) {
                data.last_msg_id = this.last_msg_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_request)
                writer.writeMessage(1, this.request, () => this.request.serialize(writer));
            if (this.list.length)
                writer.writeRepeatedMessage(2, this.list, (item: dependency_5.api.common.Message) => item.serialize(writer));
            if (this.last_msg_id != 0)
                writer.writeInt64(3, this.last_msg_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QuerySyncResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QuerySyncResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.request, () => message.request = QuerySyncRequest.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.list, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_5.api.common.Message.deserialize(reader), dependency_5.api.common.Message));
                        break;
                    case 3:
                        message.last_msg_id = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QuerySyncResponse {
            return QuerySyncResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedMessageClientServiceService {
        static definition = {
            sync: {
                path: "/api.core.MessageClientService/sync",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: MessageSyncRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => MessageSyncRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: MessageSyncResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => MessageSyncResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract sync(call: grpc_1.ServerUnaryCall<MessageSyncRequest, MessageSyncResponse>, callback: grpc_1.sendUnaryData<MessageSyncResponse>): void;
    }
    export class MessageClientServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedMessageClientServiceService.definition, "MessageClientService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        sync: GrpcUnaryServiceInterface<MessageSyncRequest, MessageSyncResponse> = (message: MessageSyncRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<MessageSyncResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<MessageSyncResponse>, callback?: grpc_1.requestCallback<MessageSyncResponse>): grpc_1.ClientUnaryCall => {
            return super.sync(message, metadata, options, callback);
        };
    }
    export abstract class UnimplementedMessageTenantServiceService {
        static definition = {
            sync: {
                path: "/api.core.MessageTenantService/sync",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: MessageSyncRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => MessageSyncRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: MessageSyncResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => MessageSyncResponse.deserialize(new Uint8Array(bytes))
            },
            syncV2: {
                path: "/api.core.MessageTenantService/syncV2",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: MessageSyncV2Request) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => MessageSyncV2Request.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: MessageSyncV2Response) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => MessageSyncV2Response.deserialize(new Uint8Array(bytes))
            },
            search: {
                path: "/api.core.MessageTenantService/search",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: MessageSearchRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => MessageSearchRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: MessageSearchResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => MessageSearchResponse.deserialize(new Uint8Array(bytes))
            },
            QuerySpec: {
                path: "/api.core.MessageTenantService/QuerySpec",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QuerySpecMsgRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QuerySpecMsgRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QuerySpecMsgResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QuerySpecMsgResponse.deserialize(new Uint8Array(bytes))
            },
            QuerySync: {
                path: "/api.core.MessageTenantService/QuerySync",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QuerySyncRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QuerySyncRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QuerySyncResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QuerySyncResponse.deserialize(new Uint8Array(bytes))
            },
            syncManager: {
                path: "/api.core.MessageTenantService/syncManager",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: MessageSyncManagerRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => MessageSyncManagerRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: MessageSyncManagerResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => MessageSyncManagerResponse.deserialize(new Uint8Array(bytes))
            },
            consult: {
                path: "/api.core.MessageTenantService/consult",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: MessageConsultRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => MessageConsultRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: MessageConsultResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => MessageConsultResponse.deserialize(new Uint8Array(bytes))
            },
            QueryCustomer: {
                path: "/api.core.MessageTenantService/QueryCustomer",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ManagerSessionCustomerQueryRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ManagerSessionCustomerQueryRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ManagerSessionCustomerQueryResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ManagerSessionCustomerQueryResponse.deserialize(new Uint8Array(bytes))
            },
            syncManagerMessagePage: {
                path: "/api.core.MessageTenantService/syncManagerMessagePage",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: MessageSyncManagerPageRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => MessageSyncManagerPageRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: MessageSyncManagerPageResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => MessageSyncManagerPageResponse.deserialize(new Uint8Array(bytes))
            },
            syncManagerSessionPage: {
                path: "/api.core.MessageTenantService/syncManagerSessionPage",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: MessageSyncManagerSessionPageRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => MessageSyncManagerSessionPageRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: MessageSyncManagerSessionPageResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => MessageSyncManagerSessionPageResponse.deserialize(new Uint8Array(bytes))
            },
            syncManagerMessageExport: {
                path: "/api.core.MessageTenantService/syncManagerMessageExport",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: MessageSyncManagerPageRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => MessageSyncManagerPageRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_3.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_3.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            syncManagerMessageTotal: {
                path: "/api.core.MessageTenantService/syncManagerMessageTotal",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: MessageSyncManagerPageRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => MessageSyncManagerPageRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: MessageSyncManagerTotalResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => MessageSyncManagerTotalResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract sync(call: grpc_1.ServerUnaryCall<MessageSyncRequest, MessageSyncResponse>, callback: grpc_1.sendUnaryData<MessageSyncResponse>): void;
        abstract syncV2(call: grpc_1.ServerUnaryCall<MessageSyncV2Request, MessageSyncV2Response>, callback: grpc_1.sendUnaryData<MessageSyncV2Response>): void;
        abstract search(call: grpc_1.ServerUnaryCall<MessageSearchRequest, MessageSearchResponse>, callback: grpc_1.sendUnaryData<MessageSearchResponse>): void;
        abstract QuerySpec(call: grpc_1.ServerUnaryCall<QuerySpecMsgRequest, QuerySpecMsgResponse>, callback: grpc_1.sendUnaryData<QuerySpecMsgResponse>): void;
        abstract QuerySync(call: grpc_1.ServerUnaryCall<QuerySyncRequest, QuerySyncResponse>, callback: grpc_1.sendUnaryData<QuerySyncResponse>): void;
        abstract syncManager(call: grpc_1.ServerUnaryCall<MessageSyncManagerRequest, MessageSyncManagerResponse>, callback: grpc_1.sendUnaryData<MessageSyncManagerResponse>): void;
        abstract consult(call: grpc_1.ServerUnaryCall<MessageConsultRequest, MessageConsultResponse>, callback: grpc_1.sendUnaryData<MessageConsultResponse>): void;
        abstract QueryCustomer(call: grpc_1.ServerUnaryCall<ManagerSessionCustomerQueryRequest, ManagerSessionCustomerQueryResponse>, callback: grpc_1.sendUnaryData<ManagerSessionCustomerQueryResponse>): void;
        abstract syncManagerMessagePage(call: grpc_1.ServerUnaryCall<MessageSyncManagerPageRequest, MessageSyncManagerPageResponse>, callback: grpc_1.sendUnaryData<MessageSyncManagerPageResponse>): void;
        abstract syncManagerSessionPage(call: grpc_1.ServerUnaryCall<MessageSyncManagerSessionPageRequest, MessageSyncManagerSessionPageResponse>, callback: grpc_1.sendUnaryData<MessageSyncManagerSessionPageResponse>): void;
        abstract syncManagerMessageExport(call: grpc_1.ServerUnaryCall<MessageSyncManagerPageRequest, dependency_3.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_3.google.protobuf.Empty>): void;
        abstract syncManagerMessageTotal(call: grpc_1.ServerUnaryCall<MessageSyncManagerPageRequest, MessageSyncManagerTotalResponse>, callback: grpc_1.sendUnaryData<MessageSyncManagerTotalResponse>): void;
    }
    export class MessageTenantServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedMessageTenantServiceService.definition, "MessageTenantService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        sync: GrpcUnaryServiceInterface<MessageSyncRequest, MessageSyncResponse> = (message: MessageSyncRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<MessageSyncResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<MessageSyncResponse>, callback?: grpc_1.requestCallback<MessageSyncResponse>): grpc_1.ClientUnaryCall => {
            return super.sync(message, metadata, options, callback);
        };
        syncV2: GrpcUnaryServiceInterface<MessageSyncV2Request, MessageSyncV2Response> = (message: MessageSyncV2Request, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<MessageSyncV2Response>, options?: grpc_1.CallOptions | grpc_1.requestCallback<MessageSyncV2Response>, callback?: grpc_1.requestCallback<MessageSyncV2Response>): grpc_1.ClientUnaryCall => {
            return super.syncV2(message, metadata, options, callback);
        };
        search: GrpcUnaryServiceInterface<MessageSearchRequest, MessageSearchResponse> = (message: MessageSearchRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<MessageSearchResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<MessageSearchResponse>, callback?: grpc_1.requestCallback<MessageSearchResponse>): grpc_1.ClientUnaryCall => {
            return super.search(message, metadata, options, callback);
        };
        QuerySpec: GrpcUnaryServiceInterface<QuerySpecMsgRequest, QuerySpecMsgResponse> = (message: QuerySpecMsgRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QuerySpecMsgResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QuerySpecMsgResponse>, callback?: grpc_1.requestCallback<QuerySpecMsgResponse>): grpc_1.ClientUnaryCall => {
            return super.QuerySpec(message, metadata, options, callback);
        };
        QuerySync: GrpcUnaryServiceInterface<QuerySyncRequest, QuerySyncResponse> = (message: QuerySyncRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QuerySyncResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QuerySyncResponse>, callback?: grpc_1.requestCallback<QuerySyncResponse>): grpc_1.ClientUnaryCall => {
            return super.QuerySync(message, metadata, options, callback);
        };
        syncManager: GrpcUnaryServiceInterface<MessageSyncManagerRequest, MessageSyncManagerResponse> = (message: MessageSyncManagerRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<MessageSyncManagerResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<MessageSyncManagerResponse>, callback?: grpc_1.requestCallback<MessageSyncManagerResponse>): grpc_1.ClientUnaryCall => {
            return super.syncManager(message, metadata, options, callback);
        };
        consult: GrpcUnaryServiceInterface<MessageConsultRequest, MessageConsultResponse> = (message: MessageConsultRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<MessageConsultResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<MessageConsultResponse>, callback?: grpc_1.requestCallback<MessageConsultResponse>): grpc_1.ClientUnaryCall => {
            return super.consult(message, metadata, options, callback);
        };
        QueryCustomer: GrpcUnaryServiceInterface<ManagerSessionCustomerQueryRequest, ManagerSessionCustomerQueryResponse> = (message: ManagerSessionCustomerQueryRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ManagerSessionCustomerQueryResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ManagerSessionCustomerQueryResponse>, callback?: grpc_1.requestCallback<ManagerSessionCustomerQueryResponse>): grpc_1.ClientUnaryCall => {
            return super.QueryCustomer(message, metadata, options, callback);
        };
        syncManagerMessagePage: GrpcUnaryServiceInterface<MessageSyncManagerPageRequest, MessageSyncManagerPageResponse> = (message: MessageSyncManagerPageRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<MessageSyncManagerPageResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<MessageSyncManagerPageResponse>, callback?: grpc_1.requestCallback<MessageSyncManagerPageResponse>): grpc_1.ClientUnaryCall => {
            return super.syncManagerMessagePage(message, metadata, options, callback);
        };
        syncManagerSessionPage: GrpcUnaryServiceInterface<MessageSyncManagerSessionPageRequest, MessageSyncManagerSessionPageResponse> = (message: MessageSyncManagerSessionPageRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<MessageSyncManagerSessionPageResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<MessageSyncManagerSessionPageResponse>, callback?: grpc_1.requestCallback<MessageSyncManagerSessionPageResponse>): grpc_1.ClientUnaryCall => {
            return super.syncManagerSessionPage(message, metadata, options, callback);
        };
        syncManagerMessageExport: GrpcUnaryServiceInterface<MessageSyncManagerPageRequest, dependency_3.google.protobuf.Empty> = (message: MessageSyncManagerPageRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_3.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_3.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_3.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.syncManagerMessageExport(message, metadata, options, callback);
        };
        syncManagerMessageTotal: GrpcUnaryServiceInterface<MessageSyncManagerPageRequest, MessageSyncManagerTotalResponse> = (message: MessageSyncManagerPageRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<MessageSyncManagerTotalResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<MessageSyncManagerTotalResponse>, callback?: grpc_1.requestCallback<MessageSyncManagerTotalResponse>): grpc_1.ClientUnaryCall => {
            return super.syncManagerMessageTotal(message, metadata, options, callback);
        };
    }
}
