/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.26.1
 * source: api/core/chat.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../google/protobuf/empty";
import * as dependency_2 from "./../../google/protobuf/timestamp";
import * as dependency_3 from "./../../validate/validate";
import * as dependency_4 from "./../option";
import * as dependency_5 from "./../common/c_worker";
import * as dependency_6 from "./../common/c_message";
import * as dependency_7 from "./../common/c_chat";
import * as dependency_8 from "./front";
import * as dependency_9 from "./../common/c_base";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace api.core {
    export class Pagination extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            page?: number;
            pagesize?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("page" in data && data.page != undefined) {
                    this.page = data.page;
                }
                if ("pagesize" in data && data.pagesize != undefined) {
                    this.pagesize = data.pagesize;
                }
            }
        }
        get page() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set page(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get pagesize() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set pagesize(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            page?: number;
            pagesize?: number;
        }): Pagination {
            const message = new Pagination({});
            if (data.page != null) {
                message.page = data.page;
            }
            if (data.pagesize != null) {
                message.pagesize = data.pagesize;
            }
            return message;
        }
        toObject() {
            const data: {
                page?: number;
                pagesize?: number;
            } = {};
            if (this.page != null) {
                data.page = this.page;
            }
            if (this.pagesize != null) {
                data.pagesize = this.pagesize;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.page != 0)
                writer.writeInt32(1, this.page);
            if (this.pagesize != 0)
                writer.writeInt32(2, this.pagesize);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Pagination {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Pagination();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.page = reader.readInt32();
                        break;
                    case 2:
                        message.pagesize = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Pagination {
            return Pagination.deserialize(bytes);
        }
    }
    export class ChatListQueryRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            worker_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("worker_id" in data && data.worker_id != undefined) {
                    this.worker_id = data.worker_id;
                }
            }
        }
        get worker_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set worker_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            worker_id?: number;
        }): ChatListQueryRequest {
            const message = new ChatListQueryRequest({});
            if (data.worker_id != null) {
                message.worker_id = data.worker_id;
            }
            return message;
        }
        toObject() {
            const data: {
                worker_id?: number;
            } = {};
            if (this.worker_id != null) {
                data.worker_id = this.worker_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.worker_id != 0)
                writer.writeInt32(1, this.worker_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChatListQueryRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChatListQueryRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.worker_id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ChatListQueryRequest {
            return ChatListQueryRequest.deserialize(bytes);
        }
    }
    export class ChatListQueryPageRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            page?: Pagination;
            worker_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("page" in data && data.page != undefined) {
                    this.page = data.page;
                }
                if ("worker_id" in data && data.worker_id != undefined) {
                    this.worker_id = data.worker_id;
                }
            }
        }
        get page() {
            return pb_1.Message.getWrapperField(this, Pagination, 1) as Pagination;
        }
        set page(value: Pagination) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_page() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get worker_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set worker_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            page?: ReturnType<typeof Pagination.prototype.toObject>;
            worker_id?: number;
        }): ChatListQueryPageRequest {
            const message = new ChatListQueryPageRequest({});
            if (data.page != null) {
                message.page = Pagination.fromObject(data.page);
            }
            if (data.worker_id != null) {
                message.worker_id = data.worker_id;
            }
            return message;
        }
        toObject() {
            const data: {
                page?: ReturnType<typeof Pagination.prototype.toObject>;
                worker_id?: number;
            } = {};
            if (this.page != null) {
                data.page = this.page.toObject();
            }
            if (this.worker_id != null) {
                data.worker_id = this.worker_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_page)
                writer.writeMessage(1, this.page, () => this.page.serialize(writer));
            if (this.worker_id != 0)
                writer.writeInt32(2, this.worker_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChatListQueryPageRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChatListQueryPageRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.page, () => message.page = Pagination.deserialize(reader));
                        break;
                    case 2:
                        message.worker_id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ChatListQueryPageRequest {
            return ChatListQueryPageRequest.deserialize(bytes);
        }
    }
    export class HistoryClientSessionsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            worker_id?: number;
            start_time?: dependency_2.google.protobuf.Timestamp;
            end_time?: dependency_2.google.protobuf.Timestamp;
            consult_id?: number;
            owner_id?: number;
            nickname?: string;
            page_size?: number;
            last_created_at?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("worker_id" in data && data.worker_id != undefined) {
                    this.worker_id = data.worker_id;
                }
                if ("start_time" in data && data.start_time != undefined) {
                    this.start_time = data.start_time;
                }
                if ("end_time" in data && data.end_time != undefined) {
                    this.end_time = data.end_time;
                }
                if ("consult_id" in data && data.consult_id != undefined) {
                    this.consult_id = data.consult_id;
                }
                if ("owner_id" in data && data.owner_id != undefined) {
                    this.owner_id = data.owner_id;
                }
                if ("nickname" in data && data.nickname != undefined) {
                    this.nickname = data.nickname;
                }
                if ("page_size" in data && data.page_size != undefined) {
                    this.page_size = data.page_size;
                }
                if ("last_created_at" in data && data.last_created_at != undefined) {
                    this.last_created_at = data.last_created_at;
                }
            }
        }
        get worker_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set worker_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get start_time() {
            return pb_1.Message.getWrapperField(this, dependency_2.google.protobuf.Timestamp, 2) as dependency_2.google.protobuf.Timestamp;
        }
        set start_time(value: dependency_2.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_start_time() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get end_time() {
            return pb_1.Message.getWrapperField(this, dependency_2.google.protobuf.Timestamp, 3) as dependency_2.google.protobuf.Timestamp;
        }
        set end_time(value: dependency_2.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_end_time() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get consult_id() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set consult_id(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get owner_id() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set owner_id(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get nickname() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set nickname(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get page_size() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set page_size(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get last_created_at() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set last_created_at(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        static fromObject(data: {
            worker_id?: number;
            start_time?: ReturnType<typeof dependency_2.google.protobuf.Timestamp.prototype.toObject>;
            end_time?: ReturnType<typeof dependency_2.google.protobuf.Timestamp.prototype.toObject>;
            consult_id?: number;
            owner_id?: number;
            nickname?: string;
            page_size?: number;
            last_created_at?: number;
        }): HistoryClientSessionsRequest {
            const message = new HistoryClientSessionsRequest({});
            if (data.worker_id != null) {
                message.worker_id = data.worker_id;
            }
            if (data.start_time != null) {
                message.start_time = dependency_2.google.protobuf.Timestamp.fromObject(data.start_time);
            }
            if (data.end_time != null) {
                message.end_time = dependency_2.google.protobuf.Timestamp.fromObject(data.end_time);
            }
            if (data.consult_id != null) {
                message.consult_id = data.consult_id;
            }
            if (data.owner_id != null) {
                message.owner_id = data.owner_id;
            }
            if (data.nickname != null) {
                message.nickname = data.nickname;
            }
            if (data.page_size != null) {
                message.page_size = data.page_size;
            }
            if (data.last_created_at != null) {
                message.last_created_at = data.last_created_at;
            }
            return message;
        }
        toObject() {
            const data: {
                worker_id?: number;
                start_time?: ReturnType<typeof dependency_2.google.protobuf.Timestamp.prototype.toObject>;
                end_time?: ReturnType<typeof dependency_2.google.protobuf.Timestamp.prototype.toObject>;
                consult_id?: number;
                owner_id?: number;
                nickname?: string;
                page_size?: number;
                last_created_at?: number;
            } = {};
            if (this.worker_id != null) {
                data.worker_id = this.worker_id;
            }
            if (this.start_time != null) {
                data.start_time = this.start_time.toObject();
            }
            if (this.end_time != null) {
                data.end_time = this.end_time.toObject();
            }
            if (this.consult_id != null) {
                data.consult_id = this.consult_id;
            }
            if (this.owner_id != null) {
                data.owner_id = this.owner_id;
            }
            if (this.nickname != null) {
                data.nickname = this.nickname;
            }
            if (this.page_size != null) {
                data.page_size = this.page_size;
            }
            if (this.last_created_at != null) {
                data.last_created_at = this.last_created_at;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.worker_id != 0)
                writer.writeInt32(1, this.worker_id);
            if (this.has_start_time)
                writer.writeMessage(2, this.start_time, () => this.start_time.serialize(writer));
            if (this.has_end_time)
                writer.writeMessage(3, this.end_time, () => this.end_time.serialize(writer));
            if (this.consult_id != 0)
                writer.writeUint32(5, this.consult_id);
            if (this.owner_id != 0)
                writer.writeInt32(6, this.owner_id);
            if (this.nickname.length)
                writer.writeString(7, this.nickname);
            if (this.page_size != 0)
                writer.writeInt32(8, this.page_size);
            if (this.last_created_at != 0)
                writer.writeInt64(9, this.last_created_at);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): HistoryClientSessionsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new HistoryClientSessionsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.worker_id = reader.readInt32();
                        break;
                    case 2:
                        reader.readMessage(message.start_time, () => message.start_time = dependency_2.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.end_time, () => message.end_time = dependency_2.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 5:
                        message.consult_id = reader.readUint32();
                        break;
                    case 6:
                        message.owner_id = reader.readInt32();
                        break;
                    case 7:
                        message.nickname = reader.readString();
                        break;
                    case 8:
                        message.page_size = reader.readInt32();
                        break;
                    case 9:
                        message.last_created_at = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): HistoryClientSessionsRequest {
            return HistoryClientSessionsRequest.deserialize(bytes);
        }
    }
    export class HistoryClientSessionsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            chat_sessions?: dependency_7.api.common.ChatItem[];
            last_created_at?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("chat_sessions" in data && data.chat_sessions != undefined) {
                    this.chat_sessions = data.chat_sessions;
                }
                if ("last_created_at" in data && data.last_created_at != undefined) {
                    this.last_created_at = data.last_created_at;
                }
            }
        }
        get chat_sessions() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_7.api.common.ChatItem, 1) as dependency_7.api.common.ChatItem[];
        }
        set chat_sessions(value: dependency_7.api.common.ChatItem[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get last_created_at() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set last_created_at(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            chat_sessions?: ReturnType<typeof dependency_7.api.common.ChatItem.prototype.toObject>[];
            last_created_at?: number;
        }): HistoryClientSessionsResponse {
            const message = new HistoryClientSessionsResponse({});
            if (data.chat_sessions != null) {
                message.chat_sessions = data.chat_sessions.map(item => dependency_7.api.common.ChatItem.fromObject(item));
            }
            if (data.last_created_at != null) {
                message.last_created_at = data.last_created_at;
            }
            return message;
        }
        toObject() {
            const data: {
                chat_sessions?: ReturnType<typeof dependency_7.api.common.ChatItem.prototype.toObject>[];
                last_created_at?: number;
            } = {};
            if (this.chat_sessions != null) {
                data.chat_sessions = this.chat_sessions.map((item: dependency_7.api.common.ChatItem) => item.toObject());
            }
            if (this.last_created_at != null) {
                data.last_created_at = this.last_created_at;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.chat_sessions.length)
                writer.writeRepeatedMessage(1, this.chat_sessions, (item: dependency_7.api.common.ChatItem) => item.serialize(writer));
            if (this.last_created_at != 0)
                writer.writeInt64(2, this.last_created_at);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): HistoryClientSessionsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new HistoryClientSessionsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.chat_sessions, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_7.api.common.ChatItem.deserialize(reader), dependency_7.api.common.ChatItem));
                        break;
                    case 2:
                        message.last_created_at = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): HistoryClientSessionsResponse {
            return HistoryClientSessionsResponse.deserialize(bytes);
        }
    }
    export class IndexClientSessionsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            start_time?: dependency_2.google.protobuf.Timestamp;
            end_time?: dependency_2.google.protobuf.Timestamp;
            page?: number;
            pageSize?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("start_time" in data && data.start_time != undefined) {
                    this.start_time = data.start_time;
                }
                if ("end_time" in data && data.end_time != undefined) {
                    this.end_time = data.end_time;
                }
                if ("page" in data && data.page != undefined) {
                    this.page = data.page;
                }
                if ("pageSize" in data && data.pageSize != undefined) {
                    this.pageSize = data.pageSize;
                }
            }
        }
        get start_time() {
            return pb_1.Message.getWrapperField(this, dependency_2.google.protobuf.Timestamp, 1) as dependency_2.google.protobuf.Timestamp;
        }
        set start_time(value: dependency_2.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_start_time() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get end_time() {
            return pb_1.Message.getWrapperField(this, dependency_2.google.protobuf.Timestamp, 2) as dependency_2.google.protobuf.Timestamp;
        }
        set end_time(value: dependency_2.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_end_time() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get page() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set page(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get pageSize() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set pageSize(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            start_time?: ReturnType<typeof dependency_2.google.protobuf.Timestamp.prototype.toObject>;
            end_time?: ReturnType<typeof dependency_2.google.protobuf.Timestamp.prototype.toObject>;
            page?: number;
            pageSize?: number;
        }): IndexClientSessionsRequest {
            const message = new IndexClientSessionsRequest({});
            if (data.start_time != null) {
                message.start_time = dependency_2.google.protobuf.Timestamp.fromObject(data.start_time);
            }
            if (data.end_time != null) {
                message.end_time = dependency_2.google.protobuf.Timestamp.fromObject(data.end_time);
            }
            if (data.page != null) {
                message.page = data.page;
            }
            if (data.pageSize != null) {
                message.pageSize = data.pageSize;
            }
            return message;
        }
        toObject() {
            const data: {
                start_time?: ReturnType<typeof dependency_2.google.protobuf.Timestamp.prototype.toObject>;
                end_time?: ReturnType<typeof dependency_2.google.protobuf.Timestamp.prototype.toObject>;
                page?: number;
                pageSize?: number;
            } = {};
            if (this.start_time != null) {
                data.start_time = this.start_time.toObject();
            }
            if (this.end_time != null) {
                data.end_time = this.end_time.toObject();
            }
            if (this.page != null) {
                data.page = this.page;
            }
            if (this.pageSize != null) {
                data.pageSize = this.pageSize;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_start_time)
                writer.writeMessage(1, this.start_time, () => this.start_time.serialize(writer));
            if (this.has_end_time)
                writer.writeMessage(2, this.end_time, () => this.end_time.serialize(writer));
            if (this.page != 0)
                writer.writeUint32(3, this.page);
            if (this.pageSize != 0)
                writer.writeUint32(4, this.pageSize);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IndexClientSessionsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IndexClientSessionsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.start_time, () => message.start_time = dependency_2.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.end_time, () => message.end_time = dependency_2.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 3:
                        message.page = reader.readUint32();
                        break;
                    case 4:
                        message.pageSize = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): IndexClientSessionsRequest {
            return IndexClientSessionsRequest.deserialize(bytes);
        }
    }
    export class IndexClientSessionsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            chat_sessions?: dependency_7.api.common.ChatItem[];
            total?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("chat_sessions" in data && data.chat_sessions != undefined) {
                    this.chat_sessions = data.chat_sessions;
                }
                if ("total" in data && data.total != undefined) {
                    this.total = data.total;
                }
            }
        }
        get chat_sessions() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_7.api.common.ChatItem, 1) as dependency_7.api.common.ChatItem[];
        }
        set chat_sessions(value: dependency_7.api.common.ChatItem[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get total() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set total(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            chat_sessions?: ReturnType<typeof dependency_7.api.common.ChatItem.prototype.toObject>[];
            total?: number;
        }): IndexClientSessionsResponse {
            const message = new IndexClientSessionsResponse({});
            if (data.chat_sessions != null) {
                message.chat_sessions = data.chat_sessions.map(item => dependency_7.api.common.ChatItem.fromObject(item));
            }
            if (data.total != null) {
                message.total = data.total;
            }
            return message;
        }
        toObject() {
            const data: {
                chat_sessions?: ReturnType<typeof dependency_7.api.common.ChatItem.prototype.toObject>[];
                total?: number;
            } = {};
            if (this.chat_sessions != null) {
                data.chat_sessions = this.chat_sessions.map((item: dependency_7.api.common.ChatItem) => item.toObject());
            }
            if (this.total != null) {
                data.total = this.total;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.chat_sessions.length)
                writer.writeRepeatedMessage(1, this.chat_sessions, (item: dependency_7.api.common.ChatItem) => item.serialize(writer));
            if (this.total != 0)
                writer.writeInt64(2, this.total);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IndexClientSessionsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IndexClientSessionsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.chat_sessions, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_7.api.common.ChatItem.deserialize(reader), dependency_7.api.common.ChatItem));
                        break;
                    case 2:
                        message.total = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): IndexClientSessionsResponse {
            return IndexClientSessionsResponse.deserialize(bytes);
        }
    }
    export class ChatListQueryResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            chats?: dependency_7.api.common.ChatItem[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("chats" in data && data.chats != undefined) {
                    this.chats = data.chats;
                }
            }
        }
        get chats() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_7.api.common.ChatItem, 1) as dependency_7.api.common.ChatItem[];
        }
        set chats(value: dependency_7.api.common.ChatItem[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            chats?: ReturnType<typeof dependency_7.api.common.ChatItem.prototype.toObject>[];
        }): ChatListQueryResponse {
            const message = new ChatListQueryResponse({});
            if (data.chats != null) {
                message.chats = data.chats.map(item => dependency_7.api.common.ChatItem.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                chats?: ReturnType<typeof dependency_7.api.common.ChatItem.prototype.toObject>[];
            } = {};
            if (this.chats != null) {
                data.chats = this.chats.map((item: dependency_7.api.common.ChatItem) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.chats.length)
                writer.writeRepeatedMessage(1, this.chats, (item: dependency_7.api.common.ChatItem) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChatListQueryResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChatListQueryResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.chats, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_7.api.common.ChatItem.deserialize(reader), dependency_7.api.common.ChatItem));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ChatListQueryResponse {
            return ChatListQueryResponse.deserialize(bytes);
        }
    }
    export class ChatListQueryPageResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            total?: number;
            chats?: dependency_7.api.common.ChatItem[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("total" in data && data.total != undefined) {
                    this.total = data.total;
                }
                if ("chats" in data && data.chats != undefined) {
                    this.chats = data.chats;
                }
            }
        }
        get total() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set total(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get chats() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_7.api.common.ChatItem, 2) as dependency_7.api.common.ChatItem[];
        }
        set chats(value: dependency_7.api.common.ChatItem[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            total?: number;
            chats?: ReturnType<typeof dependency_7.api.common.ChatItem.prototype.toObject>[];
        }): ChatListQueryPageResponse {
            const message = new ChatListQueryPageResponse({});
            if (data.total != null) {
                message.total = data.total;
            }
            if (data.chats != null) {
                message.chats = data.chats.map(item => dependency_7.api.common.ChatItem.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                total?: number;
                chats?: ReturnType<typeof dependency_7.api.common.ChatItem.prototype.toObject>[];
            } = {};
            if (this.total != null) {
                data.total = this.total;
            }
            if (this.chats != null) {
                data.chats = this.chats.map((item: dependency_7.api.common.ChatItem) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.total != 0)
                writer.writeInt32(1, this.total);
            if (this.chats.length)
                writer.writeRepeatedMessage(2, this.chats, (item: dependency_7.api.common.ChatItem) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChatListQueryPageResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChatListQueryPageResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.total = reader.readInt32();
                        break;
                    case 2:
                        reader.readMessage(message.chats, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_7.api.common.ChatItem.deserialize(reader), dependency_7.api.common.ChatItem));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ChatListQueryPageResponse {
            return ChatListQueryPageResponse.deserialize(bytes);
        }
    }
    export class ChatMarkReadRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            chat_id?: number;
            consult_id?: number;
            msg_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("chat_id" in data && data.chat_id != undefined) {
                    this.chat_id = data.chat_id;
                }
                if ("consult_id" in data && data.consult_id != undefined) {
                    this.consult_id = data.consult_id;
                }
                if ("msg_id" in data && data.msg_id != undefined) {
                    this.msg_id = data.msg_id;
                }
            }
        }
        get chat_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set chat_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get consult_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set consult_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get msg_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set msg_id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            chat_id?: number;
            consult_id?: number;
            msg_id?: string;
        }): ChatMarkReadRequest {
            const message = new ChatMarkReadRequest({});
            if (data.chat_id != null) {
                message.chat_id = data.chat_id;
            }
            if (data.consult_id != null) {
                message.consult_id = data.consult_id;
            }
            if (data.msg_id != null) {
                message.msg_id = data.msg_id;
            }
            return message;
        }
        toObject() {
            const data: {
                chat_id?: number;
                consult_id?: number;
                msg_id?: string;
            } = {};
            if (this.chat_id != null) {
                data.chat_id = this.chat_id;
            }
            if (this.consult_id != null) {
                data.consult_id = this.consult_id;
            }
            if (this.msg_id != null) {
                data.msg_id = this.msg_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.chat_id != 0)
                writer.writeInt64(1, this.chat_id);
            if (this.consult_id != 0)
                writer.writeInt64(2, this.consult_id);
            if (this.msg_id.length)
                writer.writeString(3, this.msg_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChatMarkReadRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChatMarkReadRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.chat_id = reader.readInt64();
                        break;
                    case 2:
                        message.consult_id = reader.readInt64();
                        break;
                    case 3:
                        message.msg_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ChatMarkReadRequest {
            return ChatMarkReadRequest.deserialize(bytes);
        }
    }
    export class OrphanResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            worker_id?: number;
            nick?: string;
            avatar?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("worker_id" in data && data.worker_id != undefined) {
                    this.worker_id = data.worker_id;
                }
                if ("nick" in data && data.nick != undefined) {
                    this.nick = data.nick;
                }
                if ("avatar" in data && data.avatar != undefined) {
                    this.avatar = data.avatar;
                }
            }
        }
        get worker_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set worker_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get nick() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set nick(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get avatar() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set avatar(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            worker_id?: number;
            nick?: string;
            avatar?: string;
        }): OrphanResponse {
            const message = new OrphanResponse({});
            if (data.worker_id != null) {
                message.worker_id = data.worker_id;
            }
            if (data.nick != null) {
                message.nick = data.nick;
            }
            if (data.avatar != null) {
                message.avatar = data.avatar;
            }
            return message;
        }
        toObject() {
            const data: {
                worker_id?: number;
                nick?: string;
                avatar?: string;
            } = {};
            if (this.worker_id != null) {
                data.worker_id = this.worker_id;
            }
            if (this.nick != null) {
                data.nick = this.nick;
            }
            if (this.avatar != null) {
                data.avatar = this.avatar;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.worker_id != 0)
                writer.writeInt32(1, this.worker_id);
            if (this.nick.length)
                writer.writeString(2, this.nick);
            if (this.avatar.length)
                writer.writeString(3, this.avatar);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OrphanResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OrphanResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.worker_id = reader.readInt32();
                        break;
                    case 2:
                        message.nick = reader.readString();
                        break;
                    case 3:
                        message.avatar = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): OrphanResponse {
            return OrphanResponse.deserialize(bytes);
        }
    }
    export class MarkRepliedRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            chat_id?: number;
            consult_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("chat_id" in data && data.chat_id != undefined) {
                    this.chat_id = data.chat_id;
                }
                if ("consult_id" in data && data.consult_id != undefined) {
                    this.consult_id = data.consult_id;
                }
            }
        }
        get chat_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set chat_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get consult_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set consult_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            chat_id?: number;
            consult_id?: number;
        }): MarkRepliedRequest {
            const message = new MarkRepliedRequest({});
            if (data.chat_id != null) {
                message.chat_id = data.chat_id;
            }
            if (data.consult_id != null) {
                message.consult_id = data.consult_id;
            }
            return message;
        }
        toObject() {
            const data: {
                chat_id?: number;
                consult_id?: number;
            } = {};
            if (this.chat_id != null) {
                data.chat_id = this.chat_id;
            }
            if (this.consult_id != null) {
                data.consult_id = this.consult_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.chat_id != 0)
                writer.writeInt64(1, this.chat_id);
            if (this.consult_id != 0)
                writer.writeInt64(2, this.consult_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MarkRepliedRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MarkRepliedRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.chat_id = reader.readInt64();
                        break;
                    case 2:
                        message.consult_id = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MarkRepliedRequest {
            return MarkRepliedRequest.deserialize(bytes);
        }
    }
    export class ChatListQueryUserRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            user_id?: number;
            register_type?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("user_id" in data && data.user_id != undefined) {
                    this.user_id = data.user_id;
                }
                if ("register_type" in data && data.register_type != undefined) {
                    this.register_type = data.register_type;
                }
            }
        }
        get user_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set user_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get register_type() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set register_type(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            user_id?: number;
            register_type?: number;
        }): ChatListQueryUserRequest {
            const message = new ChatListQueryUserRequest({});
            if (data.user_id != null) {
                message.user_id = data.user_id;
            }
            if (data.register_type != null) {
                message.register_type = data.register_type;
            }
            return message;
        }
        toObject() {
            const data: {
                user_id?: number;
                register_type?: number;
            } = {};
            if (this.user_id != null) {
                data.user_id = this.user_id;
            }
            if (this.register_type != null) {
                data.register_type = this.register_type;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.user_id != 0)
                writer.writeInt32(1, this.user_id);
            if (this.register_type != 0)
                writer.writeInt32(2, this.register_type);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChatListQueryUserRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChatListQueryUserRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.user_id = reader.readInt32();
                        break;
                    case 2:
                        message.register_type = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ChatListQueryUserRequest {
            return ChatListQueryUserRequest.deserialize(bytes);
        }
    }
    export class OrphanReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            chat_id?: number;
            consult_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("chat_id" in data && data.chat_id != undefined) {
                    this.chat_id = data.chat_id;
                }
                if ("consult_id" in data && data.consult_id != undefined) {
                    this.consult_id = data.consult_id;
                }
            }
        }
        get chat_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set chat_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get consult_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set consult_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            chat_id?: number;
            consult_id?: number;
        }): OrphanReq {
            const message = new OrphanReq({});
            if (data.chat_id != null) {
                message.chat_id = data.chat_id;
            }
            if (data.consult_id != null) {
                message.consult_id = data.consult_id;
            }
            return message;
        }
        toObject() {
            const data: {
                chat_id?: number;
                consult_id?: number;
            } = {};
            if (this.chat_id != null) {
                data.chat_id = this.chat_id;
            }
            if (this.consult_id != null) {
                data.consult_id = this.consult_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.chat_id != 0)
                writer.writeInt64(1, this.chat_id);
            if (this.consult_id != 0)
                writer.writeInt64(2, this.consult_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OrphanReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OrphanReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.chat_id = reader.readInt64();
                        break;
                    case 2:
                        message.consult_id = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): OrphanReq {
            return OrphanReq.deserialize(bytes);
        }
    }
    export class GetChatSessionStateRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            tenant_id?: number;
            consult_id?: number;
            owner_id?: number;
            owner_role?: number;
            chat_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("tenant_id" in data && data.tenant_id != undefined) {
                    this.tenant_id = data.tenant_id;
                }
                if ("consult_id" in data && data.consult_id != undefined) {
                    this.consult_id = data.consult_id;
                }
                if ("owner_id" in data && data.owner_id != undefined) {
                    this.owner_id = data.owner_id;
                }
                if ("owner_role" in data && data.owner_role != undefined) {
                    this.owner_role = data.owner_role;
                }
                if ("chat_id" in data && data.chat_id != undefined) {
                    this.chat_id = data.chat_id;
                }
            }
        }
        get tenant_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set tenant_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get consult_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set consult_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get owner_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set owner_id(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get owner_role() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set owner_role(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get chat_id() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set chat_id(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            tenant_id?: number;
            consult_id?: number;
            owner_id?: number;
            owner_role?: number;
            chat_id?: number;
        }): GetChatSessionStateRequest {
            const message = new GetChatSessionStateRequest({});
            if (data.tenant_id != null) {
                message.tenant_id = data.tenant_id;
            }
            if (data.consult_id != null) {
                message.consult_id = data.consult_id;
            }
            if (data.owner_id != null) {
                message.owner_id = data.owner_id;
            }
            if (data.owner_role != null) {
                message.owner_role = data.owner_role;
            }
            if (data.chat_id != null) {
                message.chat_id = data.chat_id;
            }
            return message;
        }
        toObject() {
            const data: {
                tenant_id?: number;
                consult_id?: number;
                owner_id?: number;
                owner_role?: number;
                chat_id?: number;
            } = {};
            if (this.tenant_id != null) {
                data.tenant_id = this.tenant_id;
            }
            if (this.consult_id != null) {
                data.consult_id = this.consult_id;
            }
            if (this.owner_id != null) {
                data.owner_id = this.owner_id;
            }
            if (this.owner_role != null) {
                data.owner_role = this.owner_role;
            }
            if (this.chat_id != null) {
                data.chat_id = this.chat_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.tenant_id != 0)
                writer.writeInt32(1, this.tenant_id);
            if (this.consult_id != 0)
                writer.writeInt64(2, this.consult_id);
            if (this.owner_id != 0)
                writer.writeInt32(3, this.owner_id);
            if (this.owner_role != 0)
                writer.writeInt32(4, this.owner_role);
            if (this.chat_id != 0)
                writer.writeInt64(5, this.chat_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetChatSessionStateRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetChatSessionStateRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.tenant_id = reader.readInt32();
                        break;
                    case 2:
                        message.consult_id = reader.readInt64();
                        break;
                    case 3:
                        message.owner_id = reader.readInt32();
                        break;
                    case 4:
                        message.owner_role = reader.readInt32();
                        break;
                    case 5:
                        message.chat_id = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetChatSessionStateRequest {
            return GetChatSessionStateRequest.deserialize(bytes);
        }
    }
    export class GetChatSessionStateResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            tenant_id?: number;
            consult_id?: number;
            owner_id?: number;
            owner_role?: number;
            assign_time?: number;
            session_start_time?: number;
            client_message_time?: number;
            client_first_time?: number;
            worker_id?: number;
            worker_ping_time?: number;
            worker_first_time?: number;
            worker_message_time?: number;
            worker_consult_id?: number;
            in_time?: number;
            out_time?: number;
            last_time?: number;
            timeout?: number;
            wait_response?: number;
            is_process?: number;
            is_receive?: number;
            is_in?: number;
            is_out?: number;
            visible?: number;
            state?: dependency_6.api.common.ChatState;
            worker_state?: dependency_5.api.common.WorkerState;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("tenant_id" in data && data.tenant_id != undefined) {
                    this.tenant_id = data.tenant_id;
                }
                if ("consult_id" in data && data.consult_id != undefined) {
                    this.consult_id = data.consult_id;
                }
                if ("owner_id" in data && data.owner_id != undefined) {
                    this.owner_id = data.owner_id;
                }
                if ("owner_role" in data && data.owner_role != undefined) {
                    this.owner_role = data.owner_role;
                }
                if ("assign_time" in data && data.assign_time != undefined) {
                    this.assign_time = data.assign_time;
                }
                if ("session_start_time" in data && data.session_start_time != undefined) {
                    this.session_start_time = data.session_start_time;
                }
                if ("client_message_time" in data && data.client_message_time != undefined) {
                    this.client_message_time = data.client_message_time;
                }
                if ("client_first_time" in data && data.client_first_time != undefined) {
                    this.client_first_time = data.client_first_time;
                }
                if ("worker_id" in data && data.worker_id != undefined) {
                    this.worker_id = data.worker_id;
                }
                if ("worker_ping_time" in data && data.worker_ping_time != undefined) {
                    this.worker_ping_time = data.worker_ping_time;
                }
                if ("worker_first_time" in data && data.worker_first_time != undefined) {
                    this.worker_first_time = data.worker_first_time;
                }
                if ("worker_message_time" in data && data.worker_message_time != undefined) {
                    this.worker_message_time = data.worker_message_time;
                }
                if ("worker_consult_id" in data && data.worker_consult_id != undefined) {
                    this.worker_consult_id = data.worker_consult_id;
                }
                if ("in_time" in data && data.in_time != undefined) {
                    this.in_time = data.in_time;
                }
                if ("out_time" in data && data.out_time != undefined) {
                    this.out_time = data.out_time;
                }
                if ("last_time" in data && data.last_time != undefined) {
                    this.last_time = data.last_time;
                }
                if ("timeout" in data && data.timeout != undefined) {
                    this.timeout = data.timeout;
                }
                if ("wait_response" in data && data.wait_response != undefined) {
                    this.wait_response = data.wait_response;
                }
                if ("is_process" in data && data.is_process != undefined) {
                    this.is_process = data.is_process;
                }
                if ("is_receive" in data && data.is_receive != undefined) {
                    this.is_receive = data.is_receive;
                }
                if ("is_in" in data && data.is_in != undefined) {
                    this.is_in = data.is_in;
                }
                if ("is_out" in data && data.is_out != undefined) {
                    this.is_out = data.is_out;
                }
                if ("visible" in data && data.visible != undefined) {
                    this.visible = data.visible;
                }
                if ("state" in data && data.state != undefined) {
                    this.state = data.state;
                }
                if ("worker_state" in data && data.worker_state != undefined) {
                    this.worker_state = data.worker_state;
                }
            }
        }
        get tenant_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set tenant_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get consult_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set consult_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get owner_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set owner_id(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get owner_role() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set owner_role(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get assign_time() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set assign_time(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get session_start_time() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set session_start_time(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get client_message_time() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set client_message_time(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get client_first_time() {
            return pb_1.Message.getFieldWithDefault(this, 31, 0) as number;
        }
        set client_first_time(value: number) {
            pb_1.Message.setField(this, 31, value);
        }
        get worker_id() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set worker_id(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get worker_ping_time() {
            return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
        }
        set worker_ping_time(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        get worker_first_time() {
            return pb_1.Message.getFieldWithDefault(this, 32, 0) as number;
        }
        set worker_first_time(value: number) {
            pb_1.Message.setField(this, 32, value);
        }
        get worker_message_time() {
            return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
        }
        set worker_message_time(value: number) {
            pb_1.Message.setField(this, 11, value);
        }
        get worker_consult_id() {
            return pb_1.Message.getFieldWithDefault(this, 13, 0) as number;
        }
        set worker_consult_id(value: number) {
            pb_1.Message.setField(this, 13, value);
        }
        get in_time() {
            return pb_1.Message.getFieldWithDefault(this, 14, 0) as number;
        }
        set in_time(value: number) {
            pb_1.Message.setField(this, 14, value);
        }
        get out_time() {
            return pb_1.Message.getFieldWithDefault(this, 15, 0) as number;
        }
        set out_time(value: number) {
            pb_1.Message.setField(this, 15, value);
        }
        get last_time() {
            return pb_1.Message.getFieldWithDefault(this, 35, 0) as number;
        }
        set last_time(value: number) {
            pb_1.Message.setField(this, 35, value);
        }
        get timeout() {
            return pb_1.Message.getFieldWithDefault(this, 16, 0) as number;
        }
        set timeout(value: number) {
            pb_1.Message.setField(this, 16, value);
        }
        get wait_response() {
            return pb_1.Message.getFieldWithDefault(this, 56, 0) as number;
        }
        set wait_response(value: number) {
            pb_1.Message.setField(this, 56, value);
        }
        get is_process() {
            return pb_1.Message.getFieldWithDefault(this, 57, 0) as number;
        }
        set is_process(value: number) {
            pb_1.Message.setField(this, 57, value);
        }
        get is_receive() {
            return pb_1.Message.getFieldWithDefault(this, 58, 0) as number;
        }
        set is_receive(value: number) {
            pb_1.Message.setField(this, 58, value);
        }
        get is_in() {
            return pb_1.Message.getFieldWithDefault(this, 59, 0) as number;
        }
        set is_in(value: number) {
            pb_1.Message.setField(this, 59, value);
        }
        get is_out() {
            return pb_1.Message.getFieldWithDefault(this, 60, 0) as number;
        }
        set is_out(value: number) {
            pb_1.Message.setField(this, 60, value);
        }
        get visible() {
            return pb_1.Message.getFieldWithDefault(this, 17, 0) as number;
        }
        set visible(value: number) {
            pb_1.Message.setField(this, 17, value);
        }
        get state() {
            return pb_1.Message.getFieldWithDefault(this, 20, dependency_6.api.common.ChatState.CHAT_STATE_COMMON) as dependency_6.api.common.ChatState;
        }
        set state(value: dependency_6.api.common.ChatState) {
            pb_1.Message.setField(this, 20, value);
        }
        get worker_state() {
            return pb_1.Message.getFieldWithDefault(this, 21, dependency_5.api.common.WorkerState.WORKER_OFFLINE) as dependency_5.api.common.WorkerState;
        }
        set worker_state(value: dependency_5.api.common.WorkerState) {
            pb_1.Message.setField(this, 21, value);
        }
        static fromObject(data: {
            tenant_id?: number;
            consult_id?: number;
            owner_id?: number;
            owner_role?: number;
            assign_time?: number;
            session_start_time?: number;
            client_message_time?: number;
            client_first_time?: number;
            worker_id?: number;
            worker_ping_time?: number;
            worker_first_time?: number;
            worker_message_time?: number;
            worker_consult_id?: number;
            in_time?: number;
            out_time?: number;
            last_time?: number;
            timeout?: number;
            wait_response?: number;
            is_process?: number;
            is_receive?: number;
            is_in?: number;
            is_out?: number;
            visible?: number;
            state?: dependency_6.api.common.ChatState;
            worker_state?: dependency_5.api.common.WorkerState;
        }): GetChatSessionStateResponse {
            const message = new GetChatSessionStateResponse({});
            if (data.tenant_id != null) {
                message.tenant_id = data.tenant_id;
            }
            if (data.consult_id != null) {
                message.consult_id = data.consult_id;
            }
            if (data.owner_id != null) {
                message.owner_id = data.owner_id;
            }
            if (data.owner_role != null) {
                message.owner_role = data.owner_role;
            }
            if (data.assign_time != null) {
                message.assign_time = data.assign_time;
            }
            if (data.session_start_time != null) {
                message.session_start_time = data.session_start_time;
            }
            if (data.client_message_time != null) {
                message.client_message_time = data.client_message_time;
            }
            if (data.client_first_time != null) {
                message.client_first_time = data.client_first_time;
            }
            if (data.worker_id != null) {
                message.worker_id = data.worker_id;
            }
            if (data.worker_ping_time != null) {
                message.worker_ping_time = data.worker_ping_time;
            }
            if (data.worker_first_time != null) {
                message.worker_first_time = data.worker_first_time;
            }
            if (data.worker_message_time != null) {
                message.worker_message_time = data.worker_message_time;
            }
            if (data.worker_consult_id != null) {
                message.worker_consult_id = data.worker_consult_id;
            }
            if (data.in_time != null) {
                message.in_time = data.in_time;
            }
            if (data.out_time != null) {
                message.out_time = data.out_time;
            }
            if (data.last_time != null) {
                message.last_time = data.last_time;
            }
            if (data.timeout != null) {
                message.timeout = data.timeout;
            }
            if (data.wait_response != null) {
                message.wait_response = data.wait_response;
            }
            if (data.is_process != null) {
                message.is_process = data.is_process;
            }
            if (data.is_receive != null) {
                message.is_receive = data.is_receive;
            }
            if (data.is_in != null) {
                message.is_in = data.is_in;
            }
            if (data.is_out != null) {
                message.is_out = data.is_out;
            }
            if (data.visible != null) {
                message.visible = data.visible;
            }
            if (data.state != null) {
                message.state = data.state;
            }
            if (data.worker_state != null) {
                message.worker_state = data.worker_state;
            }
            return message;
        }
        toObject() {
            const data: {
                tenant_id?: number;
                consult_id?: number;
                owner_id?: number;
                owner_role?: number;
                assign_time?: number;
                session_start_time?: number;
                client_message_time?: number;
                client_first_time?: number;
                worker_id?: number;
                worker_ping_time?: number;
                worker_first_time?: number;
                worker_message_time?: number;
                worker_consult_id?: number;
                in_time?: number;
                out_time?: number;
                last_time?: number;
                timeout?: number;
                wait_response?: number;
                is_process?: number;
                is_receive?: number;
                is_in?: number;
                is_out?: number;
                visible?: number;
                state?: dependency_6.api.common.ChatState;
                worker_state?: dependency_5.api.common.WorkerState;
            } = {};
            if (this.tenant_id != null) {
                data.tenant_id = this.tenant_id;
            }
            if (this.consult_id != null) {
                data.consult_id = this.consult_id;
            }
            if (this.owner_id != null) {
                data.owner_id = this.owner_id;
            }
            if (this.owner_role != null) {
                data.owner_role = this.owner_role;
            }
            if (this.assign_time != null) {
                data.assign_time = this.assign_time;
            }
            if (this.session_start_time != null) {
                data.session_start_time = this.session_start_time;
            }
            if (this.client_message_time != null) {
                data.client_message_time = this.client_message_time;
            }
            if (this.client_first_time != null) {
                data.client_first_time = this.client_first_time;
            }
            if (this.worker_id != null) {
                data.worker_id = this.worker_id;
            }
            if (this.worker_ping_time != null) {
                data.worker_ping_time = this.worker_ping_time;
            }
            if (this.worker_first_time != null) {
                data.worker_first_time = this.worker_first_time;
            }
            if (this.worker_message_time != null) {
                data.worker_message_time = this.worker_message_time;
            }
            if (this.worker_consult_id != null) {
                data.worker_consult_id = this.worker_consult_id;
            }
            if (this.in_time != null) {
                data.in_time = this.in_time;
            }
            if (this.out_time != null) {
                data.out_time = this.out_time;
            }
            if (this.last_time != null) {
                data.last_time = this.last_time;
            }
            if (this.timeout != null) {
                data.timeout = this.timeout;
            }
            if (this.wait_response != null) {
                data.wait_response = this.wait_response;
            }
            if (this.is_process != null) {
                data.is_process = this.is_process;
            }
            if (this.is_receive != null) {
                data.is_receive = this.is_receive;
            }
            if (this.is_in != null) {
                data.is_in = this.is_in;
            }
            if (this.is_out != null) {
                data.is_out = this.is_out;
            }
            if (this.visible != null) {
                data.visible = this.visible;
            }
            if (this.state != null) {
                data.state = this.state;
            }
            if (this.worker_state != null) {
                data.worker_state = this.worker_state;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.tenant_id != 0)
                writer.writeInt32(1, this.tenant_id);
            if (this.consult_id != 0)
                writer.writeInt64(2, this.consult_id);
            if (this.owner_id != 0)
                writer.writeInt32(3, this.owner_id);
            if (this.owner_role != 0)
                writer.writeInt32(4, this.owner_role);
            if (this.assign_time != 0)
                writer.writeInt64(6, this.assign_time);
            if (this.session_start_time != 0)
                writer.writeInt64(7, this.session_start_time);
            if (this.client_message_time != 0)
                writer.writeInt64(8, this.client_message_time);
            if (this.client_first_time != 0)
                writer.writeInt64(31, this.client_first_time);
            if (this.worker_id != 0)
                writer.writeInt32(9, this.worker_id);
            if (this.worker_ping_time != 0)
                writer.writeInt64(10, this.worker_ping_time);
            if (this.worker_first_time != 0)
                writer.writeInt64(32, this.worker_first_time);
            if (this.worker_message_time != 0)
                writer.writeInt64(11, this.worker_message_time);
            if (this.worker_consult_id != 0)
                writer.writeInt64(13, this.worker_consult_id);
            if (this.in_time != 0)
                writer.writeInt64(14, this.in_time);
            if (this.out_time != 0)
                writer.writeInt64(15, this.out_time);
            if (this.last_time != 0)
                writer.writeInt64(35, this.last_time);
            if (this.timeout != 0)
                writer.writeInt32(16, this.timeout);
            if (this.wait_response != 0)
                writer.writeInt32(56, this.wait_response);
            if (this.is_process != 0)
                writer.writeInt32(57, this.is_process);
            if (this.is_receive != 0)
                writer.writeInt32(58, this.is_receive);
            if (this.is_in != 0)
                writer.writeInt32(59, this.is_in);
            if (this.is_out != 0)
                writer.writeInt32(60, this.is_out);
            if (this.visible != 0)
                writer.writeInt32(17, this.visible);
            if (this.state != dependency_6.api.common.ChatState.CHAT_STATE_COMMON)
                writer.writeEnum(20, this.state);
            if (this.worker_state != dependency_5.api.common.WorkerState.WORKER_OFFLINE)
                writer.writeEnum(21, this.worker_state);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetChatSessionStateResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetChatSessionStateResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.tenant_id = reader.readInt32();
                        break;
                    case 2:
                        message.consult_id = reader.readInt64();
                        break;
                    case 3:
                        message.owner_id = reader.readInt32();
                        break;
                    case 4:
                        message.owner_role = reader.readInt32();
                        break;
                    case 6:
                        message.assign_time = reader.readInt64();
                        break;
                    case 7:
                        message.session_start_time = reader.readInt64();
                        break;
                    case 8:
                        message.client_message_time = reader.readInt64();
                        break;
                    case 31:
                        message.client_first_time = reader.readInt64();
                        break;
                    case 9:
                        message.worker_id = reader.readInt32();
                        break;
                    case 10:
                        message.worker_ping_time = reader.readInt64();
                        break;
                    case 32:
                        message.worker_first_time = reader.readInt64();
                        break;
                    case 11:
                        message.worker_message_time = reader.readInt64();
                        break;
                    case 13:
                        message.worker_consult_id = reader.readInt64();
                        break;
                    case 14:
                        message.in_time = reader.readInt64();
                        break;
                    case 15:
                        message.out_time = reader.readInt64();
                        break;
                    case 35:
                        message.last_time = reader.readInt64();
                        break;
                    case 16:
                        message.timeout = reader.readInt32();
                        break;
                    case 56:
                        message.wait_response = reader.readInt32();
                        break;
                    case 57:
                        message.is_process = reader.readInt32();
                        break;
                    case 58:
                        message.is_receive = reader.readInt32();
                        break;
                    case 59:
                        message.is_in = reader.readInt32();
                        break;
                    case 60:
                        message.is_out = reader.readInt32();
                        break;
                    case 17:
                        message.visible = reader.readInt32();
                        break;
                    case 20:
                        message.state = reader.readEnum();
                        break;
                    case 21:
                        message.worker_state = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetChatSessionStateResponse {
            return GetChatSessionStateResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedChatService {
        static definition = {
            Query: {
                path: "/api.core.Chat/Query",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ChatListQueryRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ChatListQueryRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ChatListQueryResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ChatListQueryResponse.deserialize(new Uint8Array(bytes))
            },
            QueryByUserId: {
                path: "/api.core.Chat/QueryByUserId",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ChatListQueryUserRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ChatListQueryUserRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ChatListQueryResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ChatListQueryResponse.deserialize(new Uint8Array(bytes))
            },
            MarkRead: {
                path: "/api.core.Chat/MarkRead",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ChatMarkReadRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ChatMarkReadRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            Orphan: {
                path: "/api.core.Chat/Orphan",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: OrphanReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => OrphanReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: OrphanResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => OrphanResponse.deserialize(new Uint8Array(bytes))
            },
            MarkReplied: {
                path: "/api.core.Chat/MarkReplied",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: MarkRepliedRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => MarkRepliedRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            ResetChatState: {
                path: "/api.core.Chat/ResetChatState",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.google.protobuf.Empty) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.google.protobuf.Empty.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            PageQuery: {
                path: "/api.core.Chat/PageQuery",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ChatListQueryPageRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ChatListQueryPageRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ChatListQueryPageResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ChatListQueryPageResponse.deserialize(new Uint8Array(bytes))
            },
            HistoryClientSessions: {
                path: "/api.core.Chat/HistoryClientSessions",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: HistoryClientSessionsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => HistoryClientSessionsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: HistoryClientSessionsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => HistoryClientSessionsResponse.deserialize(new Uint8Array(bytes))
            },
            IndexClientSessions: {
                path: "/api.core.Chat/IndexClientSessions",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: IndexClientSessionsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => IndexClientSessionsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: IndexClientSessionsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => IndexClientSessionsResponse.deserialize(new Uint8Array(bytes))
            },
            GetChatSessionState: {
                path: "/api.core.Chat/GetChatSessionState",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetChatSessionStateRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetChatSessionStateRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetChatSessionStateResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetChatSessionStateResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract Query(call: grpc_1.ServerUnaryCall<ChatListQueryRequest, ChatListQueryResponse>, callback: grpc_1.sendUnaryData<ChatListQueryResponse>): void;
        abstract QueryByUserId(call: grpc_1.ServerUnaryCall<ChatListQueryUserRequest, ChatListQueryResponse>, callback: grpc_1.sendUnaryData<ChatListQueryResponse>): void;
        abstract MarkRead(call: grpc_1.ServerUnaryCall<ChatMarkReadRequest, dependency_1.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_1.google.protobuf.Empty>): void;
        abstract Orphan(call: grpc_1.ServerUnaryCall<OrphanReq, OrphanResponse>, callback: grpc_1.sendUnaryData<OrphanResponse>): void;
        abstract MarkReplied(call: grpc_1.ServerUnaryCall<MarkRepliedRequest, dependency_1.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_1.google.protobuf.Empty>): void;
        abstract ResetChatState(call: grpc_1.ServerUnaryCall<dependency_1.google.protobuf.Empty, dependency_1.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_1.google.protobuf.Empty>): void;
        abstract PageQuery(call: grpc_1.ServerUnaryCall<ChatListQueryPageRequest, ChatListQueryPageResponse>, callback: grpc_1.sendUnaryData<ChatListQueryPageResponse>): void;
        abstract HistoryClientSessions(call: grpc_1.ServerUnaryCall<HistoryClientSessionsRequest, HistoryClientSessionsResponse>, callback: grpc_1.sendUnaryData<HistoryClientSessionsResponse>): void;
        abstract IndexClientSessions(call: grpc_1.ServerUnaryCall<IndexClientSessionsRequest, IndexClientSessionsResponse>, callback: grpc_1.sendUnaryData<IndexClientSessionsResponse>): void;
        abstract GetChatSessionState(call: grpc_1.ServerUnaryCall<GetChatSessionStateRequest, GetChatSessionStateResponse>, callback: grpc_1.sendUnaryData<GetChatSessionStateResponse>): void;
    }
    export class ChatClient extends grpc_1.makeGenericClientConstructor(UnimplementedChatService.definition, "Chat", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        Query: GrpcUnaryServiceInterface<ChatListQueryRequest, ChatListQueryResponse> = (message: ChatListQueryRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ChatListQueryResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ChatListQueryResponse>, callback?: grpc_1.requestCallback<ChatListQueryResponse>): grpc_1.ClientUnaryCall => {
            return super.Query(message, metadata, options, callback);
        };
        QueryByUserId: GrpcUnaryServiceInterface<ChatListQueryUserRequest, ChatListQueryResponse> = (message: ChatListQueryUserRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ChatListQueryResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ChatListQueryResponse>, callback?: grpc_1.requestCallback<ChatListQueryResponse>): grpc_1.ClientUnaryCall => {
            return super.QueryByUserId(message, metadata, options, callback);
        };
        MarkRead: GrpcUnaryServiceInterface<ChatMarkReadRequest, dependency_1.google.protobuf.Empty> = (message: ChatMarkReadRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_1.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.MarkRead(message, metadata, options, callback);
        };
        Orphan: GrpcUnaryServiceInterface<OrphanReq, OrphanResponse> = (message: OrphanReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<OrphanResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<OrphanResponse>, callback?: grpc_1.requestCallback<OrphanResponse>): grpc_1.ClientUnaryCall => {
            return super.Orphan(message, metadata, options, callback);
        };
        MarkReplied: GrpcUnaryServiceInterface<MarkRepliedRequest, dependency_1.google.protobuf.Empty> = (message: MarkRepliedRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_1.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.MarkReplied(message, metadata, options, callback);
        };
        ResetChatState: GrpcUnaryServiceInterface<dependency_1.google.protobuf.Empty, dependency_1.google.protobuf.Empty> = (message: dependency_1.google.protobuf.Empty, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_1.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.ResetChatState(message, metadata, options, callback);
        };
        PageQuery: GrpcUnaryServiceInterface<ChatListQueryPageRequest, ChatListQueryPageResponse> = (message: ChatListQueryPageRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ChatListQueryPageResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ChatListQueryPageResponse>, callback?: grpc_1.requestCallback<ChatListQueryPageResponse>): grpc_1.ClientUnaryCall => {
            return super.PageQuery(message, metadata, options, callback);
        };
        HistoryClientSessions: GrpcUnaryServiceInterface<HistoryClientSessionsRequest, HistoryClientSessionsResponse> = (message: HistoryClientSessionsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<HistoryClientSessionsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<HistoryClientSessionsResponse>, callback?: grpc_1.requestCallback<HistoryClientSessionsResponse>): grpc_1.ClientUnaryCall => {
            return super.HistoryClientSessions(message, metadata, options, callback);
        };
        IndexClientSessions: GrpcUnaryServiceInterface<IndexClientSessionsRequest, IndexClientSessionsResponse> = (message: IndexClientSessionsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<IndexClientSessionsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<IndexClientSessionsResponse>, callback?: grpc_1.requestCallback<IndexClientSessionsResponse>): grpc_1.ClientUnaryCall => {
            return super.IndexClientSessions(message, metadata, options, callback);
        };
        GetChatSessionState: GrpcUnaryServiceInterface<GetChatSessionStateRequest, GetChatSessionStateResponse> = (message: GetChatSessionStateRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetChatSessionStateResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetChatSessionStateResponse>, callback?: grpc_1.requestCallback<GetChatSessionStateResponse>): grpc_1.ClientUnaryCall => {
            return super.GetChatSessionState(message, metadata, options, callback);
        };
    }
}
