/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.26.1
 * source: api/core/note.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../option";
import * as dependency_2 from "./../../google/protobuf/empty";
import * as dependency_3 from "./../../google/protobuf/timestamp";
import * as dependency_4 from "./../../validate/validate";
import * as dependency_5 from "./../common/c_base";
import * as dependency_6 from "./../common/c_message";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace api.core {
    export class NoteItem extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            worker_id?: number;
            worker_name?: string;
            create_at?: dependency_3.google.protobuf.Timestamp;
            note_msg?: dependency_6.api.common.Message;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("worker_id" in data && data.worker_id != undefined) {
                    this.worker_id = data.worker_id;
                }
                if ("worker_name" in data && data.worker_name != undefined) {
                    this.worker_name = data.worker_name;
                }
                if ("create_at" in data && data.create_at != undefined) {
                    this.create_at = data.create_at;
                }
                if ("note_msg" in data && data.note_msg != undefined) {
                    this.note_msg = data.note_msg;
                }
            }
        }
        get worker_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set worker_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get worker_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set worker_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get create_at() {
            return pb_1.Message.getWrapperField(this, dependency_3.google.protobuf.Timestamp, 3) as dependency_3.google.protobuf.Timestamp;
        }
        set create_at(value: dependency_3.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_create_at() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get note_msg() {
            return pb_1.Message.getWrapperField(this, dependency_6.api.common.Message, 4) as dependency_6.api.common.Message;
        }
        set note_msg(value: dependency_6.api.common.Message) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_note_msg() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            worker_id?: number;
            worker_name?: string;
            create_at?: ReturnType<typeof dependency_3.google.protobuf.Timestamp.prototype.toObject>;
            note_msg?: ReturnType<typeof dependency_6.api.common.Message.prototype.toObject>;
        }): NoteItem {
            const message = new NoteItem({});
            if (data.worker_id != null) {
                message.worker_id = data.worker_id;
            }
            if (data.worker_name != null) {
                message.worker_name = data.worker_name;
            }
            if (data.create_at != null) {
                message.create_at = dependency_3.google.protobuf.Timestamp.fromObject(data.create_at);
            }
            if (data.note_msg != null) {
                message.note_msg = dependency_6.api.common.Message.fromObject(data.note_msg);
            }
            return message;
        }
        toObject() {
            const data: {
                worker_id?: number;
                worker_name?: string;
                create_at?: ReturnType<typeof dependency_3.google.protobuf.Timestamp.prototype.toObject>;
                note_msg?: ReturnType<typeof dependency_6.api.common.Message.prototype.toObject>;
            } = {};
            if (this.worker_id != null) {
                data.worker_id = this.worker_id;
            }
            if (this.worker_name != null) {
                data.worker_name = this.worker_name;
            }
            if (this.create_at != null) {
                data.create_at = this.create_at.toObject();
            }
            if (this.note_msg != null) {
                data.note_msg = this.note_msg.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.worker_id != 0)
                writer.writeInt32(1, this.worker_id);
            if (this.worker_name.length)
                writer.writeString(2, this.worker_name);
            if (this.has_create_at)
                writer.writeMessage(3, this.create_at, () => this.create_at.serialize(writer));
            if (this.has_note_msg)
                writer.writeMessage(4, this.note_msg, () => this.note_msg.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NoteItem {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NoteItem();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.worker_id = reader.readInt32();
                        break;
                    case 2:
                        message.worker_name = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.create_at, () => message.create_at = dependency_3.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.note_msg, () => message.note_msg = dependency_6.api.common.Message.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): NoteItem {
            return NoteItem.deserialize(bytes);
        }
    }
    export class Note extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            chat_note_msg_id?: number;
            src?: dependency_6.api.common.Message;
            notes?: NoteItem[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("chat_note_msg_id" in data && data.chat_note_msg_id != undefined) {
                    this.chat_note_msg_id = data.chat_note_msg_id;
                }
                if ("src" in data && data.src != undefined) {
                    this.src = data.src;
                }
                if ("notes" in data && data.notes != undefined) {
                    this.notes = data.notes;
                }
            }
        }
        get chat_note_msg_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set chat_note_msg_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get src() {
            return pb_1.Message.getWrapperField(this, dependency_6.api.common.Message, 2) as dependency_6.api.common.Message;
        }
        set src(value: dependency_6.api.common.Message) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_src() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get notes() {
            return pb_1.Message.getRepeatedWrapperField(this, NoteItem, 3) as NoteItem[];
        }
        set notes(value: NoteItem[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        static fromObject(data: {
            chat_note_msg_id?: number;
            src?: ReturnType<typeof dependency_6.api.common.Message.prototype.toObject>;
            notes?: ReturnType<typeof NoteItem.prototype.toObject>[];
        }): Note {
            const message = new Note({});
            if (data.chat_note_msg_id != null) {
                message.chat_note_msg_id = data.chat_note_msg_id;
            }
            if (data.src != null) {
                message.src = dependency_6.api.common.Message.fromObject(data.src);
            }
            if (data.notes != null) {
                message.notes = data.notes.map(item => NoteItem.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                chat_note_msg_id?: number;
                src?: ReturnType<typeof dependency_6.api.common.Message.prototype.toObject>;
                notes?: ReturnType<typeof NoteItem.prototype.toObject>[];
            } = {};
            if (this.chat_note_msg_id != null) {
                data.chat_note_msg_id = this.chat_note_msg_id;
            }
            if (this.src != null) {
                data.src = this.src.toObject();
            }
            if (this.notes != null) {
                data.notes = this.notes.map((item: NoteItem) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.chat_note_msg_id != 0)
                writer.writeInt64(1, this.chat_note_msg_id);
            if (this.has_src)
                writer.writeMessage(2, this.src, () => this.src.serialize(writer));
            if (this.notes.length)
                writer.writeRepeatedMessage(3, this.notes, (item: NoteItem) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Note {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Note();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.chat_note_msg_id = reader.readInt64();
                        break;
                    case 2:
                        reader.readMessage(message.src, () => message.src = dependency_6.api.common.Message.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.notes, () => pb_1.Message.addToRepeatedWrapperField(message, 3, NoteItem.deserialize(reader), NoteItem));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Note {
            return Note.deserialize(bytes);
        }
    }
    export class QueryNoteRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            chat_id?: number;
            batch?: dependency_5.api.common.Batch;
            consult_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("chat_id" in data && data.chat_id != undefined) {
                    this.chat_id = data.chat_id;
                }
                if ("batch" in data && data.batch != undefined) {
                    this.batch = data.batch;
                }
                if ("consult_id" in data && data.consult_id != undefined) {
                    this.consult_id = data.consult_id;
                }
            }
        }
        get chat_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set chat_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get batch() {
            return pb_1.Message.getWrapperField(this, dependency_5.api.common.Batch, 2) as dependency_5.api.common.Batch;
        }
        set batch(value: dependency_5.api.common.Batch) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_batch() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get consult_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set consult_id(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            chat_id?: number;
            batch?: ReturnType<typeof dependency_5.api.common.Batch.prototype.toObject>;
            consult_id?: number;
        }): QueryNoteRequest {
            const message = new QueryNoteRequest({});
            if (data.chat_id != null) {
                message.chat_id = data.chat_id;
            }
            if (data.batch != null) {
                message.batch = dependency_5.api.common.Batch.fromObject(data.batch);
            }
            if (data.consult_id != null) {
                message.consult_id = data.consult_id;
            }
            return message;
        }
        toObject() {
            const data: {
                chat_id?: number;
                batch?: ReturnType<typeof dependency_5.api.common.Batch.prototype.toObject>;
                consult_id?: number;
            } = {};
            if (this.chat_id != null) {
                data.chat_id = this.chat_id;
            }
            if (this.batch != null) {
                data.batch = this.batch.toObject();
            }
            if (this.consult_id != null) {
                data.consult_id = this.consult_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.chat_id != 0)
                writer.writeInt64(1, this.chat_id);
            if (this.has_batch)
                writer.writeMessage(2, this.batch, () => this.batch.serialize(writer));
            if (this.consult_id != 0)
                writer.writeUint32(3, this.consult_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryNoteRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryNoteRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.chat_id = reader.readInt64();
                        break;
                    case 2:
                        reader.readMessage(message.batch, () => message.batch = dependency_5.api.common.Batch.deserialize(reader));
                        break;
                    case 3:
                        message.consult_id = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryNoteRequest {
            return QueryNoteRequest.deserialize(bytes);
        }
    }
    export class QueryNoteResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            chat_id?: number;
            total?: number;
            batch?: dependency_5.api.common.Batch;
            notes?: Note[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("chat_id" in data && data.chat_id != undefined) {
                    this.chat_id = data.chat_id;
                }
                if ("total" in data && data.total != undefined) {
                    this.total = data.total;
                }
                if ("batch" in data && data.batch != undefined) {
                    this.batch = data.batch;
                }
                if ("notes" in data && data.notes != undefined) {
                    this.notes = data.notes;
                }
            }
        }
        get chat_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set chat_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get total() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set total(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get batch() {
            return pb_1.Message.getWrapperField(this, dependency_5.api.common.Batch, 3) as dependency_5.api.common.Batch;
        }
        set batch(value: dependency_5.api.common.Batch) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_batch() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get notes() {
            return pb_1.Message.getRepeatedWrapperField(this, Note, 4) as Note[];
        }
        set notes(value: Note[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        static fromObject(data: {
            chat_id?: number;
            total?: number;
            batch?: ReturnType<typeof dependency_5.api.common.Batch.prototype.toObject>;
            notes?: ReturnType<typeof Note.prototype.toObject>[];
        }): QueryNoteResponse {
            const message = new QueryNoteResponse({});
            if (data.chat_id != null) {
                message.chat_id = data.chat_id;
            }
            if (data.total != null) {
                message.total = data.total;
            }
            if (data.batch != null) {
                message.batch = dependency_5.api.common.Batch.fromObject(data.batch);
            }
            if (data.notes != null) {
                message.notes = data.notes.map(item => Note.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                chat_id?: number;
                total?: number;
                batch?: ReturnType<typeof dependency_5.api.common.Batch.prototype.toObject>;
                notes?: ReturnType<typeof Note.prototype.toObject>[];
            } = {};
            if (this.chat_id != null) {
                data.chat_id = this.chat_id;
            }
            if (this.total != null) {
                data.total = this.total;
            }
            if (this.batch != null) {
                data.batch = this.batch.toObject();
            }
            if (this.notes != null) {
                data.notes = this.notes.map((item: Note) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.chat_id != 0)
                writer.writeInt64(1, this.chat_id);
            if (this.total != 0)
                writer.writeInt64(2, this.total);
            if (this.has_batch)
                writer.writeMessage(3, this.batch, () => this.batch.serialize(writer));
            if (this.notes.length)
                writer.writeRepeatedMessage(4, this.notes, (item: Note) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryNoteResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryNoteResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.chat_id = reader.readInt64();
                        break;
                    case 2:
                        message.total = reader.readInt64();
                        break;
                    case 3:
                        reader.readMessage(message.batch, () => message.batch = dependency_5.api.common.Batch.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.notes, () => pb_1.Message.addToRepeatedWrapperField(message, 4, Note.deserialize(reader), Note));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryNoteResponse {
            return QueryNoteResponse.deserialize(bytes);
        }
    }
    export class CreateNoteRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            chat_id?: number;
            src?: dependency_6.api.common.Message;
            note_msg?: dependency_6.api.common.Message;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("chat_id" in data && data.chat_id != undefined) {
                    this.chat_id = data.chat_id;
                }
                if ("src" in data && data.src != undefined) {
                    this.src = data.src;
                }
                if ("note_msg" in data && data.note_msg != undefined) {
                    this.note_msg = data.note_msg;
                }
            }
        }
        get chat_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set chat_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get src() {
            return pb_1.Message.getWrapperField(this, dependency_6.api.common.Message, 2) as dependency_6.api.common.Message;
        }
        set src(value: dependency_6.api.common.Message) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_src() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get note_msg() {
            return pb_1.Message.getWrapperField(this, dependency_6.api.common.Message, 3) as dependency_6.api.common.Message;
        }
        set note_msg(value: dependency_6.api.common.Message) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_note_msg() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            chat_id?: number;
            src?: ReturnType<typeof dependency_6.api.common.Message.prototype.toObject>;
            note_msg?: ReturnType<typeof dependency_6.api.common.Message.prototype.toObject>;
        }): CreateNoteRequest {
            const message = new CreateNoteRequest({});
            if (data.chat_id != null) {
                message.chat_id = data.chat_id;
            }
            if (data.src != null) {
                message.src = dependency_6.api.common.Message.fromObject(data.src);
            }
            if (data.note_msg != null) {
                message.note_msg = dependency_6.api.common.Message.fromObject(data.note_msg);
            }
            return message;
        }
        toObject() {
            const data: {
                chat_id?: number;
                src?: ReturnType<typeof dependency_6.api.common.Message.prototype.toObject>;
                note_msg?: ReturnType<typeof dependency_6.api.common.Message.prototype.toObject>;
            } = {};
            if (this.chat_id != null) {
                data.chat_id = this.chat_id;
            }
            if (this.src != null) {
                data.src = this.src.toObject();
            }
            if (this.note_msg != null) {
                data.note_msg = this.note_msg.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.chat_id != 0)
                writer.writeInt64(1, this.chat_id);
            if (this.has_src)
                writer.writeMessage(2, this.src, () => this.src.serialize(writer));
            if (this.has_note_msg)
                writer.writeMessage(3, this.note_msg, () => this.note_msg.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateNoteRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateNoteRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.chat_id = reader.readInt64();
                        break;
                    case 2:
                        reader.readMessage(message.src, () => message.src = dependency_6.api.common.Message.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.note_msg, () => message.note_msg = dependency_6.api.common.Message.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateNoteRequest {
            return CreateNoteRequest.deserialize(bytes);
        }
    }
    export class CreateNoteResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            note?: Note;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("note" in data && data.note != undefined) {
                    this.note = data.note;
                }
            }
        }
        get note() {
            return pb_1.Message.getWrapperField(this, Note, 1) as Note;
        }
        set note(value: Note) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_note() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            note?: ReturnType<typeof Note.prototype.toObject>;
        }): CreateNoteResponse {
            const message = new CreateNoteResponse({});
            if (data.note != null) {
                message.note = Note.fromObject(data.note);
            }
            return message;
        }
        toObject() {
            const data: {
                note?: ReturnType<typeof Note.prototype.toObject>;
            } = {};
            if (this.note != null) {
                data.note = this.note.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_note)
                writer.writeMessage(1, this.note, () => this.note.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateNoteResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateNoteResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.note, () => message.note = Note.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateNoteResponse {
            return CreateNoteResponse.deserialize(bytes);
        }
    }
    export class UpdateNoteRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            chat_id?: number;
            chat_note_msg_id?: number;
            create_at?: dependency_3.google.protobuf.Timestamp;
            note_msg?: dependency_6.api.common.Message;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("chat_id" in data && data.chat_id != undefined) {
                    this.chat_id = data.chat_id;
                }
                if ("chat_note_msg_id" in data && data.chat_note_msg_id != undefined) {
                    this.chat_note_msg_id = data.chat_note_msg_id;
                }
                if ("create_at" in data && data.create_at != undefined) {
                    this.create_at = data.create_at;
                }
                if ("note_msg" in data && data.note_msg != undefined) {
                    this.note_msg = data.note_msg;
                }
            }
        }
        get chat_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set chat_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get chat_note_msg_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set chat_note_msg_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get create_at() {
            return pb_1.Message.getWrapperField(this, dependency_3.google.protobuf.Timestamp, 3) as dependency_3.google.protobuf.Timestamp;
        }
        set create_at(value: dependency_3.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_create_at() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get note_msg() {
            return pb_1.Message.getWrapperField(this, dependency_6.api.common.Message, 4) as dependency_6.api.common.Message;
        }
        set note_msg(value: dependency_6.api.common.Message) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_note_msg() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            chat_id?: number;
            chat_note_msg_id?: number;
            create_at?: ReturnType<typeof dependency_3.google.protobuf.Timestamp.prototype.toObject>;
            note_msg?: ReturnType<typeof dependency_6.api.common.Message.prototype.toObject>;
        }): UpdateNoteRequest {
            const message = new UpdateNoteRequest({});
            if (data.chat_id != null) {
                message.chat_id = data.chat_id;
            }
            if (data.chat_note_msg_id != null) {
                message.chat_note_msg_id = data.chat_note_msg_id;
            }
            if (data.create_at != null) {
                message.create_at = dependency_3.google.protobuf.Timestamp.fromObject(data.create_at);
            }
            if (data.note_msg != null) {
                message.note_msg = dependency_6.api.common.Message.fromObject(data.note_msg);
            }
            return message;
        }
        toObject() {
            const data: {
                chat_id?: number;
                chat_note_msg_id?: number;
                create_at?: ReturnType<typeof dependency_3.google.protobuf.Timestamp.prototype.toObject>;
                note_msg?: ReturnType<typeof dependency_6.api.common.Message.prototype.toObject>;
            } = {};
            if (this.chat_id != null) {
                data.chat_id = this.chat_id;
            }
            if (this.chat_note_msg_id != null) {
                data.chat_note_msg_id = this.chat_note_msg_id;
            }
            if (this.create_at != null) {
                data.create_at = this.create_at.toObject();
            }
            if (this.note_msg != null) {
                data.note_msg = this.note_msg.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.chat_id != 0)
                writer.writeInt64(1, this.chat_id);
            if (this.chat_note_msg_id != 0)
                writer.writeInt64(2, this.chat_note_msg_id);
            if (this.has_create_at)
                writer.writeMessage(3, this.create_at, () => this.create_at.serialize(writer));
            if (this.has_note_msg)
                writer.writeMessage(4, this.note_msg, () => this.note_msg.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateNoteRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateNoteRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.chat_id = reader.readInt64();
                        break;
                    case 2:
                        message.chat_note_msg_id = reader.readInt64();
                        break;
                    case 3:
                        reader.readMessage(message.create_at, () => message.create_at = dependency_3.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.note_msg, () => message.note_msg = dependency_6.api.common.Message.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateNoteRequest {
            return UpdateNoteRequest.deserialize(bytes);
        }
    }
    export class UpdateNoteResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            note?: Note;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("note" in data && data.note != undefined) {
                    this.note = data.note;
                }
            }
        }
        get note() {
            return pb_1.Message.getWrapperField(this, Note, 1) as Note;
        }
        set note(value: Note) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_note() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            note?: ReturnType<typeof Note.prototype.toObject>;
        }): UpdateNoteResponse {
            const message = new UpdateNoteResponse({});
            if (data.note != null) {
                message.note = Note.fromObject(data.note);
            }
            return message;
        }
        toObject() {
            const data: {
                note?: ReturnType<typeof Note.prototype.toObject>;
            } = {};
            if (this.note != null) {
                data.note = this.note.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_note)
                writer.writeMessage(1, this.note, () => this.note.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateNoteResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateNoteResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.note, () => message.note = Note.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateNoteResponse {
            return UpdateNoteResponse.deserialize(bytes);
        }
    }
    export class DeleteNoteRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            chat_id?: number;
            chat_note_msg_id?: number;
            create_at?: dependency_3.google.protobuf.Timestamp;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("chat_id" in data && data.chat_id != undefined) {
                    this.chat_id = data.chat_id;
                }
                if ("chat_note_msg_id" in data && data.chat_note_msg_id != undefined) {
                    this.chat_note_msg_id = data.chat_note_msg_id;
                }
                if ("create_at" in data && data.create_at != undefined) {
                    this.create_at = data.create_at;
                }
            }
        }
        get chat_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set chat_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get chat_note_msg_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set chat_note_msg_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get create_at() {
            return pb_1.Message.getWrapperField(this, dependency_3.google.protobuf.Timestamp, 3) as dependency_3.google.protobuf.Timestamp;
        }
        set create_at(value: dependency_3.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_create_at() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            chat_id?: number;
            chat_note_msg_id?: number;
            create_at?: ReturnType<typeof dependency_3.google.protobuf.Timestamp.prototype.toObject>;
        }): DeleteNoteRequest {
            const message = new DeleteNoteRequest({});
            if (data.chat_id != null) {
                message.chat_id = data.chat_id;
            }
            if (data.chat_note_msg_id != null) {
                message.chat_note_msg_id = data.chat_note_msg_id;
            }
            if (data.create_at != null) {
                message.create_at = dependency_3.google.protobuf.Timestamp.fromObject(data.create_at);
            }
            return message;
        }
        toObject() {
            const data: {
                chat_id?: number;
                chat_note_msg_id?: number;
                create_at?: ReturnType<typeof dependency_3.google.protobuf.Timestamp.prototype.toObject>;
            } = {};
            if (this.chat_id != null) {
                data.chat_id = this.chat_id;
            }
            if (this.chat_note_msg_id != null) {
                data.chat_note_msg_id = this.chat_note_msg_id;
            }
            if (this.create_at != null) {
                data.create_at = this.create_at.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.chat_id != 0)
                writer.writeInt64(1, this.chat_id);
            if (this.chat_note_msg_id != 0)
                writer.writeInt64(2, this.chat_note_msg_id);
            if (this.has_create_at)
                writer.writeMessage(3, this.create_at, () => this.create_at.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteNoteRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteNoteRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.chat_id = reader.readInt64();
                        break;
                    case 2:
                        message.chat_note_msg_id = reader.readInt64();
                        break;
                    case 3:
                        reader.readMessage(message.create_at, () => message.create_at = dependency_3.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteNoteRequest {
            return DeleteNoteRequest.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedNoteSrvService {
        static definition = {
            QueryNote: {
                path: "/api.core.NoteSrv/QueryNote",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryNoteRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryNoteRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryNoteResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryNoteResponse.deserialize(new Uint8Array(bytes))
            },
            CreateNote: {
                path: "/api.core.NoteSrv/CreateNote",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateNoteRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateNoteRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CreateNoteResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CreateNoteResponse.deserialize(new Uint8Array(bytes))
            },
            UpdateNote: {
                path: "/api.core.NoteSrv/UpdateNote",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdateNoteRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdateNoteRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: UpdateNoteResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => UpdateNoteResponse.deserialize(new Uint8Array(bytes))
            },
            DeleteNote: {
                path: "/api.core.NoteSrv/DeleteNote",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DeleteNoteRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DeleteNoteRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract QueryNote(call: grpc_1.ServerUnaryCall<QueryNoteRequest, QueryNoteResponse>, callback: grpc_1.sendUnaryData<QueryNoteResponse>): void;
        abstract CreateNote(call: grpc_1.ServerUnaryCall<CreateNoteRequest, CreateNoteResponse>, callback: grpc_1.sendUnaryData<CreateNoteResponse>): void;
        abstract UpdateNote(call: grpc_1.ServerUnaryCall<UpdateNoteRequest, UpdateNoteResponse>, callback: grpc_1.sendUnaryData<UpdateNoteResponse>): void;
        abstract DeleteNote(call: grpc_1.ServerUnaryCall<DeleteNoteRequest, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
    }
    export class NoteSrvClient extends grpc_1.makeGenericClientConstructor(UnimplementedNoteSrvService.definition, "NoteSrv", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        QueryNote: GrpcUnaryServiceInterface<QueryNoteRequest, QueryNoteResponse> = (message: QueryNoteRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryNoteResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryNoteResponse>, callback?: grpc_1.requestCallback<QueryNoteResponse>): grpc_1.ClientUnaryCall => {
            return super.QueryNote(message, metadata, options, callback);
        };
        CreateNote: GrpcUnaryServiceInterface<CreateNoteRequest, CreateNoteResponse> = (message: CreateNoteRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CreateNoteResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CreateNoteResponse>, callback?: grpc_1.requestCallback<CreateNoteResponse>): grpc_1.ClientUnaryCall => {
            return super.CreateNote(message, metadata, options, callback);
        };
        UpdateNote: GrpcUnaryServiceInterface<UpdateNoteRequest, UpdateNoteResponse> = (message: UpdateNoteRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<UpdateNoteResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<UpdateNoteResponse>, callback?: grpc_1.requestCallback<UpdateNoteResponse>): grpc_1.ClientUnaryCall => {
            return super.UpdateNote(message, metadata, options, callback);
        };
        DeleteNote: GrpcUnaryServiceInterface<DeleteNoteRequest, dependency_2.google.protobuf.Empty> = (message: DeleteNoteRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_2.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.DeleteNote(message, metadata, options, callback);
        };
    }
}
