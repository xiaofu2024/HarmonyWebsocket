/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.26.1
 * source: api/core/worker.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../google/protobuf/empty";
import * as dependency_2 from "./../../validate/validate";
import * as dependency_3 from "./../option";
import * as dependency_4 from "./../common/c_worker";
import * as dependency_5 from "./../common/c_base";
import * as dependency_6 from "./../common/c_chat";
import * as dependency_7 from "./../common/c_message";
import * as dependency_8 from "./../../google/protobuf/timestamp";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace api.core {
    export class WorkerQueryRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[2], [3], [4], [5]];
        constructor(data?: any[] | ({
            batch?: dependency_5.api.common.Batch;
        } & (({
            name?: string;
        }) | ({
            queryType?: number;
        }) | ({
            group_pid?: number;
        }) | ({
            group_cid?: number;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("batch" in data && data.batch != undefined) {
                    this.batch = data.batch;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("queryType" in data && data.queryType != undefined) {
                    this.queryType = data.queryType;
                }
                if ("group_pid" in data && data.group_pid != undefined) {
                    this.group_pid = data.group_pid;
                }
                if ("group_cid" in data && data.group_cid != undefined) {
                    this.group_cid = data.group_cid;
                }
            }
        }
        get batch() {
            return pb_1.Message.getWrapperField(this, dependency_5.api.common.Batch, 1) as dependency_5.api.common.Batch;
        }
        set batch(value: dependency_5.api.common.Batch) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_batch() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
        }
        get has_name() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get queryType() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set queryType(value: number) {
            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[1], value);
        }
        get has_queryType() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get group_pid() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set group_pid(value: number) {
            pb_1.Message.setOneofField(this, 4, this.#one_of_decls[2], value);
        }
        get has_group_pid() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get group_cid() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set group_cid(value: number) {
            pb_1.Message.setOneofField(this, 5, this.#one_of_decls[3], value);
        }
        get has_group_cid() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get _name() {
            const cases: {
                [index: number]: "none" | "name";
            } = {
                0: "none",
                2: "name"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        get _queryType() {
            const cases: {
                [index: number]: "none" | "queryType";
            } = {
                0: "none",
                3: "queryType"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3])];
        }
        get _group_pid() {
            const cases: {
                [index: number]: "none" | "group_pid";
            } = {
                0: "none",
                4: "group_pid"
            };
            return cases[pb_1.Message.computeOneofCase(this, [4])];
        }
        get _group_cid() {
            const cases: {
                [index: number]: "none" | "group_cid";
            } = {
                0: "none",
                5: "group_cid"
            };
            return cases[pb_1.Message.computeOneofCase(this, [5])];
        }
        static fromObject(data: {
            batch?: ReturnType<typeof dependency_5.api.common.Batch.prototype.toObject>;
            name?: string;
            queryType?: number;
            group_pid?: number;
            group_cid?: number;
        }): WorkerQueryRequest {
            const message = new WorkerQueryRequest({});
            if (data.batch != null) {
                message.batch = dependency_5.api.common.Batch.fromObject(data.batch);
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.queryType != null) {
                message.queryType = data.queryType;
            }
            if (data.group_pid != null) {
                message.group_pid = data.group_pid;
            }
            if (data.group_cid != null) {
                message.group_cid = data.group_cid;
            }
            return message;
        }
        toObject() {
            const data: {
                batch?: ReturnType<typeof dependency_5.api.common.Batch.prototype.toObject>;
                name?: string;
                queryType?: number;
                group_pid?: number;
                group_cid?: number;
            } = {};
            if (this.batch != null) {
                data.batch = this.batch.toObject();
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.queryType != null) {
                data.queryType = this.queryType;
            }
            if (this.group_pid != null) {
                data.group_pid = this.group_pid;
            }
            if (this.group_cid != null) {
                data.group_cid = this.group_cid;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_batch)
                writer.writeMessage(1, this.batch, () => this.batch.serialize(writer));
            if (this.has_name)
                writer.writeString(2, this.name);
            if (this.has_queryType)
                writer.writeInt32(3, this.queryType);
            if (this.has_group_pid)
                writer.writeInt64(4, this.group_pid);
            if (this.has_group_cid)
                writer.writeInt64(5, this.group_cid);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WorkerQueryRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WorkerQueryRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.batch, () => message.batch = dependency_5.api.common.Batch.deserialize(reader));
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.queryType = reader.readInt32();
                        break;
                    case 4:
                        message.group_pid = reader.readInt64();
                        break;
                    case 5:
                        message.group_cid = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WorkerQueryRequest {
            return WorkerQueryRequest.deserialize(bytes);
        }
    }
    export class WorkerQueryResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            items?: dependency_4.api.common.Worker[];
            batch?: dependency_5.api.common.Batch;
            total?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("items" in data && data.items != undefined) {
                    this.items = data.items;
                }
                if ("batch" in data && data.batch != undefined) {
                    this.batch = data.batch;
                }
                if ("total" in data && data.total != undefined) {
                    this.total = data.total;
                }
            }
        }
        get items() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_4.api.common.Worker, 1) as dependency_4.api.common.Worker[];
        }
        set items(value: dependency_4.api.common.Worker[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get batch() {
            return pb_1.Message.getWrapperField(this, dependency_5.api.common.Batch, 2) as dependency_5.api.common.Batch;
        }
        set batch(value: dependency_5.api.common.Batch) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_batch() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get total() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set total(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            items?: ReturnType<typeof dependency_4.api.common.Worker.prototype.toObject>[];
            batch?: ReturnType<typeof dependency_5.api.common.Batch.prototype.toObject>;
            total?: number;
        }): WorkerQueryResponse {
            const message = new WorkerQueryResponse({});
            if (data.items != null) {
                message.items = data.items.map(item => dependency_4.api.common.Worker.fromObject(item));
            }
            if (data.batch != null) {
                message.batch = dependency_5.api.common.Batch.fromObject(data.batch);
            }
            if (data.total != null) {
                message.total = data.total;
            }
            return message;
        }
        toObject() {
            const data: {
                items?: ReturnType<typeof dependency_4.api.common.Worker.prototype.toObject>[];
                batch?: ReturnType<typeof dependency_5.api.common.Batch.prototype.toObject>;
                total?: number;
            } = {};
            if (this.items != null) {
                data.items = this.items.map((item: dependency_4.api.common.Worker) => item.toObject());
            }
            if (this.batch != null) {
                data.batch = this.batch.toObject();
            }
            if (this.total != null) {
                data.total = this.total;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.items.length)
                writer.writeRepeatedMessage(1, this.items, (item: dependency_4.api.common.Worker) => item.serialize(writer));
            if (this.has_batch)
                writer.writeMessage(2, this.batch, () => this.batch.serialize(writer));
            if (this.total != 0)
                writer.writeInt32(3, this.total);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WorkerQueryResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WorkerQueryResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.items, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_4.api.common.Worker.deserialize(reader), dependency_4.api.common.Worker));
                        break;
                    case 2:
                        reader.readMessage(message.batch, () => message.batch = dependency_5.api.common.Batch.deserialize(reader));
                        break;
                    case 3:
                        message.total = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WorkerQueryResponse {
            return WorkerQueryResponse.deserialize(bytes);
        }
    }
    export class WorkerQuerySelfResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            self?: dependency_4.api.common.Worker;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("self" in data && data.self != undefined) {
                    this.self = data.self;
                }
            }
        }
        get self() {
            return pb_1.Message.getWrapperField(this, dependency_4.api.common.Worker, 1) as dependency_4.api.common.Worker;
        }
        set self(value: dependency_4.api.common.Worker) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_self() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            self?: ReturnType<typeof dependency_4.api.common.Worker.prototype.toObject>;
        }): WorkerQuerySelfResponse {
            const message = new WorkerQuerySelfResponse({});
            if (data.self != null) {
                message.self = dependency_4.api.common.Worker.fromObject(data.self);
            }
            return message;
        }
        toObject() {
            const data: {
                self?: ReturnType<typeof dependency_4.api.common.Worker.prototype.toObject>;
            } = {};
            if (this.self != null) {
                data.self = this.self.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_self)
                writer.writeMessage(1, this.self, () => this.self.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WorkerQuerySelfResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WorkerQuerySelfResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.self, () => message.self = dependency_4.api.common.Worker.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WorkerQuerySelfResponse {
            return WorkerQuerySelfResponse.deserialize(bytes);
        }
    }
    export class NIMAccountRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            workerID?: number;
            name?: string;
            avatar?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("workerID" in data && data.workerID != undefined) {
                    this.workerID = data.workerID;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("avatar" in data && data.avatar != undefined) {
                    this.avatar = data.avatar;
                }
            }
        }
        get workerID() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set workerID(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get avatar() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set avatar(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            workerID?: number;
            name?: string;
            avatar?: string;
        }): NIMAccountRequest {
            const message = new NIMAccountRequest({});
            if (data.workerID != null) {
                message.workerID = data.workerID;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.avatar != null) {
                message.avatar = data.avatar;
            }
            return message;
        }
        toObject() {
            const data: {
                workerID?: number;
                name?: string;
                avatar?: string;
            } = {};
            if (this.workerID != null) {
                data.workerID = this.workerID;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.avatar != null) {
                data.avatar = this.avatar;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.workerID != 0)
                writer.writeInt32(1, this.workerID);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.avatar.length)
                writer.writeString(3, this.avatar);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NIMAccountRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NIMAccountRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.workerID = reader.readInt32();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.avatar = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): NIMAccountRequest {
            return NIMAccountRequest.deserialize(bytes);
        }
    }
    export class NIMAccountResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            nimaccid?: string;
            nimname?: string;
            nimtoken?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("nimaccid" in data && data.nimaccid != undefined) {
                    this.nimaccid = data.nimaccid;
                }
                if ("nimname" in data && data.nimname != undefined) {
                    this.nimname = data.nimname;
                }
                if ("nimtoken" in data && data.nimtoken != undefined) {
                    this.nimtoken = data.nimtoken;
                }
            }
        }
        get nimaccid() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set nimaccid(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get nimname() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set nimname(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get nimtoken() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set nimtoken(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            nimaccid?: string;
            nimname?: string;
            nimtoken?: string;
        }): NIMAccountResponse {
            const message = new NIMAccountResponse({});
            if (data.nimaccid != null) {
                message.nimaccid = data.nimaccid;
            }
            if (data.nimname != null) {
                message.nimname = data.nimname;
            }
            if (data.nimtoken != null) {
                message.nimtoken = data.nimtoken;
            }
            return message;
        }
        toObject() {
            const data: {
                nimaccid?: string;
                nimname?: string;
                nimtoken?: string;
            } = {};
            if (this.nimaccid != null) {
                data.nimaccid = this.nimaccid;
            }
            if (this.nimname != null) {
                data.nimname = this.nimname;
            }
            if (this.nimtoken != null) {
                data.nimtoken = this.nimtoken;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.nimaccid.length)
                writer.writeString(1, this.nimaccid);
            if (this.nimname.length)
                writer.writeString(2, this.nimname);
            if (this.nimtoken.length)
                writer.writeString(3, this.nimtoken);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NIMAccountResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NIMAccountResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.nimaccid = reader.readString();
                        break;
                    case 2:
                        message.nimname = reader.readString();
                        break;
                    case 3:
                        message.nimtoken = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): NIMAccountResponse {
            return NIMAccountResponse.deserialize(bytes);
        }
    }
    export class WorkerCreateRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[8], [9], [10]];
        constructor(data?: any[] | ({
            account?: string;
            password?: string;
            group_ids?: number[];
            perm_mask?: number;
            name?: string;
            avatar?: string;
            group_cids?: number[];
        } & (({
            bneednim?: boolean;
        }) | ({
            avatarurl?: string;
        }) | ({
            tips?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3, 11], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("account" in data && data.account != undefined) {
                    this.account = data.account;
                }
                if ("password" in data && data.password != undefined) {
                    this.password = data.password;
                }
                if ("group_ids" in data && data.group_ids != undefined) {
                    this.group_ids = data.group_ids;
                }
                if ("perm_mask" in data && data.perm_mask != undefined) {
                    this.perm_mask = data.perm_mask;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("avatar" in data && data.avatar != undefined) {
                    this.avatar = data.avatar;
                }
                if ("bneednim" in data && data.bneednim != undefined) {
                    this.bneednim = data.bneednim;
                }
                if ("avatarurl" in data && data.avatarurl != undefined) {
                    this.avatarurl = data.avatarurl;
                }
                if ("tips" in data && data.tips != undefined) {
                    this.tips = data.tips;
                }
                if ("group_cids" in data && data.group_cids != undefined) {
                    this.group_cids = data.group_cids;
                }
            }
        }
        get account() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set account(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get password() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set password(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get group_ids() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as number[];
        }
        set group_ids(value: number[]) {
            pb_1.Message.setField(this, 3, value);
        }
        get perm_mask() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set perm_mask(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get avatar() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set avatar(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get bneednim() {
            return pb_1.Message.getFieldWithDefault(this, 8, false) as boolean;
        }
        set bneednim(value: boolean) {
            pb_1.Message.setOneofField(this, 8, this.#one_of_decls[0], value);
        }
        get has_bneednim() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get avatarurl() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set avatarurl(value: string) {
            pb_1.Message.setOneofField(this, 9, this.#one_of_decls[1], value);
        }
        get has_avatarurl() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get tips() {
            return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
        }
        set tips(value: string) {
            pb_1.Message.setOneofField(this, 10, this.#one_of_decls[2], value);
        }
        get has_tips() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get group_cids() {
            return pb_1.Message.getFieldWithDefault(this, 11, []) as number[];
        }
        set group_cids(value: number[]) {
            pb_1.Message.setField(this, 11, value);
        }
        get _bneednim() {
            const cases: {
                [index: number]: "none" | "bneednim";
            } = {
                0: "none",
                8: "bneednim"
            };
            return cases[pb_1.Message.computeOneofCase(this, [8])];
        }
        get _avatarurl() {
            const cases: {
                [index: number]: "none" | "avatarurl";
            } = {
                0: "none",
                9: "avatarurl"
            };
            return cases[pb_1.Message.computeOneofCase(this, [9])];
        }
        get _tips() {
            const cases: {
                [index: number]: "none" | "tips";
            } = {
                0: "none",
                10: "tips"
            };
            return cases[pb_1.Message.computeOneofCase(this, [10])];
        }
        static fromObject(data: {
            account?: string;
            password?: string;
            group_ids?: number[];
            perm_mask?: number;
            name?: string;
            avatar?: string;
            bneednim?: boolean;
            avatarurl?: string;
            tips?: string;
            group_cids?: number[];
        }): WorkerCreateRequest {
            const message = new WorkerCreateRequest({});
            if (data.account != null) {
                message.account = data.account;
            }
            if (data.password != null) {
                message.password = data.password;
            }
            if (data.group_ids != null) {
                message.group_ids = data.group_ids;
            }
            if (data.perm_mask != null) {
                message.perm_mask = data.perm_mask;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.avatar != null) {
                message.avatar = data.avatar;
            }
            if (data.bneednim != null) {
                message.bneednim = data.bneednim;
            }
            if (data.avatarurl != null) {
                message.avatarurl = data.avatarurl;
            }
            if (data.tips != null) {
                message.tips = data.tips;
            }
            if (data.group_cids != null) {
                message.group_cids = data.group_cids;
            }
            return message;
        }
        toObject() {
            const data: {
                account?: string;
                password?: string;
                group_ids?: number[];
                perm_mask?: number;
                name?: string;
                avatar?: string;
                bneednim?: boolean;
                avatarurl?: string;
                tips?: string;
                group_cids?: number[];
            } = {};
            if (this.account != null) {
                data.account = this.account;
            }
            if (this.password != null) {
                data.password = this.password;
            }
            if (this.group_ids != null) {
                data.group_ids = this.group_ids;
            }
            if (this.perm_mask != null) {
                data.perm_mask = this.perm_mask;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.avatar != null) {
                data.avatar = this.avatar;
            }
            if (this.bneednim != null) {
                data.bneednim = this.bneednim;
            }
            if (this.avatarurl != null) {
                data.avatarurl = this.avatarurl;
            }
            if (this.tips != null) {
                data.tips = this.tips;
            }
            if (this.group_cids != null) {
                data.group_cids = this.group_cids;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.account.length)
                writer.writeString(1, this.account);
            if (this.password.length)
                writer.writeString(2, this.password);
            if (this.group_ids.length)
                writer.writePackedInt64(3, this.group_ids);
            if (this.perm_mask != 0)
                writer.writeInt32(4, this.perm_mask);
            if (this.name.length)
                writer.writeString(6, this.name);
            if (this.avatar.length)
                writer.writeString(7, this.avatar);
            if (this.has_bneednim)
                writer.writeBool(8, this.bneednim);
            if (this.has_avatarurl)
                writer.writeString(9, this.avatarurl);
            if (this.has_tips)
                writer.writeString(10, this.tips);
            if (this.group_cids.length)
                writer.writePackedInt64(11, this.group_cids);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WorkerCreateRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WorkerCreateRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.account = reader.readString();
                        break;
                    case 2:
                        message.password = reader.readString();
                        break;
                    case 3:
                        message.group_ids = reader.readPackedInt64();
                        break;
                    case 4:
                        message.perm_mask = reader.readInt32();
                        break;
                    case 6:
                        message.name = reader.readString();
                        break;
                    case 7:
                        message.avatar = reader.readString();
                        break;
                    case 8:
                        message.bneednim = reader.readBool();
                        break;
                    case 9:
                        message.avatarurl = reader.readString();
                        break;
                    case 10:
                        message.tips = reader.readString();
                        break;
                    case 11:
                        message.group_cids = reader.readPackedInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WorkerCreateRequest {
            return WorkerCreateRequest.deserialize(bytes);
        }
    }
    export class WorkerUpdateRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[2], [3], [5], [6], [7], [8], [9], [10]];
        constructor(data?: any[] | ({
            worker_id?: number;
            group_cids?: number[];
        } & (({
            password?: string;
        }) | ({
            group_ids?: dependency_5.api.common.SetInt64;
        }) | ({
            perm_mask?: number;
        }) | ({
            name?: string;
        }) | ({
            avatar?: string;
        }) | ({
            nimid?: string;
        }) | ({
            nimtoken?: string;
        }) | ({
            tips?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [11], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("worker_id" in data && data.worker_id != undefined) {
                    this.worker_id = data.worker_id;
                }
                if ("password" in data && data.password != undefined) {
                    this.password = data.password;
                }
                if ("group_ids" in data && data.group_ids != undefined) {
                    this.group_ids = data.group_ids;
                }
                if ("perm_mask" in data && data.perm_mask != undefined) {
                    this.perm_mask = data.perm_mask;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("avatar" in data && data.avatar != undefined) {
                    this.avatar = data.avatar;
                }
                if ("nimid" in data && data.nimid != undefined) {
                    this.nimid = data.nimid;
                }
                if ("nimtoken" in data && data.nimtoken != undefined) {
                    this.nimtoken = data.nimtoken;
                }
                if ("tips" in data && data.tips != undefined) {
                    this.tips = data.tips;
                }
                if ("group_cids" in data && data.group_cids != undefined) {
                    this.group_cids = data.group_cids;
                }
            }
        }
        get worker_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set worker_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get password() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set password(value: string) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
        }
        get has_password() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get group_ids() {
            return pb_1.Message.getWrapperField(this, dependency_5.api.common.SetInt64, 3) as dependency_5.api.common.SetInt64;
        }
        set group_ids(value: dependency_5.api.common.SetInt64) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[1], value);
        }
        get has_group_ids() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get perm_mask() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set perm_mask(value: number) {
            pb_1.Message.setOneofField(this, 5, this.#one_of_decls[2], value);
        }
        get has_perm_mask() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setOneofField(this, 6, this.#one_of_decls[3], value);
        }
        get has_name() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get avatar() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set avatar(value: string) {
            pb_1.Message.setOneofField(this, 7, this.#one_of_decls[4], value);
        }
        get has_avatar() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get nimid() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set nimid(value: string) {
            pb_1.Message.setOneofField(this, 8, this.#one_of_decls[5], value);
        }
        get has_nimid() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get nimtoken() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set nimtoken(value: string) {
            pb_1.Message.setOneofField(this, 9, this.#one_of_decls[6], value);
        }
        get has_nimtoken() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get tips() {
            return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
        }
        set tips(value: string) {
            pb_1.Message.setOneofField(this, 10, this.#one_of_decls[7], value);
        }
        get has_tips() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get group_cids() {
            return pb_1.Message.getFieldWithDefault(this, 11, []) as number[];
        }
        set group_cids(value: number[]) {
            pb_1.Message.setField(this, 11, value);
        }
        get _password() {
            const cases: {
                [index: number]: "none" | "password";
            } = {
                0: "none",
                2: "password"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        get _group_ids() {
            const cases: {
                [index: number]: "none" | "group_ids";
            } = {
                0: "none",
                3: "group_ids"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3])];
        }
        get _perm_mask() {
            const cases: {
                [index: number]: "none" | "perm_mask";
            } = {
                0: "none",
                5: "perm_mask"
            };
            return cases[pb_1.Message.computeOneofCase(this, [5])];
        }
        get _name() {
            const cases: {
                [index: number]: "none" | "name";
            } = {
                0: "none",
                6: "name"
            };
            return cases[pb_1.Message.computeOneofCase(this, [6])];
        }
        get _avatar() {
            const cases: {
                [index: number]: "none" | "avatar";
            } = {
                0: "none",
                7: "avatar"
            };
            return cases[pb_1.Message.computeOneofCase(this, [7])];
        }
        get _nimid() {
            const cases: {
                [index: number]: "none" | "nimid";
            } = {
                0: "none",
                8: "nimid"
            };
            return cases[pb_1.Message.computeOneofCase(this, [8])];
        }
        get _nimtoken() {
            const cases: {
                [index: number]: "none" | "nimtoken";
            } = {
                0: "none",
                9: "nimtoken"
            };
            return cases[pb_1.Message.computeOneofCase(this, [9])];
        }
        get _tips() {
            const cases: {
                [index: number]: "none" | "tips";
            } = {
                0: "none",
                10: "tips"
            };
            return cases[pb_1.Message.computeOneofCase(this, [10])];
        }
        static fromObject(data: {
            worker_id?: number;
            password?: string;
            group_ids?: ReturnType<typeof dependency_5.api.common.SetInt64.prototype.toObject>;
            perm_mask?: number;
            name?: string;
            avatar?: string;
            nimid?: string;
            nimtoken?: string;
            tips?: string;
            group_cids?: number[];
        }): WorkerUpdateRequest {
            const message = new WorkerUpdateRequest({});
            if (data.worker_id != null) {
                message.worker_id = data.worker_id;
            }
            if (data.password != null) {
                message.password = data.password;
            }
            if (data.group_ids != null) {
                message.group_ids = dependency_5.api.common.SetInt64.fromObject(data.group_ids);
            }
            if (data.perm_mask != null) {
                message.perm_mask = data.perm_mask;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.avatar != null) {
                message.avatar = data.avatar;
            }
            if (data.nimid != null) {
                message.nimid = data.nimid;
            }
            if (data.nimtoken != null) {
                message.nimtoken = data.nimtoken;
            }
            if (data.tips != null) {
                message.tips = data.tips;
            }
            if (data.group_cids != null) {
                message.group_cids = data.group_cids;
            }
            return message;
        }
        toObject() {
            const data: {
                worker_id?: number;
                password?: string;
                group_ids?: ReturnType<typeof dependency_5.api.common.SetInt64.prototype.toObject>;
                perm_mask?: number;
                name?: string;
                avatar?: string;
                nimid?: string;
                nimtoken?: string;
                tips?: string;
                group_cids?: number[];
            } = {};
            if (this.worker_id != null) {
                data.worker_id = this.worker_id;
            }
            if (this.password != null) {
                data.password = this.password;
            }
            if (this.group_ids != null) {
                data.group_ids = this.group_ids.toObject();
            }
            if (this.perm_mask != null) {
                data.perm_mask = this.perm_mask;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.avatar != null) {
                data.avatar = this.avatar;
            }
            if (this.nimid != null) {
                data.nimid = this.nimid;
            }
            if (this.nimtoken != null) {
                data.nimtoken = this.nimtoken;
            }
            if (this.tips != null) {
                data.tips = this.tips;
            }
            if (this.group_cids != null) {
                data.group_cids = this.group_cids;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.worker_id != 0)
                writer.writeInt32(1, this.worker_id);
            if (this.has_password)
                writer.writeString(2, this.password);
            if (this.has_group_ids)
                writer.writeMessage(3, this.group_ids, () => this.group_ids.serialize(writer));
            if (this.has_perm_mask)
                writer.writeInt32(5, this.perm_mask);
            if (this.has_name)
                writer.writeString(6, this.name);
            if (this.has_avatar)
                writer.writeString(7, this.avatar);
            if (this.has_nimid)
                writer.writeString(8, this.nimid);
            if (this.has_nimtoken)
                writer.writeString(9, this.nimtoken);
            if (this.has_tips)
                writer.writeString(10, this.tips);
            if (this.group_cids.length)
                writer.writePackedInt64(11, this.group_cids);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WorkerUpdateRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WorkerUpdateRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.worker_id = reader.readInt32();
                        break;
                    case 2:
                        message.password = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.group_ids, () => message.group_ids = dependency_5.api.common.SetInt64.deserialize(reader));
                        break;
                    case 5:
                        message.perm_mask = reader.readInt32();
                        break;
                    case 6:
                        message.name = reader.readString();
                        break;
                    case 7:
                        message.avatar = reader.readString();
                        break;
                    case 8:
                        message.nimid = reader.readString();
                        break;
                    case 9:
                        message.nimtoken = reader.readString();
                        break;
                    case 10:
                        message.tips = reader.readString();
                        break;
                    case 11:
                        message.group_cids = reader.readPackedInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WorkerUpdateRequest {
            return WorkerUpdateRequest.deserialize(bytes);
        }
    }
    export class WorkerSession extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            worker_id?: number;
            session_id?: number;
            connect_state?: dependency_4.api.common.ConnectState;
            online_state?: dependency_4.api.common.OnlineState;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("worker_id" in data && data.worker_id != undefined) {
                    this.worker_id = data.worker_id;
                }
                if ("session_id" in data && data.session_id != undefined) {
                    this.session_id = data.session_id;
                }
                if ("connect_state" in data && data.connect_state != undefined) {
                    this.connect_state = data.connect_state;
                }
                if ("online_state" in data && data.online_state != undefined) {
                    this.online_state = data.online_state;
                }
            }
        }
        get worker_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set worker_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get session_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set session_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get connect_state() {
            return pb_1.Message.getFieldWithDefault(this, 3, dependency_4.api.common.ConnectState.CONNECT_STATE_OFFLINE) as dependency_4.api.common.ConnectState;
        }
        set connect_state(value: dependency_4.api.common.ConnectState) {
            pb_1.Message.setField(this, 3, value);
        }
        get online_state() {
            return pb_1.Message.getFieldWithDefault(this, 4, dependency_4.api.common.OnlineState.ONLINE_STATE_IDLE) as dependency_4.api.common.OnlineState;
        }
        set online_state(value: dependency_4.api.common.OnlineState) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            worker_id?: number;
            session_id?: number;
            connect_state?: dependency_4.api.common.ConnectState;
            online_state?: dependency_4.api.common.OnlineState;
        }): WorkerSession {
            const message = new WorkerSession({});
            if (data.worker_id != null) {
                message.worker_id = data.worker_id;
            }
            if (data.session_id != null) {
                message.session_id = data.session_id;
            }
            if (data.connect_state != null) {
                message.connect_state = data.connect_state;
            }
            if (data.online_state != null) {
                message.online_state = data.online_state;
            }
            return message;
        }
        toObject() {
            const data: {
                worker_id?: number;
                session_id?: number;
                connect_state?: dependency_4.api.common.ConnectState;
                online_state?: dependency_4.api.common.OnlineState;
            } = {};
            if (this.worker_id != null) {
                data.worker_id = this.worker_id;
            }
            if (this.session_id != null) {
                data.session_id = this.session_id;
            }
            if (this.connect_state != null) {
                data.connect_state = this.connect_state;
            }
            if (this.online_state != null) {
                data.online_state = this.online_state;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.worker_id != 0)
                writer.writeInt32(1, this.worker_id);
            if (this.session_id != 0)
                writer.writeInt32(2, this.session_id);
            if (this.connect_state != dependency_4.api.common.ConnectState.CONNECT_STATE_OFFLINE)
                writer.writeEnum(3, this.connect_state);
            if (this.online_state != dependency_4.api.common.OnlineState.ONLINE_STATE_IDLE)
                writer.writeEnum(4, this.online_state);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WorkerSession {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WorkerSession();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.worker_id = reader.readInt32();
                        break;
                    case 2:
                        message.session_id = reader.readInt32();
                        break;
                    case 3:
                        message.connect_state = reader.readEnum();
                        break;
                    case 4:
                        message.online_state = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WorkerSession {
            return WorkerSession.deserialize(bytes);
        }
    }
    export class WorkerDeleteRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            worker_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("worker_id" in data && data.worker_id != undefined) {
                    this.worker_id = data.worker_id;
                }
            }
        }
        get worker_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set worker_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            worker_id?: number;
        }): WorkerDeleteRequest {
            const message = new WorkerDeleteRequest({});
            if (data.worker_id != null) {
                message.worker_id = data.worker_id;
            }
            return message;
        }
        toObject() {
            const data: {
                worker_id?: number;
            } = {};
            if (this.worker_id != null) {
                data.worker_id = this.worker_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.worker_id != 0)
                writer.writeInt32(1, this.worker_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WorkerDeleteRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WorkerDeleteRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.worker_id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WorkerDeleteRequest {
            return WorkerDeleteRequest.deserialize(bytes);
        }
    }
    export class WorkerDisableRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            worker_id?: number;
            disable_status?: dependency_5.api.common.DisableStatus;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("worker_id" in data && data.worker_id != undefined) {
                    this.worker_id = data.worker_id;
                }
                if ("disable_status" in data && data.disable_status != undefined) {
                    this.disable_status = data.disable_status;
                }
            }
        }
        get worker_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set worker_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get disable_status() {
            return pb_1.Message.getFieldWithDefault(this, 2, dependency_5.api.common.DisableStatus.DEFAULT) as dependency_5.api.common.DisableStatus;
        }
        set disable_status(value: dependency_5.api.common.DisableStatus) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            worker_id?: number;
            disable_status?: dependency_5.api.common.DisableStatus;
        }): WorkerDisableRequest {
            const message = new WorkerDisableRequest({});
            if (data.worker_id != null) {
                message.worker_id = data.worker_id;
            }
            if (data.disable_status != null) {
                message.disable_status = data.disable_status;
            }
            return message;
        }
        toObject() {
            const data: {
                worker_id?: number;
                disable_status?: dependency_5.api.common.DisableStatus;
            } = {};
            if (this.worker_id != null) {
                data.worker_id = this.worker_id;
            }
            if (this.disable_status != null) {
                data.disable_status = this.disable_status;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.worker_id != 0)
                writer.writeInt32(1, this.worker_id);
            if (this.disable_status != dependency_5.api.common.DisableStatus.DEFAULT)
                writer.writeEnum(2, this.disable_status);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WorkerDisableRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WorkerDisableRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.worker_id = reader.readInt32();
                        break;
                    case 2:
                        message.disable_status = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WorkerDisableRequest {
            return WorkerDisableRequest.deserialize(bytes);
        }
    }
    export class WorkerTransferRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            chat_id?: number;
            worker_id?: number;
            consult_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("chat_id" in data && data.chat_id != undefined) {
                    this.chat_id = data.chat_id;
                }
                if ("worker_id" in data && data.worker_id != undefined) {
                    this.worker_id = data.worker_id;
                }
                if ("consult_id" in data && data.consult_id != undefined) {
                    this.consult_id = data.consult_id;
                }
            }
        }
        get chat_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set chat_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get worker_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set worker_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get consult_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set consult_id(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            chat_id?: number;
            worker_id?: number;
            consult_id?: number;
        }): WorkerTransferRequest {
            const message = new WorkerTransferRequest({});
            if (data.chat_id != null) {
                message.chat_id = data.chat_id;
            }
            if (data.worker_id != null) {
                message.worker_id = data.worker_id;
            }
            if (data.consult_id != null) {
                message.consult_id = data.consult_id;
            }
            return message;
        }
        toObject() {
            const data: {
                chat_id?: number;
                worker_id?: number;
                consult_id?: number;
            } = {};
            if (this.chat_id != null) {
                data.chat_id = this.chat_id;
            }
            if (this.worker_id != null) {
                data.worker_id = this.worker_id;
            }
            if (this.consult_id != null) {
                data.consult_id = this.consult_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.chat_id != 0)
                writer.writeInt64(1, this.chat_id);
            if (this.worker_id != 0)
                writer.writeInt32(2, this.worker_id);
            if (this.consult_id != 0)
                writer.writeUint32(3, this.consult_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WorkerTransferRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WorkerTransferRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.chat_id = reader.readInt64();
                        break;
                    case 2:
                        message.worker_id = reader.readInt32();
                        break;
                    case 3:
                        message.consult_id = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WorkerTransferRequest {
            return WorkerTransferRequest.deserialize(bytes);
        }
    }
    export class WorkerTransferConsultsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            chat_id?: number;
            groupid?: number[];
            consult_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("chat_id" in data && data.chat_id != undefined) {
                    this.chat_id = data.chat_id;
                }
                if ("groupid" in data && data.groupid != undefined) {
                    this.groupid = data.groupid;
                }
                if ("consult_id" in data && data.consult_id != undefined) {
                    this.consult_id = data.consult_id;
                }
            }
        }
        get chat_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set chat_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get groupid() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as number[];
        }
        set groupid(value: number[]) {
            pb_1.Message.setField(this, 2, value);
        }
        get consult_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set consult_id(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            chat_id?: number;
            groupid?: number[];
            consult_id?: number;
        }): WorkerTransferConsultsRequest {
            const message = new WorkerTransferConsultsRequest({});
            if (data.chat_id != null) {
                message.chat_id = data.chat_id;
            }
            if (data.groupid != null) {
                message.groupid = data.groupid;
            }
            if (data.consult_id != null) {
                message.consult_id = data.consult_id;
            }
            return message;
        }
        toObject() {
            const data: {
                chat_id?: number;
                groupid?: number[];
                consult_id?: number;
            } = {};
            if (this.chat_id != null) {
                data.chat_id = this.chat_id;
            }
            if (this.groupid != null) {
                data.groupid = this.groupid;
            }
            if (this.consult_id != null) {
                data.consult_id = this.consult_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.chat_id != 0)
                writer.writeInt64(1, this.chat_id);
            if (this.groupid.length)
                writer.writePackedInt64(2, this.groupid);
            if (this.consult_id != 0)
                writer.writeUint32(3, this.consult_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WorkerTransferConsultsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WorkerTransferConsultsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.chat_id = reader.readInt64();
                        break;
                    case 2:
                        message.groupid = reader.readPackedInt64();
                        break;
                    case 3:
                        message.consult_id = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WorkerTransferConsultsRequest {
            return WorkerTransferConsultsRequest.deserialize(bytes);
        }
    }
    export class WorkerTransferConsultsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            worker?: dependency_4.api.common.Worker;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("worker" in data && data.worker != undefined) {
                    this.worker = data.worker;
                }
            }
        }
        get worker() {
            return pb_1.Message.getWrapperField(this, dependency_4.api.common.Worker, 1) as dependency_4.api.common.Worker;
        }
        set worker(value: dependency_4.api.common.Worker) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_worker() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            worker?: ReturnType<typeof dependency_4.api.common.Worker.prototype.toObject>;
        }): WorkerTransferConsultsResponse {
            const message = new WorkerTransferConsultsResponse({});
            if (data.worker != null) {
                message.worker = dependency_4.api.common.Worker.fromObject(data.worker);
            }
            return message;
        }
        toObject() {
            const data: {
                worker?: ReturnType<typeof dependency_4.api.common.Worker.prototype.toObject>;
            } = {};
            if (this.worker != null) {
                data.worker = this.worker.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_worker)
                writer.writeMessage(1, this.worker, () => this.worker.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WorkerTransferConsultsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WorkerTransferConsultsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.worker, () => message.worker = dependency_4.api.common.Worker.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WorkerTransferConsultsResponse {
            return WorkerTransferConsultsResponse.deserialize(bytes);
        }
    }
    export class BlacklistApplyRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            chat_id?: number;
            worker_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("chat_id" in data && data.chat_id != undefined) {
                    this.chat_id = data.chat_id;
                }
                if ("worker_id" in data && data.worker_id != undefined) {
                    this.worker_id = data.worker_id;
                }
            }
        }
        get chat_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set chat_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get worker_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set worker_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            chat_id?: number;
            worker_id?: number;
        }): BlacklistApplyRequest {
            const message = new BlacklistApplyRequest({});
            if (data.chat_id != null) {
                message.chat_id = data.chat_id;
            }
            if (data.worker_id != null) {
                message.worker_id = data.worker_id;
            }
            return message;
        }
        toObject() {
            const data: {
                chat_id?: number;
                worker_id?: number;
            } = {};
            if (this.chat_id != null) {
                data.chat_id = this.chat_id;
            }
            if (this.worker_id != null) {
                data.worker_id = this.worker_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.chat_id != 0)
                writer.writeInt64(1, this.chat_id);
            if (this.worker_id != 0)
                writer.writeInt32(2, this.worker_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BlacklistApplyRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BlacklistApplyRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.chat_id = reader.readInt64();
                        break;
                    case 2:
                        message.worker_id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BlacklistApplyRequest {
            return BlacklistApplyRequest.deserialize(bytes);
        }
    }
    export class BlacklistConfirmRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            chat_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("chat_id" in data && data.chat_id != undefined) {
                    this.chat_id = data.chat_id;
                }
            }
        }
        get chat_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set chat_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            chat_id?: number;
        }): BlacklistConfirmRequest {
            const message = new BlacklistConfirmRequest({});
            if (data.chat_id != null) {
                message.chat_id = data.chat_id;
            }
            return message;
        }
        toObject() {
            const data: {
                chat_id?: number;
            } = {};
            if (this.chat_id != null) {
                data.chat_id = this.chat_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.chat_id != 0)
                writer.writeInt64(1, this.chat_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BlacklistConfirmRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BlacklistConfirmRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.chat_id = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BlacklistConfirmRequest {
            return BlacklistConfirmRequest.deserialize(bytes);
        }
    }
    export class BlacklistRecoverRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            chat_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("chat_id" in data && data.chat_id != undefined) {
                    this.chat_id = data.chat_id;
                }
            }
        }
        get chat_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set chat_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            chat_id?: number;
        }): BlacklistRecoverRequest {
            const message = new BlacklistRecoverRequest({});
            if (data.chat_id != null) {
                message.chat_id = data.chat_id;
            }
            return message;
        }
        toObject() {
            const data: {
                chat_id?: number;
            } = {};
            if (this.chat_id != null) {
                data.chat_id = this.chat_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.chat_id != 0)
                writer.writeInt64(1, this.chat_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BlacklistRecoverRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BlacklistRecoverRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.chat_id = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BlacklistRecoverRequest {
            return BlacklistRecoverRequest.deserialize(bytes);
        }
    }
    export class CheckWorkerStatusResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            worker?: dependency_4.api.common.Worker;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("worker" in data && data.worker != undefined) {
                    this.worker = data.worker;
                }
            }
        }
        get worker() {
            return pb_1.Message.getWrapperField(this, dependency_4.api.common.Worker, 1) as dependency_4.api.common.Worker;
        }
        set worker(value: dependency_4.api.common.Worker) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_worker() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            worker?: ReturnType<typeof dependency_4.api.common.Worker.prototype.toObject>;
        }): CheckWorkerStatusResponse {
            const message = new CheckWorkerStatusResponse({});
            if (data.worker != null) {
                message.worker = dependency_4.api.common.Worker.fromObject(data.worker);
            }
            return message;
        }
        toObject() {
            const data: {
                worker?: ReturnType<typeof dependency_4.api.common.Worker.prototype.toObject>;
            } = {};
            if (this.worker != null) {
                data.worker = this.worker.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_worker)
                writer.writeMessage(1, this.worker, () => this.worker.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CheckWorkerStatusResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CheckWorkerStatusResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.worker, () => message.worker = dependency_4.api.common.Worker.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CheckWorkerStatusResponse {
            return CheckWorkerStatusResponse.deserialize(bytes);
        }
    }
    export class CheckWorkerStatusRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            consult_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("consult_id" in data && data.consult_id != undefined) {
                    this.consult_id = data.consult_id;
                }
            }
        }
        get consult_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set consult_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            consult_id?: number;
        }): CheckWorkerStatusRequest {
            const message = new CheckWorkerStatusRequest({});
            if (data.consult_id != null) {
                message.consult_id = data.consult_id;
            }
            return message;
        }
        toObject() {
            const data: {
                consult_id?: number;
            } = {};
            if (this.consult_id != null) {
                data.consult_id = this.consult_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.consult_id != 0)
                writer.writeUint32(1, this.consult_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CheckWorkerStatusRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CheckWorkerStatusRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.consult_id = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CheckWorkerStatusRequest {
            return CheckWorkerStatusRequest.deserialize(bytes);
        }
    }
    export class GetWorkerStatusRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[2], [3]];
        constructor(data?: any[] | ({
            worker_id?: number;
        } & (({
            connect_state?: dependency_4.api.common.ConnectState;
        }) | ({
            online_state?: dependency_4.api.common.OnlineState;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("worker_id" in data && data.worker_id != undefined) {
                    this.worker_id = data.worker_id;
                }
                if ("connect_state" in data && data.connect_state != undefined) {
                    this.connect_state = data.connect_state;
                }
                if ("online_state" in data && data.online_state != undefined) {
                    this.online_state = data.online_state;
                }
            }
        }
        get worker_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set worker_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get connect_state() {
            return pb_1.Message.getFieldWithDefault(this, 2, dependency_4.api.common.ConnectState.CONNECT_STATE_OFFLINE) as dependency_4.api.common.ConnectState;
        }
        set connect_state(value: dependency_4.api.common.ConnectState) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
        }
        get has_connect_state() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get online_state() {
            return pb_1.Message.getFieldWithDefault(this, 3, dependency_4.api.common.OnlineState.ONLINE_STATE_IDLE) as dependency_4.api.common.OnlineState;
        }
        set online_state(value: dependency_4.api.common.OnlineState) {
            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[1], value);
        }
        get has_online_state() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get _connect_state() {
            const cases: {
                [index: number]: "none" | "connect_state";
            } = {
                0: "none",
                2: "connect_state"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        get _online_state() {
            const cases: {
                [index: number]: "none" | "online_state";
            } = {
                0: "none",
                3: "online_state"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3])];
        }
        static fromObject(data: {
            worker_id?: number;
            connect_state?: dependency_4.api.common.ConnectState;
            online_state?: dependency_4.api.common.OnlineState;
        }): GetWorkerStatusRequest {
            const message = new GetWorkerStatusRequest({});
            if (data.worker_id != null) {
                message.worker_id = data.worker_id;
            }
            if (data.connect_state != null) {
                message.connect_state = data.connect_state;
            }
            if (data.online_state != null) {
                message.online_state = data.online_state;
            }
            return message;
        }
        toObject() {
            const data: {
                worker_id?: number;
                connect_state?: dependency_4.api.common.ConnectState;
                online_state?: dependency_4.api.common.OnlineState;
            } = {};
            if (this.worker_id != null) {
                data.worker_id = this.worker_id;
            }
            if (this.connect_state != null) {
                data.connect_state = this.connect_state;
            }
            if (this.online_state != null) {
                data.online_state = this.online_state;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.worker_id != 0)
                writer.writeInt32(1, this.worker_id);
            if (this.has_connect_state)
                writer.writeEnum(2, this.connect_state);
            if (this.has_online_state)
                writer.writeEnum(3, this.online_state);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetWorkerStatusRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetWorkerStatusRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.worker_id = reader.readInt32();
                        break;
                    case 2:
                        message.connect_state = reader.readEnum();
                        break;
                    case 3:
                        message.online_state = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetWorkerStatusRequest {
            return GetWorkerStatusRequest.deserialize(bytes);
        }
    }
    export class GetWorkerStatusResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            worker_session?: WorkerSession[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("worker_session" in data && data.worker_session != undefined) {
                    this.worker_session = data.worker_session;
                }
            }
        }
        get worker_session() {
            return pb_1.Message.getRepeatedWrapperField(this, WorkerSession, 1) as WorkerSession[];
        }
        set worker_session(value: WorkerSession[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            worker_session?: ReturnType<typeof WorkerSession.prototype.toObject>[];
        }): GetWorkerStatusResponse {
            const message = new GetWorkerStatusResponse({});
            if (data.worker_session != null) {
                message.worker_session = data.worker_session.map(item => WorkerSession.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                worker_session?: ReturnType<typeof WorkerSession.prototype.toObject>[];
            } = {};
            if (this.worker_session != null) {
                data.worker_session = this.worker_session.map((item: WorkerSession) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.worker_session.length)
                writer.writeRepeatedMessage(1, this.worker_session, (item: WorkerSession) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetWorkerStatusResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetWorkerStatusResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.worker_session, () => pb_1.Message.addToRepeatedWrapperField(message, 1, WorkerSession.deserialize(reader), WorkerSession));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetWorkerStatusResponse {
            return GetWorkerStatusResponse.deserialize(bytes);
        }
    }
    export class SetWorkerStatusRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            online_state?: dependency_4.api.common.OnlineState;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("online_state" in data && data.online_state != undefined) {
                    this.online_state = data.online_state;
                }
            }
        }
        get online_state() {
            return pb_1.Message.getFieldWithDefault(this, 1, dependency_4.api.common.OnlineState.ONLINE_STATE_IDLE) as dependency_4.api.common.OnlineState;
        }
        set online_state(value: dependency_4.api.common.OnlineState) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            online_state?: dependency_4.api.common.OnlineState;
        }): SetWorkerStatusRequest {
            const message = new SetWorkerStatusRequest({});
            if (data.online_state != null) {
                message.online_state = data.online_state;
            }
            return message;
        }
        toObject() {
            const data: {
                online_state?: dependency_4.api.common.OnlineState;
            } = {};
            if (this.online_state != null) {
                data.online_state = this.online_state;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.online_state != dependency_4.api.common.OnlineState.ONLINE_STATE_IDLE)
                writer.writeEnum(1, this.online_state);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetWorkerStatusRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetWorkerStatusRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.online_state = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetWorkerStatusRequest {
            return SetWorkerStatusRequest.deserialize(bytes);
        }
    }
    export class ApplyWorkerStateRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            apply_state?: dependency_4.api.common.OnlineState;
            now_state?: dependency_4.api.common.OnlineState;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("apply_state" in data && data.apply_state != undefined) {
                    this.apply_state = data.apply_state;
                }
                if ("now_state" in data && data.now_state != undefined) {
                    this.now_state = data.now_state;
                }
            }
        }
        get apply_state() {
            return pb_1.Message.getFieldWithDefault(this, 1, dependency_4.api.common.OnlineState.ONLINE_STATE_IDLE) as dependency_4.api.common.OnlineState;
        }
        set apply_state(value: dependency_4.api.common.OnlineState) {
            pb_1.Message.setField(this, 1, value);
        }
        get now_state() {
            return pb_1.Message.getFieldWithDefault(this, 2, dependency_4.api.common.OnlineState.ONLINE_STATE_IDLE) as dependency_4.api.common.OnlineState;
        }
        set now_state(value: dependency_4.api.common.OnlineState) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            apply_state?: dependency_4.api.common.OnlineState;
            now_state?: dependency_4.api.common.OnlineState;
        }): ApplyWorkerStateRequest {
            const message = new ApplyWorkerStateRequest({});
            if (data.apply_state != null) {
                message.apply_state = data.apply_state;
            }
            if (data.now_state != null) {
                message.now_state = data.now_state;
            }
            return message;
        }
        toObject() {
            const data: {
                apply_state?: dependency_4.api.common.OnlineState;
                now_state?: dependency_4.api.common.OnlineState;
            } = {};
            if (this.apply_state != null) {
                data.apply_state = this.apply_state;
            }
            if (this.now_state != null) {
                data.now_state = this.now_state;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.apply_state != dependency_4.api.common.OnlineState.ONLINE_STATE_IDLE)
                writer.writeEnum(1, this.apply_state);
            if (this.now_state != dependency_4.api.common.OnlineState.ONLINE_STATE_IDLE)
                writer.writeEnum(2, this.now_state);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ApplyWorkerStateRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ApplyWorkerStateRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.apply_state = reader.readEnum();
                        break;
                    case 2:
                        message.now_state = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ApplyWorkerStateRequest {
            return ApplyWorkerStateRequest.deserialize(bytes);
        }
    }
    export class WorkerTransferResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            worker?: dependency_4.api.common.Worker;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("worker" in data && data.worker != undefined) {
                    this.worker = data.worker;
                }
            }
        }
        get worker() {
            return pb_1.Message.getWrapperField(this, dependency_4.api.common.Worker, 1) as dependency_4.api.common.Worker;
        }
        set worker(value: dependency_4.api.common.Worker) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_worker() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            worker?: ReturnType<typeof dependency_4.api.common.Worker.prototype.toObject>;
        }): WorkerTransferResponse {
            const message = new WorkerTransferResponse({});
            if (data.worker != null) {
                message.worker = dependency_4.api.common.Worker.fromObject(data.worker);
            }
            return message;
        }
        toObject() {
            const data: {
                worker?: ReturnType<typeof dependency_4.api.common.Worker.prototype.toObject>;
            } = {};
            if (this.worker != null) {
                data.worker = this.worker.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_worker)
                writer.writeMessage(1, this.worker, () => this.worker.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WorkerTransferResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WorkerTransferResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.worker, () => message.worker = dependency_4.api.common.Worker.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WorkerTransferResponse {
            return WorkerTransferResponse.deserialize(bytes);
        }
    }
    export class PasswordRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            old_password?: string;
            new_password?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("old_password" in data && data.old_password != undefined) {
                    this.old_password = data.old_password;
                }
                if ("new_password" in data && data.new_password != undefined) {
                    this.new_password = data.new_password;
                }
            }
        }
        get old_password() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set old_password(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get new_password() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set new_password(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            old_password?: string;
            new_password?: string;
        }): PasswordRequest {
            const message = new PasswordRequest({});
            if (data.old_password != null) {
                message.old_password = data.old_password;
            }
            if (data.new_password != null) {
                message.new_password = data.new_password;
            }
            return message;
        }
        toObject() {
            const data: {
                old_password?: string;
                new_password?: string;
            } = {};
            if (this.old_password != null) {
                data.old_password = this.old_password;
            }
            if (this.new_password != null) {
                data.new_password = this.new_password;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.old_password.length)
                writer.writeString(1, this.old_password);
            if (this.new_password.length)
                writer.writeString(2, this.new_password);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PasswordRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PasswordRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.old_password = reader.readString();
                        break;
                    case 2:
                        message.new_password = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PasswordRequest {
            return PasswordRequest.deserialize(bytes);
        }
    }
    export class QueryFronterRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[1]];
        constructor(data?: any[] | ({
            batch?: dependency_5.api.common.Batch;
        } & (({
            name?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("batch" in data && data.batch != undefined) {
                    this.batch = data.batch;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_name() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get batch() {
            return pb_1.Message.getWrapperField(this, dependency_5.api.common.Batch, 2) as dependency_5.api.common.Batch;
        }
        set batch(value: dependency_5.api.common.Batch) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_batch() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get _name() {
            const cases: {
                [index: number]: "none" | "name";
            } = {
                0: "none",
                1: "name"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1])];
        }
        static fromObject(data: {
            name?: string;
            batch?: ReturnType<typeof dependency_5.api.common.Batch.prototype.toObject>;
        }): QueryFronterRequest {
            const message = new QueryFronterRequest({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.batch != null) {
                message.batch = dependency_5.api.common.Batch.fromObject(data.batch);
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                batch?: ReturnType<typeof dependency_5.api.common.Batch.prototype.toObject>;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.batch != null) {
                data.batch = this.batch.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_name)
                writer.writeString(1, this.name);
            if (this.has_batch)
                writer.writeMessage(2, this.batch, () => this.batch.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryFronterRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryFronterRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.batch, () => message.batch = dependency_5.api.common.Batch.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryFronterRequest {
            return QueryFronterRequest.deserialize(bytes);
        }
    }
    export class QueryFronterResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            items?: QueryFronterItem[];
            total?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("items" in data && data.items != undefined) {
                    this.items = data.items;
                }
                if ("total" in data && data.total != undefined) {
                    this.total = data.total;
                }
            }
        }
        get items() {
            return pb_1.Message.getRepeatedWrapperField(this, QueryFronterItem, 1) as QueryFronterItem[];
        }
        set items(value: QueryFronterItem[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get total() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set total(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            items?: ReturnType<typeof QueryFronterItem.prototype.toObject>[];
            total?: number;
        }): QueryFronterResponse {
            const message = new QueryFronterResponse({});
            if (data.items != null) {
                message.items = data.items.map(item => QueryFronterItem.fromObject(item));
            }
            if (data.total != null) {
                message.total = data.total;
            }
            return message;
        }
        toObject() {
            const data: {
                items?: ReturnType<typeof QueryFronterItem.prototype.toObject>[];
                total?: number;
            } = {};
            if (this.items != null) {
                data.items = this.items.map((item: QueryFronterItem) => item.toObject());
            }
            if (this.total != null) {
                data.total = this.total;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.items.length)
                writer.writeRepeatedMessage(1, this.items, (item: QueryFronterItem) => item.serialize(writer));
            if (this.total != 0)
                writer.writeInt32(2, this.total);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryFronterResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryFronterResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.items, () => pb_1.Message.addToRepeatedWrapperField(message, 1, QueryFronterItem.deserialize(reader), QueryFronterItem));
                        break;
                    case 2:
                        message.total = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryFronterResponse {
            return QueryFronterResponse.deserialize(bytes);
        }
    }
    export class QueryFronterItem extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            account?: string;
            group?: string[];
            isManager?: boolean;
            worker_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("account" in data && data.account != undefined) {
                    this.account = data.account;
                }
                if ("group" in data && data.group != undefined) {
                    this.group = data.group;
                }
                if ("isManager" in data && data.isManager != undefined) {
                    this.isManager = data.isManager;
                }
                if ("worker_id" in data && data.worker_id != undefined) {
                    this.worker_id = data.worker_id;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get account() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set account(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get group() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as string[];
        }
        set group(value: string[]) {
            pb_1.Message.setField(this, 3, value);
        }
        get isManager() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set isManager(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        get worker_id() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set worker_id(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            name?: string;
            account?: string;
            group?: string[];
            isManager?: boolean;
            worker_id?: number;
        }): QueryFronterItem {
            const message = new QueryFronterItem({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.account != null) {
                message.account = data.account;
            }
            if (data.group != null) {
                message.group = data.group;
            }
            if (data.isManager != null) {
                message.isManager = data.isManager;
            }
            if (data.worker_id != null) {
                message.worker_id = data.worker_id;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                account?: string;
                group?: string[];
                isManager?: boolean;
                worker_id?: number;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.account != null) {
                data.account = this.account;
            }
            if (this.group != null) {
                data.group = this.group;
            }
            if (this.isManager != null) {
                data.isManager = this.isManager;
            }
            if (this.worker_id != null) {
                data.worker_id = this.worker_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.account.length)
                writer.writeString(2, this.account);
            if (this.group.length)
                writer.writeRepeatedString(3, this.group);
            if (this.isManager != false)
                writer.writeBool(4, this.isManager);
            if (this.worker_id != 0)
                writer.writeInt32(5, this.worker_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryFronterItem {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryFronterItem();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.account = reader.readString();
                        break;
                    case 3:
                        pb_1.Message.addToRepeatedField(message, 3, reader.readString());
                        break;
                    case 4:
                        message.isManager = reader.readBool();
                        break;
                    case 5:
                        message.worker_id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryFronterItem {
            return QueryFronterItem.deserialize(bytes);
        }
    }
    export class DataQueryRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[1], [2], [4]];
        constructor(data?: any[] | ({
            group_id?: number[];
            page?: dependency_5.api.common.Page;
        } & (({
            start_time?: string;
        }) | ({
            end_time?: string;
        }) | ({
            worker_identity?: dependency_4.api.common.WorkerPermission;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("start_time" in data && data.start_time != undefined) {
                    this.start_time = data.start_time;
                }
                if ("end_time" in data && data.end_time != undefined) {
                    this.end_time = data.end_time;
                }
                if ("group_id" in data && data.group_id != undefined) {
                    this.group_id = data.group_id;
                }
                if ("worker_identity" in data && data.worker_identity != undefined) {
                    this.worker_identity = data.worker_identity;
                }
                if ("page" in data && data.page != undefined) {
                    this.page = data.page;
                }
            }
        }
        get start_time() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set start_time(value: string) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_start_time() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get end_time() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set end_time(value: string) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[1], value);
        }
        get has_end_time() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get group_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as number[];
        }
        set group_id(value: number[]) {
            pb_1.Message.setField(this, 3, value);
        }
        get worker_identity() {
            return pb_1.Message.getFieldWithDefault(this, 4, dependency_4.api.common.WorkerPermission.WORKER_PERM_NONE) as dependency_4.api.common.WorkerPermission;
        }
        set worker_identity(value: dependency_4.api.common.WorkerPermission) {
            pb_1.Message.setOneofField(this, 4, this.#one_of_decls[2], value);
        }
        get has_worker_identity() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get page() {
            return pb_1.Message.getWrapperField(this, dependency_5.api.common.Page, 5) as dependency_5.api.common.Page;
        }
        set page(value: dependency_5.api.common.Page) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_page() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get _start_time() {
            const cases: {
                [index: number]: "none" | "start_time";
            } = {
                0: "none",
                1: "start_time"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1])];
        }
        get _end_time() {
            const cases: {
                [index: number]: "none" | "end_time";
            } = {
                0: "none",
                2: "end_time"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        get _worker_identity() {
            const cases: {
                [index: number]: "none" | "worker_identity";
            } = {
                0: "none",
                4: "worker_identity"
            };
            return cases[pb_1.Message.computeOneofCase(this, [4])];
        }
        static fromObject(data: {
            start_time?: string;
            end_time?: string;
            group_id?: number[];
            worker_identity?: dependency_4.api.common.WorkerPermission;
            page?: ReturnType<typeof dependency_5.api.common.Page.prototype.toObject>;
        }): DataQueryRequest {
            const message = new DataQueryRequest({});
            if (data.start_time != null) {
                message.start_time = data.start_time;
            }
            if (data.end_time != null) {
                message.end_time = data.end_time;
            }
            if (data.group_id != null) {
                message.group_id = data.group_id;
            }
            if (data.worker_identity != null) {
                message.worker_identity = data.worker_identity;
            }
            if (data.page != null) {
                message.page = dependency_5.api.common.Page.fromObject(data.page);
            }
            return message;
        }
        toObject() {
            const data: {
                start_time?: string;
                end_time?: string;
                group_id?: number[];
                worker_identity?: dependency_4.api.common.WorkerPermission;
                page?: ReturnType<typeof dependency_5.api.common.Page.prototype.toObject>;
            } = {};
            if (this.start_time != null) {
                data.start_time = this.start_time;
            }
            if (this.end_time != null) {
                data.end_time = this.end_time;
            }
            if (this.group_id != null) {
                data.group_id = this.group_id;
            }
            if (this.worker_identity != null) {
                data.worker_identity = this.worker_identity;
            }
            if (this.page != null) {
                data.page = this.page.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_start_time)
                writer.writeString(1, this.start_time);
            if (this.has_end_time)
                writer.writeString(2, this.end_time);
            if (this.group_id.length)
                writer.writePackedInt32(3, this.group_id);
            if (this.has_worker_identity)
                writer.writeEnum(4, this.worker_identity);
            if (this.has_page)
                writer.writeMessage(5, this.page, () => this.page.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DataQueryRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DataQueryRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.start_time = reader.readString();
                        break;
                    case 2:
                        message.end_time = reader.readString();
                        break;
                    case 3:
                        message.group_id = reader.readPackedInt32();
                        break;
                    case 4:
                        message.worker_identity = reader.readEnum();
                        break;
                    case 5:
                        reader.readMessage(message.page, () => message.page = dependency_5.api.common.Page.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DataQueryRequest {
            return DataQueryRequest.deserialize(bytes);
        }
    }
    export class DataQueryResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            item?: DataQueryItem[];
            total?: number;
            count_player?: number;
            three_rate?: number;
            response_time?: number;
            server_time?: number;
            count_online_time?: number;
            accepted_num?: number;
            transfer_task?: number;
            workerLimit?: number;
            currentWorkers?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("item" in data && data.item != undefined) {
                    this.item = data.item;
                }
                if ("total" in data && data.total != undefined) {
                    this.total = data.total;
                }
                if ("count_player" in data && data.count_player != undefined) {
                    this.count_player = data.count_player;
                }
                if ("three_rate" in data && data.three_rate != undefined) {
                    this.three_rate = data.three_rate;
                }
                if ("response_time" in data && data.response_time != undefined) {
                    this.response_time = data.response_time;
                }
                if ("server_time" in data && data.server_time != undefined) {
                    this.server_time = data.server_time;
                }
                if ("count_online_time" in data && data.count_online_time != undefined) {
                    this.count_online_time = data.count_online_time;
                }
                if ("accepted_num" in data && data.accepted_num != undefined) {
                    this.accepted_num = data.accepted_num;
                }
                if ("transfer_task" in data && data.transfer_task != undefined) {
                    this.transfer_task = data.transfer_task;
                }
                if ("workerLimit" in data && data.workerLimit != undefined) {
                    this.workerLimit = data.workerLimit;
                }
                if ("currentWorkers" in data && data.currentWorkers != undefined) {
                    this.currentWorkers = data.currentWorkers;
                }
            }
        }
        get item() {
            return pb_1.Message.getRepeatedWrapperField(this, DataQueryItem, 1) as DataQueryItem[];
        }
        set item(value: DataQueryItem[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get total() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set total(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get count_player() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set count_player(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get three_rate() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set three_rate(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get response_time() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set response_time(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get server_time() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set server_time(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get count_online_time() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set count_online_time(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get accepted_num() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set accepted_num(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get transfer_task() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set transfer_task(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get workerLimit() {
            return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
        }
        set workerLimit(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        get currentWorkers() {
            return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
        }
        set currentWorkers(value: number) {
            pb_1.Message.setField(this, 11, value);
        }
        static fromObject(data: {
            item?: ReturnType<typeof DataQueryItem.prototype.toObject>[];
            total?: number;
            count_player?: number;
            three_rate?: number;
            response_time?: number;
            server_time?: number;
            count_online_time?: number;
            accepted_num?: number;
            transfer_task?: number;
            workerLimit?: number;
            currentWorkers?: number;
        }): DataQueryResponse {
            const message = new DataQueryResponse({});
            if (data.item != null) {
                message.item = data.item.map(item => DataQueryItem.fromObject(item));
            }
            if (data.total != null) {
                message.total = data.total;
            }
            if (data.count_player != null) {
                message.count_player = data.count_player;
            }
            if (data.three_rate != null) {
                message.three_rate = data.three_rate;
            }
            if (data.response_time != null) {
                message.response_time = data.response_time;
            }
            if (data.server_time != null) {
                message.server_time = data.server_time;
            }
            if (data.count_online_time != null) {
                message.count_online_time = data.count_online_time;
            }
            if (data.accepted_num != null) {
                message.accepted_num = data.accepted_num;
            }
            if (data.transfer_task != null) {
                message.transfer_task = data.transfer_task;
            }
            if (data.workerLimit != null) {
                message.workerLimit = data.workerLimit;
            }
            if (data.currentWorkers != null) {
                message.currentWorkers = data.currentWorkers;
            }
            return message;
        }
        toObject() {
            const data: {
                item?: ReturnType<typeof DataQueryItem.prototype.toObject>[];
                total?: number;
                count_player?: number;
                three_rate?: number;
                response_time?: number;
                server_time?: number;
                count_online_time?: number;
                accepted_num?: number;
                transfer_task?: number;
                workerLimit?: number;
                currentWorkers?: number;
            } = {};
            if (this.item != null) {
                data.item = this.item.map((item: DataQueryItem) => item.toObject());
            }
            if (this.total != null) {
                data.total = this.total;
            }
            if (this.count_player != null) {
                data.count_player = this.count_player;
            }
            if (this.three_rate != null) {
                data.three_rate = this.three_rate;
            }
            if (this.response_time != null) {
                data.response_time = this.response_time;
            }
            if (this.server_time != null) {
                data.server_time = this.server_time;
            }
            if (this.count_online_time != null) {
                data.count_online_time = this.count_online_time;
            }
            if (this.accepted_num != null) {
                data.accepted_num = this.accepted_num;
            }
            if (this.transfer_task != null) {
                data.transfer_task = this.transfer_task;
            }
            if (this.workerLimit != null) {
                data.workerLimit = this.workerLimit;
            }
            if (this.currentWorkers != null) {
                data.currentWorkers = this.currentWorkers;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.item.length)
                writer.writeRepeatedMessage(1, this.item, (item: DataQueryItem) => item.serialize(writer));
            if (this.total != 0)
                writer.writeInt32(2, this.total);
            if (this.count_player != 0)
                writer.writeInt32(3, this.count_player);
            if (this.three_rate != 0)
                writer.writeFloat(4, this.three_rate);
            if (this.response_time != 0)
                writer.writeFloat(5, this.response_time);
            if (this.server_time != 0)
                writer.writeFloat(6, this.server_time);
            if (this.count_online_time != 0)
                writer.writeFloat(7, this.count_online_time);
            if (this.accepted_num != 0)
                writer.writeInt32(8, this.accepted_num);
            if (this.transfer_task != 0)
                writer.writeInt32(9, this.transfer_task);
            if (this.workerLimit != 0)
                writer.writeInt32(10, this.workerLimit);
            if (this.currentWorkers != 0)
                writer.writeInt32(11, this.currentWorkers);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DataQueryResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DataQueryResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.item, () => pb_1.Message.addToRepeatedWrapperField(message, 1, DataQueryItem.deserialize(reader), DataQueryItem));
                        break;
                    case 2:
                        message.total = reader.readInt32();
                        break;
                    case 3:
                        message.count_player = reader.readInt32();
                        break;
                    case 4:
                        message.three_rate = reader.readFloat();
                        break;
                    case 5:
                        message.response_time = reader.readFloat();
                        break;
                    case 6:
                        message.server_time = reader.readFloat();
                        break;
                    case 7:
                        message.count_online_time = reader.readFloat();
                        break;
                    case 8:
                        message.accepted_num = reader.readInt32();
                        break;
                    case 9:
                        message.transfer_task = reader.readInt32();
                        break;
                    case 10:
                        message.workerLimit = reader.readInt32();
                        break;
                    case 11:
                        message.currentWorkers = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DataQueryResponse {
            return DataQueryResponse.deserialize(bytes);
        }
    }
    export class DataQueryItem extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            match_num?: number;
            three_response_rate?: string;
            switching_task?: number;
            accept_assignment?: number;
            corresponding_time?: number;
            belong_group?: string[];
            first_line?: boolean;
            is_manager?: boolean;
            average_time?: number;
            accumulated_online_duration?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [7], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("match_num" in data && data.match_num != undefined) {
                    this.match_num = data.match_num;
                }
                if ("three_response_rate" in data && data.three_response_rate != undefined) {
                    this.three_response_rate = data.three_response_rate;
                }
                if ("switching_task" in data && data.switching_task != undefined) {
                    this.switching_task = data.switching_task;
                }
                if ("accept_assignment" in data && data.accept_assignment != undefined) {
                    this.accept_assignment = data.accept_assignment;
                }
                if ("corresponding_time" in data && data.corresponding_time != undefined) {
                    this.corresponding_time = data.corresponding_time;
                }
                if ("belong_group" in data && data.belong_group != undefined) {
                    this.belong_group = data.belong_group;
                }
                if ("first_line" in data && data.first_line != undefined) {
                    this.first_line = data.first_line;
                }
                if ("is_manager" in data && data.is_manager != undefined) {
                    this.is_manager = data.is_manager;
                }
                if ("average_time" in data && data.average_time != undefined) {
                    this.average_time = data.average_time;
                }
                if ("accumulated_online_duration" in data && data.accumulated_online_duration != undefined) {
                    this.accumulated_online_duration = data.accumulated_online_duration;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get match_num() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set match_num(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get three_response_rate() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set three_response_rate(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get switching_task() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set switching_task(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get accept_assignment() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set accept_assignment(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get corresponding_time() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set corresponding_time(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get belong_group() {
            return pb_1.Message.getFieldWithDefault(this, 7, []) as string[];
        }
        set belong_group(value: string[]) {
            pb_1.Message.setField(this, 7, value);
        }
        get first_line() {
            return pb_1.Message.getFieldWithDefault(this, 8, false) as boolean;
        }
        set first_line(value: boolean) {
            pb_1.Message.setField(this, 8, value);
        }
        get is_manager() {
            return pb_1.Message.getFieldWithDefault(this, 9, false) as boolean;
        }
        set is_manager(value: boolean) {
            pb_1.Message.setField(this, 9, value);
        }
        get average_time() {
            return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
        }
        set average_time(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        get accumulated_online_duration() {
            return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
        }
        set accumulated_online_duration(value: number) {
            pb_1.Message.setField(this, 11, value);
        }
        static fromObject(data: {
            name?: string;
            match_num?: number;
            three_response_rate?: string;
            switching_task?: number;
            accept_assignment?: number;
            corresponding_time?: number;
            belong_group?: string[];
            first_line?: boolean;
            is_manager?: boolean;
            average_time?: number;
            accumulated_online_duration?: number;
        }): DataQueryItem {
            const message = new DataQueryItem({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.match_num != null) {
                message.match_num = data.match_num;
            }
            if (data.three_response_rate != null) {
                message.three_response_rate = data.three_response_rate;
            }
            if (data.switching_task != null) {
                message.switching_task = data.switching_task;
            }
            if (data.accept_assignment != null) {
                message.accept_assignment = data.accept_assignment;
            }
            if (data.corresponding_time != null) {
                message.corresponding_time = data.corresponding_time;
            }
            if (data.belong_group != null) {
                message.belong_group = data.belong_group;
            }
            if (data.first_line != null) {
                message.first_line = data.first_line;
            }
            if (data.is_manager != null) {
                message.is_manager = data.is_manager;
            }
            if (data.average_time != null) {
                message.average_time = data.average_time;
            }
            if (data.accumulated_online_duration != null) {
                message.accumulated_online_duration = data.accumulated_online_duration;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                match_num?: number;
                three_response_rate?: string;
                switching_task?: number;
                accept_assignment?: number;
                corresponding_time?: number;
                belong_group?: string[];
                first_line?: boolean;
                is_manager?: boolean;
                average_time?: number;
                accumulated_online_duration?: number;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.match_num != null) {
                data.match_num = this.match_num;
            }
            if (this.three_response_rate != null) {
                data.three_response_rate = this.three_response_rate;
            }
            if (this.switching_task != null) {
                data.switching_task = this.switching_task;
            }
            if (this.accept_assignment != null) {
                data.accept_assignment = this.accept_assignment;
            }
            if (this.corresponding_time != null) {
                data.corresponding_time = this.corresponding_time;
            }
            if (this.belong_group != null) {
                data.belong_group = this.belong_group;
            }
            if (this.first_line != null) {
                data.first_line = this.first_line;
            }
            if (this.is_manager != null) {
                data.is_manager = this.is_manager;
            }
            if (this.average_time != null) {
                data.average_time = this.average_time;
            }
            if (this.accumulated_online_duration != null) {
                data.accumulated_online_duration = this.accumulated_online_duration;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.match_num != 0)
                writer.writeInt32(2, this.match_num);
            if (this.three_response_rate.length)
                writer.writeString(3, this.three_response_rate);
            if (this.switching_task != 0)
                writer.writeInt32(4, this.switching_task);
            if (this.accept_assignment != 0)
                writer.writeInt32(5, this.accept_assignment);
            if (this.corresponding_time != 0)
                writer.writeFloat(6, this.corresponding_time);
            if (this.belong_group.length)
                writer.writeRepeatedString(7, this.belong_group);
            if (this.first_line != false)
                writer.writeBool(8, this.first_line);
            if (this.is_manager != false)
                writer.writeBool(9, this.is_manager);
            if (this.average_time != 0)
                writer.writeFloat(10, this.average_time);
            if (this.accumulated_online_duration != 0)
                writer.writeFloat(11, this.accumulated_online_duration);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DataQueryItem {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DataQueryItem();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.match_num = reader.readInt32();
                        break;
                    case 3:
                        message.three_response_rate = reader.readString();
                        break;
                    case 4:
                        message.switching_task = reader.readInt32();
                        break;
                    case 5:
                        message.accept_assignment = reader.readInt32();
                        break;
                    case 6:
                        message.corresponding_time = reader.readFloat();
                        break;
                    case 7:
                        pb_1.Message.addToRepeatedField(message, 7, reader.readString());
                        break;
                    case 8:
                        message.first_line = reader.readBool();
                        break;
                    case 9:
                        message.is_manager = reader.readBool();
                        break;
                    case 10:
                        message.average_time = reader.readFloat();
                        break;
                    case 11:
                        message.accumulated_online_duration = reader.readFloat();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DataQueryItem {
            return DataQueryItem.deserialize(bytes);
        }
    }
    export class QuerySpecPermWorkerRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            perm?: dependency_4.api.common.WorkerPermission;
            chat_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("perm" in data && data.perm != undefined) {
                    this.perm = data.perm;
                }
                if ("chat_id" in data && data.chat_id != undefined) {
                    this.chat_id = data.chat_id;
                }
            }
        }
        get perm() {
            return pb_1.Message.getFieldWithDefault(this, 1, dependency_4.api.common.WorkerPermission.WORKER_PERM_NONE) as dependency_4.api.common.WorkerPermission;
        }
        set perm(value: dependency_4.api.common.WorkerPermission) {
            pb_1.Message.setField(this, 1, value);
        }
        get chat_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set chat_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            perm?: dependency_4.api.common.WorkerPermission;
            chat_id?: number;
        }): QuerySpecPermWorkerRequest {
            const message = new QuerySpecPermWorkerRequest({});
            if (data.perm != null) {
                message.perm = data.perm;
            }
            if (data.chat_id != null) {
                message.chat_id = data.chat_id;
            }
            return message;
        }
        toObject() {
            const data: {
                perm?: dependency_4.api.common.WorkerPermission;
                chat_id?: number;
            } = {};
            if (this.perm != null) {
                data.perm = this.perm;
            }
            if (this.chat_id != null) {
                data.chat_id = this.chat_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.perm != dependency_4.api.common.WorkerPermission.WORKER_PERM_NONE)
                writer.writeEnum(1, this.perm);
            if (this.chat_id != 0)
                writer.writeInt64(2, this.chat_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QuerySpecPermWorkerRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QuerySpecPermWorkerRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.perm = reader.readEnum();
                        break;
                    case 2:
                        message.chat_id = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QuerySpecPermWorkerRequest {
            return QuerySpecPermWorkerRequest.deserialize(bytes);
        }
    }
    export class WorkerListByGroup extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            group?: dependency_4.api.common.WorkerGroup;
            worker?: dependency_4.api.common.Worker[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("group" in data && data.group != undefined) {
                    this.group = data.group;
                }
                if ("worker" in data && data.worker != undefined) {
                    this.worker = data.worker;
                }
            }
        }
        get group() {
            return pb_1.Message.getWrapperField(this, dependency_4.api.common.WorkerGroup, 1) as dependency_4.api.common.WorkerGroup;
        }
        set group(value: dependency_4.api.common.WorkerGroup) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_group() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get worker() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_4.api.common.Worker, 2) as dependency_4.api.common.Worker[];
        }
        set worker(value: dependency_4.api.common.Worker[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            group?: ReturnType<typeof dependency_4.api.common.WorkerGroup.prototype.toObject>;
            worker?: ReturnType<typeof dependency_4.api.common.Worker.prototype.toObject>[];
        }): WorkerListByGroup {
            const message = new WorkerListByGroup({});
            if (data.group != null) {
                message.group = dependency_4.api.common.WorkerGroup.fromObject(data.group);
            }
            if (data.worker != null) {
                message.worker = data.worker.map(item => dependency_4.api.common.Worker.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                group?: ReturnType<typeof dependency_4.api.common.WorkerGroup.prototype.toObject>;
                worker?: ReturnType<typeof dependency_4.api.common.Worker.prototype.toObject>[];
            } = {};
            if (this.group != null) {
                data.group = this.group.toObject();
            }
            if (this.worker != null) {
                data.worker = this.worker.map((item: dependency_4.api.common.Worker) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_group)
                writer.writeMessage(1, this.group, () => this.group.serialize(writer));
            if (this.worker.length)
                writer.writeRepeatedMessage(2, this.worker, (item: dependency_4.api.common.Worker) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WorkerListByGroup {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WorkerListByGroup();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.group, () => message.group = dependency_4.api.common.WorkerGroup.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.worker, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_4.api.common.Worker.deserialize(reader), dependency_4.api.common.Worker));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WorkerListByGroup {
            return WorkerListByGroup.deserialize(bytes);
        }
    }
    export class QuerySpecPermWorkerResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            groups?: WorkerListByGroup[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("groups" in data && data.groups != undefined) {
                    this.groups = data.groups;
                }
            }
        }
        get groups() {
            return pb_1.Message.getRepeatedWrapperField(this, WorkerListByGroup, 1) as WorkerListByGroup[];
        }
        set groups(value: WorkerListByGroup[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            groups?: ReturnType<typeof WorkerListByGroup.prototype.toObject>[];
        }): QuerySpecPermWorkerResponse {
            const message = new QuerySpecPermWorkerResponse({});
            if (data.groups != null) {
                message.groups = data.groups.map(item => WorkerListByGroup.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                groups?: ReturnType<typeof WorkerListByGroup.prototype.toObject>[];
            } = {};
            if (this.groups != null) {
                data.groups = this.groups.map((item: WorkerListByGroup) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.groups.length)
                writer.writeRepeatedMessage(1, this.groups, (item: WorkerListByGroup) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QuerySpecPermWorkerResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QuerySpecPermWorkerResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.groups, () => pb_1.Message.addToRepeatedWrapperField(message, 1, WorkerListByGroup.deserialize(reader), WorkerListByGroup));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QuerySpecPermWorkerResponse {
            return QuerySpecPermWorkerResponse.deserialize(bytes);
        }
    }
    export class TryCleanupAssignedWorkerResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            cleaned?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("cleaned" in data && data.cleaned != undefined) {
                    this.cleaned = data.cleaned;
                }
            }
        }
        get cleaned() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set cleaned(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            cleaned?: boolean;
        }): TryCleanupAssignedWorkerResponse {
            const message = new TryCleanupAssignedWorkerResponse({});
            if (data.cleaned != null) {
                message.cleaned = data.cleaned;
            }
            return message;
        }
        toObject() {
            const data: {
                cleaned?: boolean;
            } = {};
            if (this.cleaned != null) {
                data.cleaned = this.cleaned;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.cleaned != false)
                writer.writeBool(1, this.cleaned);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TryCleanupAssignedWorkerResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TryCleanupAssignedWorkerResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.cleaned = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TryCleanupAssignedWorkerResponse {
            return TryCleanupAssignedWorkerResponse.deserialize(bytes);
        }
    }
    export class UnfreezeSessionRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            chat_id?: number;
            consultid?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("chat_id" in data && data.chat_id != undefined) {
                    this.chat_id = data.chat_id;
                }
                if ("consultid" in data && data.consultid != undefined) {
                    this.consultid = data.consultid;
                }
            }
        }
        get chat_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set chat_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get consultid() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set consultid(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            chat_id?: number;
            consultid?: number;
        }): UnfreezeSessionRequest {
            const message = new UnfreezeSessionRequest({});
            if (data.chat_id != null) {
                message.chat_id = data.chat_id;
            }
            if (data.consultid != null) {
                message.consultid = data.consultid;
            }
            return message;
        }
        toObject() {
            const data: {
                chat_id?: number;
                consultid?: number;
            } = {};
            if (this.chat_id != null) {
                data.chat_id = this.chat_id;
            }
            if (this.consultid != null) {
                data.consultid = this.consultid;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.chat_id != 0)
                writer.writeInt64(1, this.chat_id);
            if (this.consultid != 0)
                writer.writeInt32(2, this.consultid);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UnfreezeSessionRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UnfreezeSessionRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.chat_id = reader.readInt64();
                        break;
                    case 2:
                        message.consultid = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UnfreezeSessionRequest {
            return UnfreezeSessionRequest.deserialize(bytes);
        }
    }
    export class UnfreezeSessionResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            state?: dependency_7.api.common.ChatState;
            chat?: dependency_6.api.common.ChatItem;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("state" in data && data.state != undefined) {
                    this.state = data.state;
                }
                if ("chat" in data && data.chat != undefined) {
                    this.chat = data.chat;
                }
            }
        }
        get state() {
            return pb_1.Message.getFieldWithDefault(this, 1, dependency_7.api.common.ChatState.CHAT_STATE_COMMON) as dependency_7.api.common.ChatState;
        }
        set state(value: dependency_7.api.common.ChatState) {
            pb_1.Message.setField(this, 1, value);
        }
        get chat() {
            return pb_1.Message.getWrapperField(this, dependency_6.api.common.ChatItem, 2) as dependency_6.api.common.ChatItem;
        }
        set chat(value: dependency_6.api.common.ChatItem) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_chat() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            state?: dependency_7.api.common.ChatState;
            chat?: ReturnType<typeof dependency_6.api.common.ChatItem.prototype.toObject>;
        }): UnfreezeSessionResponse {
            const message = new UnfreezeSessionResponse({});
            if (data.state != null) {
                message.state = data.state;
            }
            if (data.chat != null) {
                message.chat = dependency_6.api.common.ChatItem.fromObject(data.chat);
            }
            return message;
        }
        toObject() {
            const data: {
                state?: dependency_7.api.common.ChatState;
                chat?: ReturnType<typeof dependency_6.api.common.ChatItem.prototype.toObject>;
            } = {};
            if (this.state != null) {
                data.state = this.state;
            }
            if (this.chat != null) {
                data.chat = this.chat.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.state != dependency_7.api.common.ChatState.CHAT_STATE_COMMON)
                writer.writeEnum(1, this.state);
            if (this.has_chat)
                writer.writeMessage(2, this.chat, () => this.chat.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UnfreezeSessionResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UnfreezeSessionResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.state = reader.readEnum();
                        break;
                    case 2:
                        reader.readMessage(message.chat, () => message.chat = dependency_6.api.common.ChatItem.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UnfreezeSessionResponse {
            return UnfreezeSessionResponse.deserialize(bytes);
        }
    }
    export class QuerySessionRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            chat_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("chat_id" in data && data.chat_id != undefined) {
                    this.chat_id = data.chat_id;
                }
            }
        }
        get chat_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set chat_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            chat_id?: number;
        }): QuerySessionRequest {
            const message = new QuerySessionRequest({});
            if (data.chat_id != null) {
                message.chat_id = data.chat_id;
            }
            return message;
        }
        toObject() {
            const data: {
                chat_id?: number;
            } = {};
            if (this.chat_id != null) {
                data.chat_id = this.chat_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.chat_id != 0)
                writer.writeInt64(1, this.chat_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QuerySessionRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QuerySessionRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.chat_id = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QuerySessionRequest {
            return QuerySessionRequest.deserialize(bytes);
        }
    }
    export class QuerySessionResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            chat?: dependency_6.api.common.ChatItem;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("chat" in data && data.chat != undefined) {
                    this.chat = data.chat;
                }
            }
        }
        get chat() {
            return pb_1.Message.getWrapperField(this, dependency_6.api.common.ChatItem, 1) as dependency_6.api.common.ChatItem;
        }
        set chat(value: dependency_6.api.common.ChatItem) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_chat() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            chat?: ReturnType<typeof dependency_6.api.common.ChatItem.prototype.toObject>;
        }): QuerySessionResponse {
            const message = new QuerySessionResponse({});
            if (data.chat != null) {
                message.chat = dependency_6.api.common.ChatItem.fromObject(data.chat);
            }
            return message;
        }
        toObject() {
            const data: {
                chat?: ReturnType<typeof dependency_6.api.common.ChatItem.prototype.toObject>;
            } = {};
            if (this.chat != null) {
                data.chat = this.chat.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_chat)
                writer.writeMessage(1, this.chat, () => this.chat.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QuerySessionResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QuerySessionResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.chat, () => message.chat = dependency_6.api.common.ChatItem.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QuerySessionResponse {
            return QuerySessionResponse.deserialize(bytes);
        }
    }
    export class NotifyMessageRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            consultid?: number;
            userid?: number;
            msg?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("consultid" in data && data.consultid != undefined) {
                    this.consultid = data.consultid;
                }
                if ("userid" in data && data.userid != undefined) {
                    this.userid = data.userid;
                }
                if ("msg" in data && data.msg != undefined) {
                    this.msg = data.msg;
                }
            }
        }
        get consultid() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set consultid(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get userid() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set userid(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get msg() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set msg(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            consultid?: number;
            userid?: number;
            msg?: string;
        }): NotifyMessageRequest {
            const message = new NotifyMessageRequest({});
            if (data.consultid != null) {
                message.consultid = data.consultid;
            }
            if (data.userid != null) {
                message.userid = data.userid;
            }
            if (data.msg != null) {
                message.msg = data.msg;
            }
            return message;
        }
        toObject() {
            const data: {
                consultid?: number;
                userid?: number;
                msg?: string;
            } = {};
            if (this.consultid != null) {
                data.consultid = this.consultid;
            }
            if (this.userid != null) {
                data.userid = this.userid;
            }
            if (this.msg != null) {
                data.msg = this.msg;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.consultid != 0)
                writer.writeInt32(3, this.consultid);
            if (this.userid != 0)
                writer.writeInt32(4, this.userid);
            if (this.msg.length)
                writer.writeString(5, this.msg);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NotifyMessageRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NotifyMessageRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 3:
                        message.consultid = reader.readInt32();
                        break;
                    case 4:
                        message.userid = reader.readInt32();
                        break;
                    case 5:
                        message.msg = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): NotifyMessageRequest {
            return NotifyMessageRequest.deserialize(bytes);
        }
    }
    export class TransferMessageReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            chatId?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("chatId" in data && data.chatId != undefined) {
                    this.chatId = data.chatId;
                }
            }
        }
        get chatId() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set chatId(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            chatId?: number;
        }): TransferMessageReq {
            const message = new TransferMessageReq({});
            if (data.chatId != null) {
                message.chatId = data.chatId;
            }
            return message;
        }
        toObject() {
            const data: {
                chatId?: number;
            } = {};
            if (this.chatId != null) {
                data.chatId = this.chatId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.chatId != 0)
                writer.writeInt64(1, this.chatId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TransferMessageReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TransferMessageReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.chatId = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TransferMessageReq {
            return TransferMessageReq.deserialize(bytes);
        }
    }
    export class ThirdOrder extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            order_no?: string;
            userid?: number;
            is_online_pay_desc?: string;
            is_matching_pay_desc?: string;
            type_desc?: string;
            status_desc?: string;
            confirm_desc?: string;
            create_time?: string;
            push_status_desc?: string;
            finish_time_desc?: string;
            card_type?: string;
            match_status_desc?: string;
            img_upload_time?: string;
            receipt_email?: string;
            amount?: string;
            recharge_name?: string;
            account_name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("order_no" in data && data.order_no != undefined) {
                    this.order_no = data.order_no;
                }
                if ("userid" in data && data.userid != undefined) {
                    this.userid = data.userid;
                }
                if ("is_online_pay_desc" in data && data.is_online_pay_desc != undefined) {
                    this.is_online_pay_desc = data.is_online_pay_desc;
                }
                if ("is_matching_pay_desc" in data && data.is_matching_pay_desc != undefined) {
                    this.is_matching_pay_desc = data.is_matching_pay_desc;
                }
                if ("type_desc" in data && data.type_desc != undefined) {
                    this.type_desc = data.type_desc;
                }
                if ("status_desc" in data && data.status_desc != undefined) {
                    this.status_desc = data.status_desc;
                }
                if ("confirm_desc" in data && data.confirm_desc != undefined) {
                    this.confirm_desc = data.confirm_desc;
                }
                if ("create_time" in data && data.create_time != undefined) {
                    this.create_time = data.create_time;
                }
                if ("push_status_desc" in data && data.push_status_desc != undefined) {
                    this.push_status_desc = data.push_status_desc;
                }
                if ("finish_time_desc" in data && data.finish_time_desc != undefined) {
                    this.finish_time_desc = data.finish_time_desc;
                }
                if ("card_type" in data && data.card_type != undefined) {
                    this.card_type = data.card_type;
                }
                if ("match_status_desc" in data && data.match_status_desc != undefined) {
                    this.match_status_desc = data.match_status_desc;
                }
                if ("img_upload_time" in data && data.img_upload_time != undefined) {
                    this.img_upload_time = data.img_upload_time;
                }
                if ("receipt_email" in data && data.receipt_email != undefined) {
                    this.receipt_email = data.receipt_email;
                }
                if ("amount" in data && data.amount != undefined) {
                    this.amount = data.amount;
                }
                if ("recharge_name" in data && data.recharge_name != undefined) {
                    this.recharge_name = data.recharge_name;
                }
                if ("account_name" in data && data.account_name != undefined) {
                    this.account_name = data.account_name;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get order_no() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set order_no(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get userid() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set userid(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get is_online_pay_desc() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set is_online_pay_desc(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get is_matching_pay_desc() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set is_matching_pay_desc(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get type_desc() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set type_desc(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get status_desc() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set status_desc(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get confirm_desc() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set confirm_desc(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get create_time() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set create_time(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get push_status_desc() {
            return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
        }
        set push_status_desc(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        get finish_time_desc() {
            return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
        }
        set finish_time_desc(value: string) {
            pb_1.Message.setField(this, 11, value);
        }
        get card_type() {
            return pb_1.Message.getFieldWithDefault(this, 12, "") as string;
        }
        set card_type(value: string) {
            pb_1.Message.setField(this, 12, value);
        }
        get match_status_desc() {
            return pb_1.Message.getFieldWithDefault(this, 13, "") as string;
        }
        set match_status_desc(value: string) {
            pb_1.Message.setField(this, 13, value);
        }
        get img_upload_time() {
            return pb_1.Message.getFieldWithDefault(this, 14, "") as string;
        }
        set img_upload_time(value: string) {
            pb_1.Message.setField(this, 14, value);
        }
        get receipt_email() {
            return pb_1.Message.getFieldWithDefault(this, 15, "") as string;
        }
        set receipt_email(value: string) {
            pb_1.Message.setField(this, 15, value);
        }
        get amount() {
            return pb_1.Message.getFieldWithDefault(this, 16, "") as string;
        }
        set amount(value: string) {
            pb_1.Message.setField(this, 16, value);
        }
        get recharge_name() {
            return pb_1.Message.getFieldWithDefault(this, 17, "") as string;
        }
        set recharge_name(value: string) {
            pb_1.Message.setField(this, 17, value);
        }
        get account_name() {
            return pb_1.Message.getFieldWithDefault(this, 18, "") as string;
        }
        set account_name(value: string) {
            pb_1.Message.setField(this, 18, value);
        }
        static fromObject(data: {
            id?: number;
            order_no?: string;
            userid?: number;
            is_online_pay_desc?: string;
            is_matching_pay_desc?: string;
            type_desc?: string;
            status_desc?: string;
            confirm_desc?: string;
            create_time?: string;
            push_status_desc?: string;
            finish_time_desc?: string;
            card_type?: string;
            match_status_desc?: string;
            img_upload_time?: string;
            receipt_email?: string;
            amount?: string;
            recharge_name?: string;
            account_name?: string;
        }): ThirdOrder {
            const message = new ThirdOrder({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.order_no != null) {
                message.order_no = data.order_no;
            }
            if (data.userid != null) {
                message.userid = data.userid;
            }
            if (data.is_online_pay_desc != null) {
                message.is_online_pay_desc = data.is_online_pay_desc;
            }
            if (data.is_matching_pay_desc != null) {
                message.is_matching_pay_desc = data.is_matching_pay_desc;
            }
            if (data.type_desc != null) {
                message.type_desc = data.type_desc;
            }
            if (data.status_desc != null) {
                message.status_desc = data.status_desc;
            }
            if (data.confirm_desc != null) {
                message.confirm_desc = data.confirm_desc;
            }
            if (data.create_time != null) {
                message.create_time = data.create_time;
            }
            if (data.push_status_desc != null) {
                message.push_status_desc = data.push_status_desc;
            }
            if (data.finish_time_desc != null) {
                message.finish_time_desc = data.finish_time_desc;
            }
            if (data.card_type != null) {
                message.card_type = data.card_type;
            }
            if (data.match_status_desc != null) {
                message.match_status_desc = data.match_status_desc;
            }
            if (data.img_upload_time != null) {
                message.img_upload_time = data.img_upload_time;
            }
            if (data.receipt_email != null) {
                message.receipt_email = data.receipt_email;
            }
            if (data.amount != null) {
                message.amount = data.amount;
            }
            if (data.recharge_name != null) {
                message.recharge_name = data.recharge_name;
            }
            if (data.account_name != null) {
                message.account_name = data.account_name;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                order_no?: string;
                userid?: number;
                is_online_pay_desc?: string;
                is_matching_pay_desc?: string;
                type_desc?: string;
                status_desc?: string;
                confirm_desc?: string;
                create_time?: string;
                push_status_desc?: string;
                finish_time_desc?: string;
                card_type?: string;
                match_status_desc?: string;
                img_upload_time?: string;
                receipt_email?: string;
                amount?: string;
                recharge_name?: string;
                account_name?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.order_no != null) {
                data.order_no = this.order_no;
            }
            if (this.userid != null) {
                data.userid = this.userid;
            }
            if (this.is_online_pay_desc != null) {
                data.is_online_pay_desc = this.is_online_pay_desc;
            }
            if (this.is_matching_pay_desc != null) {
                data.is_matching_pay_desc = this.is_matching_pay_desc;
            }
            if (this.type_desc != null) {
                data.type_desc = this.type_desc;
            }
            if (this.status_desc != null) {
                data.status_desc = this.status_desc;
            }
            if (this.confirm_desc != null) {
                data.confirm_desc = this.confirm_desc;
            }
            if (this.create_time != null) {
                data.create_time = this.create_time;
            }
            if (this.push_status_desc != null) {
                data.push_status_desc = this.push_status_desc;
            }
            if (this.finish_time_desc != null) {
                data.finish_time_desc = this.finish_time_desc;
            }
            if (this.card_type != null) {
                data.card_type = this.card_type;
            }
            if (this.match_status_desc != null) {
                data.match_status_desc = this.match_status_desc;
            }
            if (this.img_upload_time != null) {
                data.img_upload_time = this.img_upload_time;
            }
            if (this.receipt_email != null) {
                data.receipt_email = this.receipt_email;
            }
            if (this.amount != null) {
                data.amount = this.amount;
            }
            if (this.recharge_name != null) {
                data.recharge_name = this.recharge_name;
            }
            if (this.account_name != null) {
                data.account_name = this.account_name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt64(1, this.id);
            if (this.order_no.length)
                writer.writeString(2, this.order_no);
            if (this.userid != 0)
                writer.writeInt64(3, this.userid);
            if (this.is_online_pay_desc.length)
                writer.writeString(4, this.is_online_pay_desc);
            if (this.is_matching_pay_desc.length)
                writer.writeString(5, this.is_matching_pay_desc);
            if (this.type_desc.length)
                writer.writeString(6, this.type_desc);
            if (this.status_desc.length)
                writer.writeString(7, this.status_desc);
            if (this.confirm_desc.length)
                writer.writeString(8, this.confirm_desc);
            if (this.create_time.length)
                writer.writeString(9, this.create_time);
            if (this.push_status_desc.length)
                writer.writeString(10, this.push_status_desc);
            if (this.finish_time_desc.length)
                writer.writeString(11, this.finish_time_desc);
            if (this.card_type.length)
                writer.writeString(12, this.card_type);
            if (this.match_status_desc.length)
                writer.writeString(13, this.match_status_desc);
            if (this.img_upload_time.length)
                writer.writeString(14, this.img_upload_time);
            if (this.receipt_email.length)
                writer.writeString(15, this.receipt_email);
            if (this.amount.length)
                writer.writeString(16, this.amount);
            if (this.recharge_name.length)
                writer.writeString(17, this.recharge_name);
            if (this.account_name.length)
                writer.writeString(18, this.account_name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ThirdOrder {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ThirdOrder();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt64();
                        break;
                    case 2:
                        message.order_no = reader.readString();
                        break;
                    case 3:
                        message.userid = reader.readInt64();
                        break;
                    case 4:
                        message.is_online_pay_desc = reader.readString();
                        break;
                    case 5:
                        message.is_matching_pay_desc = reader.readString();
                        break;
                    case 6:
                        message.type_desc = reader.readString();
                        break;
                    case 7:
                        message.status_desc = reader.readString();
                        break;
                    case 8:
                        message.confirm_desc = reader.readString();
                        break;
                    case 9:
                        message.create_time = reader.readString();
                        break;
                    case 10:
                        message.push_status_desc = reader.readString();
                        break;
                    case 11:
                        message.finish_time_desc = reader.readString();
                        break;
                    case 12:
                        message.card_type = reader.readString();
                        break;
                    case 13:
                        message.match_status_desc = reader.readString();
                        break;
                    case 14:
                        message.img_upload_time = reader.readString();
                        break;
                    case 15:
                        message.receipt_email = reader.readString();
                        break;
                    case 16:
                        message.amount = reader.readString();
                        break;
                    case 17:
                        message.recharge_name = reader.readString();
                        break;
                    case 18:
                        message.account_name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ThirdOrder {
            return ThirdOrder.deserialize(bytes);
        }
    }
    export class TransferMessageRsp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            data?: ThirdOrder[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get data() {
            return pb_1.Message.getRepeatedWrapperField(this, ThirdOrder, 1) as ThirdOrder[];
        }
        set data(value: ThirdOrder[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            data?: ReturnType<typeof ThirdOrder.prototype.toObject>[];
        }): TransferMessageRsp {
            const message = new TransferMessageRsp({});
            if (data.data != null) {
                message.data = data.data.map(item => ThirdOrder.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                data?: ReturnType<typeof ThirdOrder.prototype.toObject>[];
            } = {};
            if (this.data != null) {
                data.data = this.data.map((item: ThirdOrder) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.data.length)
                writer.writeRepeatedMessage(1, this.data, (item: ThirdOrder) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TransferMessageRsp {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TransferMessageRsp();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.data, () => pb_1.Message.addToRepeatedWrapperField(message, 1, ThirdOrder.deserialize(reader), ThirdOrder));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TransferMessageRsp {
            return TransferMessageRsp.deserialize(bytes);
        }
    }
    export class HistoryRechargesRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            chat_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("chat_id" in data && data.chat_id != undefined) {
                    this.chat_id = data.chat_id;
                }
            }
        }
        get chat_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set chat_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            chat_id?: number;
        }): HistoryRechargesRequest {
            const message = new HistoryRechargesRequest({});
            if (data.chat_id != null) {
                message.chat_id = data.chat_id;
            }
            return message;
        }
        toObject() {
            const data: {
                chat_id?: number;
            } = {};
            if (this.chat_id != null) {
                data.chat_id = this.chat_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.chat_id != 0)
                writer.writeInt64(1, this.chat_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): HistoryRechargesRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new HistoryRechargesRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.chat_id = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): HistoryRechargesRequest {
            return HistoryRechargesRequest.deserialize(bytes);
        }
    }
    export class HistoryRechargesResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            data?: ThirdOrder[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get data() {
            return pb_1.Message.getRepeatedWrapperField(this, ThirdOrder, 1) as ThirdOrder[];
        }
        set data(value: ThirdOrder[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            data?: ReturnType<typeof ThirdOrder.prototype.toObject>[];
        }): HistoryRechargesResponse {
            const message = new HistoryRechargesResponse({});
            if (data.data != null) {
                message.data = data.data.map(item => ThirdOrder.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                data?: ReturnType<typeof ThirdOrder.prototype.toObject>[];
            } = {};
            if (this.data != null) {
                data.data = this.data.map((item: ThirdOrder) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.data.length)
                writer.writeRepeatedMessage(1, this.data, (item: ThirdOrder) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): HistoryRechargesResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new HistoryRechargesResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.data, () => pb_1.Message.addToRepeatedWrapperField(message, 1, ThirdOrder.deserialize(reader), ThirdOrder));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): HistoryRechargesResponse {
            return HistoryRechargesResponse.deserialize(bytes);
        }
    }
    export class QueryChildByGroupRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            group_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("group_id" in data && data.group_id != undefined) {
                    this.group_id = data.group_id;
                }
            }
        }
        get group_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set group_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            group_id?: number;
        }): QueryChildByGroupRequest {
            const message = new QueryChildByGroupRequest({});
            if (data.group_id != null) {
                message.group_id = data.group_id;
            }
            return message;
        }
        toObject() {
            const data: {
                group_id?: number;
            } = {};
            if (this.group_id != null) {
                data.group_id = this.group_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.group_id != 0)
                writer.writeInt64(1, this.group_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryChildByGroupRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryChildByGroupRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.group_id = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryChildByGroupRequest {
            return QueryChildByGroupRequest.deserialize(bytes);
        }
    }
    export class QueryChildByGroupResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            group?: dependency_4.api.common.WorkerGroup[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("group" in data && data.group != undefined) {
                    this.group = data.group;
                }
            }
        }
        get group() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_4.api.common.WorkerGroup, 1) as dependency_4.api.common.WorkerGroup[];
        }
        set group(value: dependency_4.api.common.WorkerGroup[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            group?: ReturnType<typeof dependency_4.api.common.WorkerGroup.prototype.toObject>[];
        }): QueryChildByGroupResponse {
            const message = new QueryChildByGroupResponse({});
            if (data.group != null) {
                message.group = data.group.map(item => dependency_4.api.common.WorkerGroup.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                group?: ReturnType<typeof dependency_4.api.common.WorkerGroup.prototype.toObject>[];
            } = {};
            if (this.group != null) {
                data.group = this.group.map((item: dependency_4.api.common.WorkerGroup) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.group.length)
                writer.writeRepeatedMessage(1, this.group, (item: dependency_4.api.common.WorkerGroup) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryChildByGroupResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryChildByGroupResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.group, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_4.api.common.WorkerGroup.deserialize(reader), dependency_4.api.common.WorkerGroup));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryChildByGroupResponse {
            return QueryChildByGroupResponse.deserialize(bytes);
        }
    }
    export class GetApplyWorkerStateListReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            batch?: dependency_5.api.common.Batch;
            name?: string;
            apply_state?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("batch" in data && data.batch != undefined) {
                    this.batch = data.batch;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("apply_state" in data && data.apply_state != undefined) {
                    this.apply_state = data.apply_state;
                }
            }
        }
        get batch() {
            return pb_1.Message.getWrapperField(this, dependency_5.api.common.Batch, 1) as dependency_5.api.common.Batch;
        }
        set batch(value: dependency_5.api.common.Batch) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_batch() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get apply_state() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set apply_state(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            batch?: ReturnType<typeof dependency_5.api.common.Batch.prototype.toObject>;
            name?: string;
            apply_state?: number;
        }): GetApplyWorkerStateListReq {
            const message = new GetApplyWorkerStateListReq({});
            if (data.batch != null) {
                message.batch = dependency_5.api.common.Batch.fromObject(data.batch);
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.apply_state != null) {
                message.apply_state = data.apply_state;
            }
            return message;
        }
        toObject() {
            const data: {
                batch?: ReturnType<typeof dependency_5.api.common.Batch.prototype.toObject>;
                name?: string;
                apply_state?: number;
            } = {};
            if (this.batch != null) {
                data.batch = this.batch.toObject();
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.apply_state != null) {
                data.apply_state = this.apply_state;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_batch)
                writer.writeMessage(1, this.batch, () => this.batch.serialize(writer));
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.apply_state != 0)
                writer.writeInt32(3, this.apply_state);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetApplyWorkerStateListReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetApplyWorkerStateListReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.batch, () => message.batch = dependency_5.api.common.Batch.deserialize(reader));
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.apply_state = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetApplyWorkerStateListReq {
            return GetApplyWorkerStateListReq.deserialize(bytes);
        }
    }
    export class GetApplyWorkerStateListResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            applys?: dependency_4.api.common.ApplyWorkerState[];
            total?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("applys" in data && data.applys != undefined) {
                    this.applys = data.applys;
                }
                if ("total" in data && data.total != undefined) {
                    this.total = data.total;
                }
            }
        }
        get applys() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_4.api.common.ApplyWorkerState, 1) as dependency_4.api.common.ApplyWorkerState[];
        }
        set applys(value: dependency_4.api.common.ApplyWorkerState[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get total() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set total(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            applys?: ReturnType<typeof dependency_4.api.common.ApplyWorkerState.prototype.toObject>[];
            total?: number;
        }): GetApplyWorkerStateListResp {
            const message = new GetApplyWorkerStateListResp({});
            if (data.applys != null) {
                message.applys = data.applys.map(item => dependency_4.api.common.ApplyWorkerState.fromObject(item));
            }
            if (data.total != null) {
                message.total = data.total;
            }
            return message;
        }
        toObject() {
            const data: {
                applys?: ReturnType<typeof dependency_4.api.common.ApplyWorkerState.prototype.toObject>[];
                total?: number;
            } = {};
            if (this.applys != null) {
                data.applys = this.applys.map((item: dependency_4.api.common.ApplyWorkerState) => item.toObject());
            }
            if (this.total != null) {
                data.total = this.total;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.applys.length)
                writer.writeRepeatedMessage(1, this.applys, (item: dependency_4.api.common.ApplyWorkerState) => item.serialize(writer));
            if (this.total != 0)
                writer.writeInt32(2, this.total);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetApplyWorkerStateListResp {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetApplyWorkerStateListResp();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.applys, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_4.api.common.ApplyWorkerState.deserialize(reader), dependency_4.api.common.ApplyWorkerState));
                        break;
                    case 2:
                        message.total = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetApplyWorkerStateListResp {
            return GetApplyWorkerStateListResp.deserialize(bytes);
        }
    }
    export class GetApplyWorkerStateResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            online_state_now?: dependency_4.api.common.OnlineState;
            online_state_apply?: dependency_4.api.common.OnlineState;
            apply_time?: number;
            apply_state?: number;
            check_time?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("online_state_now" in data && data.online_state_now != undefined) {
                    this.online_state_now = data.online_state_now;
                }
                if ("online_state_apply" in data && data.online_state_apply != undefined) {
                    this.online_state_apply = data.online_state_apply;
                }
                if ("apply_time" in data && data.apply_time != undefined) {
                    this.apply_time = data.apply_time;
                }
                if ("apply_state" in data && data.apply_state != undefined) {
                    this.apply_state = data.apply_state;
                }
                if ("check_time" in data && data.check_time != undefined) {
                    this.check_time = data.check_time;
                }
            }
        }
        get online_state_now() {
            return pb_1.Message.getFieldWithDefault(this, 1, dependency_4.api.common.OnlineState.ONLINE_STATE_IDLE) as dependency_4.api.common.OnlineState;
        }
        set online_state_now(value: dependency_4.api.common.OnlineState) {
            pb_1.Message.setField(this, 1, value);
        }
        get online_state_apply() {
            return pb_1.Message.getFieldWithDefault(this, 2, dependency_4.api.common.OnlineState.ONLINE_STATE_IDLE) as dependency_4.api.common.OnlineState;
        }
        set online_state_apply(value: dependency_4.api.common.OnlineState) {
            pb_1.Message.setField(this, 2, value);
        }
        get apply_time() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set apply_time(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get apply_state() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set apply_state(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get check_time() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set check_time(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            online_state_now?: dependency_4.api.common.OnlineState;
            online_state_apply?: dependency_4.api.common.OnlineState;
            apply_time?: number;
            apply_state?: number;
            check_time?: number;
        }): GetApplyWorkerStateResp {
            const message = new GetApplyWorkerStateResp({});
            if (data.online_state_now != null) {
                message.online_state_now = data.online_state_now;
            }
            if (data.online_state_apply != null) {
                message.online_state_apply = data.online_state_apply;
            }
            if (data.apply_time != null) {
                message.apply_time = data.apply_time;
            }
            if (data.apply_state != null) {
                message.apply_state = data.apply_state;
            }
            if (data.check_time != null) {
                message.check_time = data.check_time;
            }
            return message;
        }
        toObject() {
            const data: {
                online_state_now?: dependency_4.api.common.OnlineState;
                online_state_apply?: dependency_4.api.common.OnlineState;
                apply_time?: number;
                apply_state?: number;
                check_time?: number;
            } = {};
            if (this.online_state_now != null) {
                data.online_state_now = this.online_state_now;
            }
            if (this.online_state_apply != null) {
                data.online_state_apply = this.online_state_apply;
            }
            if (this.apply_time != null) {
                data.apply_time = this.apply_time;
            }
            if (this.apply_state != null) {
                data.apply_state = this.apply_state;
            }
            if (this.check_time != null) {
                data.check_time = this.check_time;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.online_state_now != dependency_4.api.common.OnlineState.ONLINE_STATE_IDLE)
                writer.writeEnum(1, this.online_state_now);
            if (this.online_state_apply != dependency_4.api.common.OnlineState.ONLINE_STATE_IDLE)
                writer.writeEnum(2, this.online_state_apply);
            if (this.apply_time != 0)
                writer.writeInt64(3, this.apply_time);
            if (this.apply_state != 0)
                writer.writeInt32(4, this.apply_state);
            if (this.check_time != 0)
                writer.writeInt64(5, this.check_time);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetApplyWorkerStateResp {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetApplyWorkerStateResp();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.online_state_now = reader.readEnum();
                        break;
                    case 2:
                        message.online_state_apply = reader.readEnum();
                        break;
                    case 3:
                        message.apply_time = reader.readInt64();
                        break;
                    case 4:
                        message.apply_state = reader.readInt32();
                        break;
                    case 5:
                        message.check_time = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetApplyWorkerStateResp {
            return GetApplyWorkerStateResp.deserialize(bytes);
        }
    }
    export class SessionCustomerQueryRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            batch?: dependency_5.api.common.Batch;
            keyword?: string;
            consult_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("batch" in data && data.batch != undefined) {
                    this.batch = data.batch;
                }
                if ("keyword" in data && data.keyword != undefined) {
                    this.keyword = data.keyword;
                }
                if ("consult_id" in data && data.consult_id != undefined) {
                    this.consult_id = data.consult_id;
                }
            }
        }
        get batch() {
            return pb_1.Message.getWrapperField(this, dependency_5.api.common.Batch, 1) as dependency_5.api.common.Batch;
        }
        set batch(value: dependency_5.api.common.Batch) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_batch() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get keyword() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set keyword(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get consult_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set consult_id(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            batch?: ReturnType<typeof dependency_5.api.common.Batch.prototype.toObject>;
            keyword?: string;
            consult_id?: number;
        }): SessionCustomerQueryRequest {
            const message = new SessionCustomerQueryRequest({});
            if (data.batch != null) {
                message.batch = dependency_5.api.common.Batch.fromObject(data.batch);
            }
            if (data.keyword != null) {
                message.keyword = data.keyword;
            }
            if (data.consult_id != null) {
                message.consult_id = data.consult_id;
            }
            return message;
        }
        toObject() {
            const data: {
                batch?: ReturnType<typeof dependency_5.api.common.Batch.prototype.toObject>;
                keyword?: string;
                consult_id?: number;
            } = {};
            if (this.batch != null) {
                data.batch = this.batch.toObject();
            }
            if (this.keyword != null) {
                data.keyword = this.keyword;
            }
            if (this.consult_id != null) {
                data.consult_id = this.consult_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_batch)
                writer.writeMessage(1, this.batch, () => this.batch.serialize(writer));
            if (this.keyword.length)
                writer.writeString(2, this.keyword);
            if (this.consult_id != 0)
                writer.writeUint32(3, this.consult_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SessionCustomerQueryRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SessionCustomerQueryRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.batch, () => message.batch = dependency_5.api.common.Batch.deserialize(reader));
                        break;
                    case 2:
                        message.keyword = reader.readString();
                        break;
                    case 3:
                        message.consult_id = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SessionCustomerQueryRequest {
            return SessionCustomerQueryRequest.deserialize(bytes);
        }
    }
    export class SessionCustomer extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            uid?: number;
            name?: string;
            avatar?: string;
            nick?: string;
            chat_id?: number;
            ip?: string;
            create_at?: dependency_8.google.protobuf.Timestamp;
            tenant_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("uid" in data && data.uid != undefined) {
                    this.uid = data.uid;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("avatar" in data && data.avatar != undefined) {
                    this.avatar = data.avatar;
                }
                if ("nick" in data && data.nick != undefined) {
                    this.nick = data.nick;
                }
                if ("chat_id" in data && data.chat_id != undefined) {
                    this.chat_id = data.chat_id;
                }
                if ("ip" in data && data.ip != undefined) {
                    this.ip = data.ip;
                }
                if ("create_at" in data && data.create_at != undefined) {
                    this.create_at = data.create_at;
                }
                if ("tenant_id" in data && data.tenant_id != undefined) {
                    this.tenant_id = data.tenant_id;
                }
            }
        }
        get uid() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set uid(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get avatar() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set avatar(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get nick() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set nick(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get chat_id() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set chat_id(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get ip() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set ip(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get create_at() {
            return pb_1.Message.getWrapperField(this, dependency_8.google.protobuf.Timestamp, 7) as dependency_8.google.protobuf.Timestamp;
        }
        set create_at(value: dependency_8.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 7, value);
        }
        get has_create_at() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get tenant_id() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set tenant_id(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        static fromObject(data: {
            uid?: number;
            name?: string;
            avatar?: string;
            nick?: string;
            chat_id?: number;
            ip?: string;
            create_at?: ReturnType<typeof dependency_8.google.protobuf.Timestamp.prototype.toObject>;
            tenant_id?: number;
        }): SessionCustomer {
            const message = new SessionCustomer({});
            if (data.uid != null) {
                message.uid = data.uid;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.avatar != null) {
                message.avatar = data.avatar;
            }
            if (data.nick != null) {
                message.nick = data.nick;
            }
            if (data.chat_id != null) {
                message.chat_id = data.chat_id;
            }
            if (data.ip != null) {
                message.ip = data.ip;
            }
            if (data.create_at != null) {
                message.create_at = dependency_8.google.protobuf.Timestamp.fromObject(data.create_at);
            }
            if (data.tenant_id != null) {
                message.tenant_id = data.tenant_id;
            }
            return message;
        }
        toObject() {
            const data: {
                uid?: number;
                name?: string;
                avatar?: string;
                nick?: string;
                chat_id?: number;
                ip?: string;
                create_at?: ReturnType<typeof dependency_8.google.protobuf.Timestamp.prototype.toObject>;
                tenant_id?: number;
            } = {};
            if (this.uid != null) {
                data.uid = this.uid;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.avatar != null) {
                data.avatar = this.avatar;
            }
            if (this.nick != null) {
                data.nick = this.nick;
            }
            if (this.chat_id != null) {
                data.chat_id = this.chat_id;
            }
            if (this.ip != null) {
                data.ip = this.ip;
            }
            if (this.create_at != null) {
                data.create_at = this.create_at.toObject();
            }
            if (this.tenant_id != null) {
                data.tenant_id = this.tenant_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.uid != 0)
                writer.writeInt32(1, this.uid);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.avatar.length)
                writer.writeString(3, this.avatar);
            if (this.nick.length)
                writer.writeString(4, this.nick);
            if (this.chat_id != 0)
                writer.writeInt64(5, this.chat_id);
            if (this.ip.length)
                writer.writeString(6, this.ip);
            if (this.has_create_at)
                writer.writeMessage(7, this.create_at, () => this.create_at.serialize(writer));
            if (this.tenant_id != 0)
                writer.writeInt32(8, this.tenant_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SessionCustomer {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SessionCustomer();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.uid = reader.readInt32();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.avatar = reader.readString();
                        break;
                    case 4:
                        message.nick = reader.readString();
                        break;
                    case 5:
                        message.chat_id = reader.readInt64();
                        break;
                    case 6:
                        message.ip = reader.readString();
                        break;
                    case 7:
                        reader.readMessage(message.create_at, () => message.create_at = dependency_8.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 8:
                        message.tenant_id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SessionCustomer {
            return SessionCustomer.deserialize(bytes);
        }
    }
    export class SessionCustomerQueryResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            items?: SessionCustomer[];
            batch?: dependency_5.api.common.Batch;
            total?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("items" in data && data.items != undefined) {
                    this.items = data.items;
                }
                if ("batch" in data && data.batch != undefined) {
                    this.batch = data.batch;
                }
                if ("total" in data && data.total != undefined) {
                    this.total = data.total;
                }
            }
        }
        get items() {
            return pb_1.Message.getRepeatedWrapperField(this, SessionCustomer, 1) as SessionCustomer[];
        }
        set items(value: SessionCustomer[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get batch() {
            return pb_1.Message.getWrapperField(this, dependency_5.api.common.Batch, 2) as dependency_5.api.common.Batch;
        }
        set batch(value: dependency_5.api.common.Batch) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_batch() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get total() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set total(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            items?: ReturnType<typeof SessionCustomer.prototype.toObject>[];
            batch?: ReturnType<typeof dependency_5.api.common.Batch.prototype.toObject>;
            total?: number;
        }): SessionCustomerQueryResponse {
            const message = new SessionCustomerQueryResponse({});
            if (data.items != null) {
                message.items = data.items.map(item => SessionCustomer.fromObject(item));
            }
            if (data.batch != null) {
                message.batch = dependency_5.api.common.Batch.fromObject(data.batch);
            }
            if (data.total != null) {
                message.total = data.total;
            }
            return message;
        }
        toObject() {
            const data: {
                items?: ReturnType<typeof SessionCustomer.prototype.toObject>[];
                batch?: ReturnType<typeof dependency_5.api.common.Batch.prototype.toObject>;
                total?: number;
            } = {};
            if (this.items != null) {
                data.items = this.items.map((item: SessionCustomer) => item.toObject());
            }
            if (this.batch != null) {
                data.batch = this.batch.toObject();
            }
            if (this.total != null) {
                data.total = this.total;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.items.length)
                writer.writeRepeatedMessage(1, this.items, (item: SessionCustomer) => item.serialize(writer));
            if (this.has_batch)
                writer.writeMessage(2, this.batch, () => this.batch.serialize(writer));
            if (this.total != 0)
                writer.writeInt32(3, this.total);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SessionCustomerQueryResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SessionCustomerQueryResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.items, () => pb_1.Message.addToRepeatedWrapperField(message, 1, SessionCustomer.deserialize(reader), SessionCustomer));
                        break;
                    case 2:
                        reader.readMessage(message.batch, () => message.batch = dependency_5.api.common.Batch.deserialize(reader));
                        break;
                    case 3:
                        message.total = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SessionCustomerQueryResponse {
            return SessionCustomerQueryResponse.deserialize(bytes);
        }
    }
    export class CheckWorkerStateReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            access?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("access" in data && data.access != undefined) {
                    this.access = data.access;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get access() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set access(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            id?: number;
            access?: boolean;
        }): CheckWorkerStateReq {
            const message = new CheckWorkerStateReq({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.access != null) {
                message.access = data.access;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                access?: boolean;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.access != null) {
                data.access = this.access;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt64(1, this.id);
            if (this.access != false)
                writer.writeBool(2, this.access);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CheckWorkerStateReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CheckWorkerStateReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt64();
                        break;
                    case 2:
                        message.access = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CheckWorkerStateReq {
            return CheckWorkerStateReq.deserialize(bytes);
        }
    }
    export class GetQlUrlResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            base64_url?: string;
            google_key?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("base64_url" in data && data.base64_url != undefined) {
                    this.base64_url = data.base64_url;
                }
                if ("google_key" in data && data.google_key != undefined) {
                    this.google_key = data.google_key;
                }
            }
        }
        get base64_url() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set base64_url(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get google_key() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set google_key(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            base64_url?: string;
            google_key?: string;
        }): GetQlUrlResp {
            const message = new GetQlUrlResp({});
            if (data.base64_url != null) {
                message.base64_url = data.base64_url;
            }
            if (data.google_key != null) {
                message.google_key = data.google_key;
            }
            return message;
        }
        toObject() {
            const data: {
                base64_url?: string;
                google_key?: string;
            } = {};
            if (this.base64_url != null) {
                data.base64_url = this.base64_url;
            }
            if (this.google_key != null) {
                data.google_key = this.google_key;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.base64_url.length)
                writer.writeString(1, this.base64_url);
            if (this.google_key.length)
                writer.writeString(2, this.google_key);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetQlUrlResp {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetQlUrlResp();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.base64_url = reader.readString();
                        break;
                    case 2:
                        message.google_key = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetQlUrlResp {
            return GetQlUrlResp.deserialize(bytes);
        }
    }
    export class GlReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            code?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
            }
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set code(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            code?: string;
        }): GlReq {
            const message = new GlReq({});
            if (data.code != null) {
                message.code = data.code;
            }
            return message;
        }
        toObject() {
            const data: {
                code?: string;
            } = {};
            if (this.code != null) {
                data.code = this.code;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code.length)
                writer.writeString(1, this.code);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GlReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GlReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GlReq {
            return GlReq.deserialize(bytes);
        }
    }
    export class GlResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ok?: boolean;
            err_msg?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ok" in data && data.ok != undefined) {
                    this.ok = data.ok;
                }
                if ("err_msg" in data && data.err_msg != undefined) {
                    this.err_msg = data.err_msg;
                }
            }
        }
        get ok() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set ok(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get err_msg() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set err_msg(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            ok?: boolean;
            err_msg?: string;
        }): GlResp {
            const message = new GlResp({});
            if (data.ok != null) {
                message.ok = data.ok;
            }
            if (data.err_msg != null) {
                message.err_msg = data.err_msg;
            }
            return message;
        }
        toObject() {
            const data: {
                ok?: boolean;
                err_msg?: string;
            } = {};
            if (this.ok != null) {
                data.ok = this.ok;
            }
            if (this.err_msg != null) {
                data.err_msg = this.err_msg;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ok != false)
                writer.writeBool(1, this.ok);
            if (this.err_msg.length)
                writer.writeString(2, this.err_msg);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GlResp {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GlResp();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ok = reader.readBool();
                        break;
                    case 2:
                        message.err_msg = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GlResp {
            return GlResp.deserialize(bytes);
        }
    }
    export class WorkerTransferAllReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            consult_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("consult_id" in data && data.consult_id != undefined) {
                    this.consult_id = data.consult_id;
                }
            }
        }
        get consult_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set consult_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            consult_id?: number;
        }): WorkerTransferAllReq {
            const message = new WorkerTransferAllReq({});
            if (data.consult_id != null) {
                message.consult_id = data.consult_id;
            }
            return message;
        }
        toObject() {
            const data: {
                consult_id?: number;
            } = {};
            if (this.consult_id != null) {
                data.consult_id = this.consult_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.consult_id != 0)
                writer.writeUint32(1, this.consult_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WorkerTransferAllReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WorkerTransferAllReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.consult_id = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WorkerTransferAllReq {
            return WorkerTransferAllReq.deserialize(bytes);
        }
    }
    export class WorkerTransferAllResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ok?: boolean;
            msg?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ok" in data && data.ok != undefined) {
                    this.ok = data.ok;
                }
                if ("msg" in data && data.msg != undefined) {
                    this.msg = data.msg;
                }
            }
        }
        get ok() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set ok(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get msg() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set msg(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            ok?: boolean;
            msg?: string;
        }): WorkerTransferAllResp {
            const message = new WorkerTransferAllResp({});
            if (data.ok != null) {
                message.ok = data.ok;
            }
            if (data.msg != null) {
                message.msg = data.msg;
            }
            return message;
        }
        toObject() {
            const data: {
                ok?: boolean;
                msg?: string;
            } = {};
            if (this.ok != null) {
                data.ok = this.ok;
            }
            if (this.msg != null) {
                data.msg = this.msg;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ok != false)
                writer.writeBool(1, this.ok);
            if (this.msg.length)
                writer.writeString(2, this.msg);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WorkerTransferAllResp {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WorkerTransferAllResp();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ok = reader.readBool();
                        break;
                    case 2:
                        message.msg = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WorkerTransferAllResp {
            return WorkerTransferAllResp.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedWorkerService {
        static definition = {
            DataQuery: {
                path: "/api.core.Worker/DataQuery",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DataQueryRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DataQueryRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: DataQueryResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => DataQueryResponse.deserialize(new Uint8Array(bytes))
            },
            QueryFronter: {
                path: "/api.core.Worker/QueryFronter",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryFronterRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryFronterRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryFronterResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryFronterResponse.deserialize(new Uint8Array(bytes))
            },
            Query: {
                path: "/api.core.Worker/Query",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: WorkerQueryRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => WorkerQueryRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: WorkerQueryResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => WorkerQueryResponse.deserialize(new Uint8Array(bytes))
            },
            Create: {
                path: "/api.core.Worker/Create",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: WorkerCreateRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => WorkerCreateRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            Update: {
                path: "/api.core.Worker/Update",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: WorkerUpdateRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => WorkerUpdateRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            Delete: {
                path: "/api.core.Worker/Delete",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: WorkerDeleteRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => WorkerDeleteRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            Transfer: {
                path: "/api.core.Worker/Transfer",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: WorkerTransferRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => WorkerTransferRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            TransferConsults: {
                path: "/api.core.Worker/TransferConsults",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: WorkerTransferConsultsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => WorkerTransferConsultsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: WorkerTransferConsultsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => WorkerTransferConsultsResponse.deserialize(new Uint8Array(bytes))
            },
            TransferAll: {
                path: "/api.core.Worker/TransferAll",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: WorkerTransferAllReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => WorkerTransferAllReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: WorkerTransferAllResp) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => WorkerTransferAllResp.deserialize(new Uint8Array(bytes))
            },
            UnbindAll: {
                path: "/api.core.Worker/UnbindAll",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: WorkerTransferAllReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => WorkerTransferAllReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: WorkerTransferAllResp) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => WorkerTransferAllResp.deserialize(new Uint8Array(bytes))
            },
            GetWorkerStatus: {
                path: "/api.core.Worker/GetWorkerStatus",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetWorkerStatusRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetWorkerStatusRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetWorkerStatusResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetWorkerStatusResponse.deserialize(new Uint8Array(bytes))
            },
            SetWorkerStatus: {
                path: "/api.core.Worker/SetWorkerStatus",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: SetWorkerStatusRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => SetWorkerStatusRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            CheckWorkerStatus: {
                path: "/api.core.Worker/CheckWorkerStatus",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CheckWorkerStatusRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CheckWorkerStatusRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            Password: {
                path: "/api.core.Worker/Password",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: PasswordRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => PasswordRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            BlacklistApply: {
                path: "/api.core.Worker/BlacklistApply",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: BlacklistApplyRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => BlacklistApplyRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            BlacklistConfirm: {
                path: "/api.core.Worker/BlacklistConfirm",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: BlacklistConfirmRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => BlacklistConfirmRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            BlacklistRecover: {
                path: "/api.core.Worker/BlacklistRecover",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: BlacklistRecoverRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => BlacklistRecoverRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            QueryByPerm: {
                path: "/api.core.Worker/QueryByPerm",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QuerySpecPermWorkerRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QuerySpecPermWorkerRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QuerySpecPermWorkerResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QuerySpecPermWorkerResponse.deserialize(new Uint8Array(bytes))
            },
            TryCleanupAssignedWorker: {
                path: "/api.core.Worker/TryCleanupAssignedWorker",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.google.protobuf.Empty) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.google.protobuf.Empty.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: TryCleanupAssignedWorkerResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => TryCleanupAssignedWorkerResponse.deserialize(new Uint8Array(bytes))
            },
            QuerySelf: {
                path: "/api.core.Worker/QuerySelf",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.google.protobuf.Empty) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.google.protobuf.Empty.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: WorkerQuerySelfResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => WorkerQuerySelfResponse.deserialize(new Uint8Array(bytes))
            },
            UnfreezeSession: {
                path: "/api.core.Worker/UnfreezeSession",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UnfreezeSessionRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UnfreezeSessionRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: UnfreezeSessionResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => UnfreezeSessionResponse.deserialize(new Uint8Array(bytes))
            },
            QuerySession: {
                path: "/api.core.Worker/QuerySession",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QuerySessionRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QuerySessionRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QuerySessionResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QuerySessionResponse.deserialize(new Uint8Array(bytes))
            },
            CreateNimAccount: {
                path: "/api.core.Worker/CreateNimAccount",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: NIMAccountRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => NIMAccountRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: NIMAccountResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => NIMAccountResponse.deserialize(new Uint8Array(bytes))
            },
            NotifyMessage: {
                path: "/api.core.Worker/NotifyMessage",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: NotifyMessageRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => NotifyMessageRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            TransferWithDraWal: {
                path: "/api.core.Worker/TransferWithDraWal",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: TransferMessageReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => TransferMessageReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: TransferMessageRsp) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => TransferMessageRsp.deserialize(new Uint8Array(bytes))
            },
            QueryChildByGroup: {
                path: "/api.core.Worker/QueryChildByGroup",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryChildByGroupRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryChildByGroupRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryChildByGroupResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryChildByGroupResponse.deserialize(new Uint8Array(bytes))
            },
            QueryCustomer: {
                path: "/api.core.Worker/QueryCustomer",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: SessionCustomerQueryRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => SessionCustomerQueryRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: SessionCustomerQueryResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => SessionCustomerQueryResponse.deserialize(new Uint8Array(bytes))
            },
            Disable: {
                path: "/api.core.Worker/Disable",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: WorkerDisableRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => WorkerDisableRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            ApplyWorkerState: {
                path: "/api.core.Worker/ApplyWorkerState",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ApplyWorkerStateRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ApplyWorkerStateRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            GetApplyWorkerStateList: {
                path: "/api.core.Worker/GetApplyWorkerStateList",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetApplyWorkerStateListReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetApplyWorkerStateListReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetApplyWorkerStateListResp) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetApplyWorkerStateListResp.deserialize(new Uint8Array(bytes))
            },
            CheckWorkerState: {
                path: "/api.core.Worker/CheckWorkerState",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CheckWorkerStateReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CheckWorkerStateReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            GetApplyWorkerState: {
                path: "/api.core.Worker/GetApplyWorkerState",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.google.protobuf.Empty) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.google.protobuf.Empty.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetApplyWorkerStateResp) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetApplyWorkerStateResp.deserialize(new Uint8Array(bytes))
            },
            HistoryRecharges: {
                path: "/api.core.Worker/HistoryRecharges",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: HistoryRechargesRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => HistoryRechargesRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: HistoryRechargesResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => HistoryRechargesResponse.deserialize(new Uint8Array(bytes))
            },
            GetGlUrl: {
                path: "/api.core.Worker/GetGlUrl",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.google.protobuf.Empty) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.google.protobuf.Empty.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetQlUrlResp) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetQlUrlResp.deserialize(new Uint8Array(bytes))
            },
            BindGl: {
                path: "/api.core.Worker/BindGl",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GlReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GlReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GlResp) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GlResp.deserialize(new Uint8Array(bytes))
            },
            VerifyGl: {
                path: "/api.core.Worker/VerifyGl",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GlReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GlReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GlResp) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GlResp.deserialize(new Uint8Array(bytes))
            },
            ResetGl: {
                path: "/api.core.Worker/ResetGl",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GlReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GlReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GlResp) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GlResp.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract DataQuery(call: grpc_1.ServerUnaryCall<DataQueryRequest, DataQueryResponse>, callback: grpc_1.sendUnaryData<DataQueryResponse>): void;
        abstract QueryFronter(call: grpc_1.ServerUnaryCall<QueryFronterRequest, QueryFronterResponse>, callback: grpc_1.sendUnaryData<QueryFronterResponse>): void;
        abstract Query(call: grpc_1.ServerUnaryCall<WorkerQueryRequest, WorkerQueryResponse>, callback: grpc_1.sendUnaryData<WorkerQueryResponse>): void;
        abstract Create(call: grpc_1.ServerUnaryCall<WorkerCreateRequest, dependency_1.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_1.google.protobuf.Empty>): void;
        abstract Update(call: grpc_1.ServerUnaryCall<WorkerUpdateRequest, dependency_1.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_1.google.protobuf.Empty>): void;
        abstract Delete(call: grpc_1.ServerUnaryCall<WorkerDeleteRequest, dependency_1.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_1.google.protobuf.Empty>): void;
        abstract Transfer(call: grpc_1.ServerUnaryCall<WorkerTransferRequest, dependency_1.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_1.google.protobuf.Empty>): void;
        abstract TransferConsults(call: grpc_1.ServerUnaryCall<WorkerTransferConsultsRequest, WorkerTransferConsultsResponse>, callback: grpc_1.sendUnaryData<WorkerTransferConsultsResponse>): void;
        abstract TransferAll(call: grpc_1.ServerUnaryCall<WorkerTransferAllReq, WorkerTransferAllResp>, callback: grpc_1.sendUnaryData<WorkerTransferAllResp>): void;
        abstract UnbindAll(call: grpc_1.ServerUnaryCall<WorkerTransferAllReq, WorkerTransferAllResp>, callback: grpc_1.sendUnaryData<WorkerTransferAllResp>): void;
        abstract GetWorkerStatus(call: grpc_1.ServerUnaryCall<GetWorkerStatusRequest, GetWorkerStatusResponse>, callback: grpc_1.sendUnaryData<GetWorkerStatusResponse>): void;
        abstract SetWorkerStatus(call: grpc_1.ServerUnaryCall<SetWorkerStatusRequest, dependency_1.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_1.google.protobuf.Empty>): void;
        abstract CheckWorkerStatus(call: grpc_1.ServerUnaryCall<CheckWorkerStatusRequest, dependency_1.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_1.google.protobuf.Empty>): void;
        abstract Password(call: grpc_1.ServerUnaryCall<PasswordRequest, dependency_1.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_1.google.protobuf.Empty>): void;
        abstract BlacklistApply(call: grpc_1.ServerUnaryCall<BlacklistApplyRequest, dependency_1.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_1.google.protobuf.Empty>): void;
        abstract BlacklistConfirm(call: grpc_1.ServerUnaryCall<BlacklistConfirmRequest, dependency_1.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_1.google.protobuf.Empty>): void;
        abstract BlacklistRecover(call: grpc_1.ServerUnaryCall<BlacklistRecoverRequest, dependency_1.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_1.google.protobuf.Empty>): void;
        abstract QueryByPerm(call: grpc_1.ServerUnaryCall<QuerySpecPermWorkerRequest, QuerySpecPermWorkerResponse>, callback: grpc_1.sendUnaryData<QuerySpecPermWorkerResponse>): void;
        abstract TryCleanupAssignedWorker(call: grpc_1.ServerUnaryCall<dependency_1.google.protobuf.Empty, TryCleanupAssignedWorkerResponse>, callback: grpc_1.sendUnaryData<TryCleanupAssignedWorkerResponse>): void;
        abstract QuerySelf(call: grpc_1.ServerUnaryCall<dependency_1.google.protobuf.Empty, WorkerQuerySelfResponse>, callback: grpc_1.sendUnaryData<WorkerQuerySelfResponse>): void;
        abstract UnfreezeSession(call: grpc_1.ServerUnaryCall<UnfreezeSessionRequest, UnfreezeSessionResponse>, callback: grpc_1.sendUnaryData<UnfreezeSessionResponse>): void;
        abstract QuerySession(call: grpc_1.ServerUnaryCall<QuerySessionRequest, QuerySessionResponse>, callback: grpc_1.sendUnaryData<QuerySessionResponse>): void;
        abstract CreateNimAccount(call: grpc_1.ServerUnaryCall<NIMAccountRequest, NIMAccountResponse>, callback: grpc_1.sendUnaryData<NIMAccountResponse>): void;
        abstract NotifyMessage(call: grpc_1.ServerUnaryCall<NotifyMessageRequest, dependency_1.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_1.google.protobuf.Empty>): void;
        abstract TransferWithDraWal(call: grpc_1.ServerUnaryCall<TransferMessageReq, TransferMessageRsp>, callback: grpc_1.sendUnaryData<TransferMessageRsp>): void;
        abstract QueryChildByGroup(call: grpc_1.ServerUnaryCall<QueryChildByGroupRequest, QueryChildByGroupResponse>, callback: grpc_1.sendUnaryData<QueryChildByGroupResponse>): void;
        abstract QueryCustomer(call: grpc_1.ServerUnaryCall<SessionCustomerQueryRequest, SessionCustomerQueryResponse>, callback: grpc_1.sendUnaryData<SessionCustomerQueryResponse>): void;
        abstract Disable(call: grpc_1.ServerUnaryCall<WorkerDisableRequest, dependency_1.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_1.google.protobuf.Empty>): void;
        abstract ApplyWorkerState(call: grpc_1.ServerUnaryCall<ApplyWorkerStateRequest, dependency_1.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_1.google.protobuf.Empty>): void;
        abstract GetApplyWorkerStateList(call: grpc_1.ServerUnaryCall<GetApplyWorkerStateListReq, GetApplyWorkerStateListResp>, callback: grpc_1.sendUnaryData<GetApplyWorkerStateListResp>): void;
        abstract CheckWorkerState(call: grpc_1.ServerUnaryCall<CheckWorkerStateReq, dependency_1.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_1.google.protobuf.Empty>): void;
        abstract GetApplyWorkerState(call: grpc_1.ServerUnaryCall<dependency_1.google.protobuf.Empty, GetApplyWorkerStateResp>, callback: grpc_1.sendUnaryData<GetApplyWorkerStateResp>): void;
        abstract HistoryRecharges(call: grpc_1.ServerUnaryCall<HistoryRechargesRequest, HistoryRechargesResponse>, callback: grpc_1.sendUnaryData<HistoryRechargesResponse>): void;
        abstract GetGlUrl(call: grpc_1.ServerUnaryCall<dependency_1.google.protobuf.Empty, GetQlUrlResp>, callback: grpc_1.sendUnaryData<GetQlUrlResp>): void;
        abstract BindGl(call: grpc_1.ServerUnaryCall<GlReq, GlResp>, callback: grpc_1.sendUnaryData<GlResp>): void;
        abstract VerifyGl(call: grpc_1.ServerUnaryCall<GlReq, GlResp>, callback: grpc_1.sendUnaryData<GlResp>): void;
        abstract ResetGl(call: grpc_1.ServerUnaryCall<GlReq, GlResp>, callback: grpc_1.sendUnaryData<GlResp>): void;
    }
    export class WorkerClient extends grpc_1.makeGenericClientConstructor(UnimplementedWorkerService.definition, "Worker", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        DataQuery: GrpcUnaryServiceInterface<DataQueryRequest, DataQueryResponse> = (message: DataQueryRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<DataQueryResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<DataQueryResponse>, callback?: grpc_1.requestCallback<DataQueryResponse>): grpc_1.ClientUnaryCall => {
            return super.DataQuery(message, metadata, options, callback);
        };
        QueryFronter: GrpcUnaryServiceInterface<QueryFronterRequest, QueryFronterResponse> = (message: QueryFronterRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryFronterResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryFronterResponse>, callback?: grpc_1.requestCallback<QueryFronterResponse>): grpc_1.ClientUnaryCall => {
            return super.QueryFronter(message, metadata, options, callback);
        };
        Query: GrpcUnaryServiceInterface<WorkerQueryRequest, WorkerQueryResponse> = (message: WorkerQueryRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<WorkerQueryResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<WorkerQueryResponse>, callback?: grpc_1.requestCallback<WorkerQueryResponse>): grpc_1.ClientUnaryCall => {
            return super.Query(message, metadata, options, callback);
        };
        Create: GrpcUnaryServiceInterface<WorkerCreateRequest, dependency_1.google.protobuf.Empty> = (message: WorkerCreateRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_1.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.Create(message, metadata, options, callback);
        };
        Update: GrpcUnaryServiceInterface<WorkerUpdateRequest, dependency_1.google.protobuf.Empty> = (message: WorkerUpdateRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_1.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.Update(message, metadata, options, callback);
        };
        Delete: GrpcUnaryServiceInterface<WorkerDeleteRequest, dependency_1.google.protobuf.Empty> = (message: WorkerDeleteRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_1.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.Delete(message, metadata, options, callback);
        };
        Transfer: GrpcUnaryServiceInterface<WorkerTransferRequest, dependency_1.google.protobuf.Empty> = (message: WorkerTransferRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_1.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.Transfer(message, metadata, options, callback);
        };
        TransferConsults: GrpcUnaryServiceInterface<WorkerTransferConsultsRequest, WorkerTransferConsultsResponse> = (message: WorkerTransferConsultsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<WorkerTransferConsultsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<WorkerTransferConsultsResponse>, callback?: grpc_1.requestCallback<WorkerTransferConsultsResponse>): grpc_1.ClientUnaryCall => {
            return super.TransferConsults(message, metadata, options, callback);
        };
        TransferAll: GrpcUnaryServiceInterface<WorkerTransferAllReq, WorkerTransferAllResp> = (message: WorkerTransferAllReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<WorkerTransferAllResp>, options?: grpc_1.CallOptions | grpc_1.requestCallback<WorkerTransferAllResp>, callback?: grpc_1.requestCallback<WorkerTransferAllResp>): grpc_1.ClientUnaryCall => {
            return super.TransferAll(message, metadata, options, callback);
        };
        UnbindAll: GrpcUnaryServiceInterface<WorkerTransferAllReq, WorkerTransferAllResp> = (message: WorkerTransferAllReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<WorkerTransferAllResp>, options?: grpc_1.CallOptions | grpc_1.requestCallback<WorkerTransferAllResp>, callback?: grpc_1.requestCallback<WorkerTransferAllResp>): grpc_1.ClientUnaryCall => {
            return super.UnbindAll(message, metadata, options, callback);
        };
        GetWorkerStatus: GrpcUnaryServiceInterface<GetWorkerStatusRequest, GetWorkerStatusResponse> = (message: GetWorkerStatusRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetWorkerStatusResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetWorkerStatusResponse>, callback?: grpc_1.requestCallback<GetWorkerStatusResponse>): grpc_1.ClientUnaryCall => {
            return super.GetWorkerStatus(message, metadata, options, callback);
        };
        SetWorkerStatus: GrpcUnaryServiceInterface<SetWorkerStatusRequest, dependency_1.google.protobuf.Empty> = (message: SetWorkerStatusRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_1.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.SetWorkerStatus(message, metadata, options, callback);
        };
        CheckWorkerStatus: GrpcUnaryServiceInterface<CheckWorkerStatusRequest, dependency_1.google.protobuf.Empty> = (message: CheckWorkerStatusRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_1.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.CheckWorkerStatus(message, metadata, options, callback);
        };
        Password: GrpcUnaryServiceInterface<PasswordRequest, dependency_1.google.protobuf.Empty> = (message: PasswordRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_1.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.Password(message, metadata, options, callback);
        };
        BlacklistApply: GrpcUnaryServiceInterface<BlacklistApplyRequest, dependency_1.google.protobuf.Empty> = (message: BlacklistApplyRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_1.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.BlacklistApply(message, metadata, options, callback);
        };
        BlacklistConfirm: GrpcUnaryServiceInterface<BlacklistConfirmRequest, dependency_1.google.protobuf.Empty> = (message: BlacklistConfirmRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_1.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.BlacklistConfirm(message, metadata, options, callback);
        };
        BlacklistRecover: GrpcUnaryServiceInterface<BlacklistRecoverRequest, dependency_1.google.protobuf.Empty> = (message: BlacklistRecoverRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_1.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.BlacklistRecover(message, metadata, options, callback);
        };
        QueryByPerm: GrpcUnaryServiceInterface<QuerySpecPermWorkerRequest, QuerySpecPermWorkerResponse> = (message: QuerySpecPermWorkerRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QuerySpecPermWorkerResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QuerySpecPermWorkerResponse>, callback?: grpc_1.requestCallback<QuerySpecPermWorkerResponse>): grpc_1.ClientUnaryCall => {
            return super.QueryByPerm(message, metadata, options, callback);
        };
        TryCleanupAssignedWorker: GrpcUnaryServiceInterface<dependency_1.google.protobuf.Empty, TryCleanupAssignedWorkerResponse> = (message: dependency_1.google.protobuf.Empty, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<TryCleanupAssignedWorkerResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<TryCleanupAssignedWorkerResponse>, callback?: grpc_1.requestCallback<TryCleanupAssignedWorkerResponse>): grpc_1.ClientUnaryCall => {
            return super.TryCleanupAssignedWorker(message, metadata, options, callback);
        };
        QuerySelf: GrpcUnaryServiceInterface<dependency_1.google.protobuf.Empty, WorkerQuerySelfResponse> = (message: dependency_1.google.protobuf.Empty, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<WorkerQuerySelfResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<WorkerQuerySelfResponse>, callback?: grpc_1.requestCallback<WorkerQuerySelfResponse>): grpc_1.ClientUnaryCall => {
            return super.QuerySelf(message, metadata, options, callback);
        };
        UnfreezeSession: GrpcUnaryServiceInterface<UnfreezeSessionRequest, UnfreezeSessionResponse> = (message: UnfreezeSessionRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<UnfreezeSessionResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<UnfreezeSessionResponse>, callback?: grpc_1.requestCallback<UnfreezeSessionResponse>): grpc_1.ClientUnaryCall => {
            return super.UnfreezeSession(message, metadata, options, callback);
        };
        QuerySession: GrpcUnaryServiceInterface<QuerySessionRequest, QuerySessionResponse> = (message: QuerySessionRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QuerySessionResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QuerySessionResponse>, callback?: grpc_1.requestCallback<QuerySessionResponse>): grpc_1.ClientUnaryCall => {
            return super.QuerySession(message, metadata, options, callback);
        };
        CreateNimAccount: GrpcUnaryServiceInterface<NIMAccountRequest, NIMAccountResponse> = (message: NIMAccountRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<NIMAccountResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<NIMAccountResponse>, callback?: grpc_1.requestCallback<NIMAccountResponse>): grpc_1.ClientUnaryCall => {
            return super.CreateNimAccount(message, metadata, options, callback);
        };
        NotifyMessage: GrpcUnaryServiceInterface<NotifyMessageRequest, dependency_1.google.protobuf.Empty> = (message: NotifyMessageRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_1.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.NotifyMessage(message, metadata, options, callback);
        };
        TransferWithDraWal: GrpcUnaryServiceInterface<TransferMessageReq, TransferMessageRsp> = (message: TransferMessageReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<TransferMessageRsp>, options?: grpc_1.CallOptions | grpc_1.requestCallback<TransferMessageRsp>, callback?: grpc_1.requestCallback<TransferMessageRsp>): grpc_1.ClientUnaryCall => {
            return super.TransferWithDraWal(message, metadata, options, callback);
        };
        QueryChildByGroup: GrpcUnaryServiceInterface<QueryChildByGroupRequest, QueryChildByGroupResponse> = (message: QueryChildByGroupRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryChildByGroupResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryChildByGroupResponse>, callback?: grpc_1.requestCallback<QueryChildByGroupResponse>): grpc_1.ClientUnaryCall => {
            return super.QueryChildByGroup(message, metadata, options, callback);
        };
        QueryCustomer: GrpcUnaryServiceInterface<SessionCustomerQueryRequest, SessionCustomerQueryResponse> = (message: SessionCustomerQueryRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<SessionCustomerQueryResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<SessionCustomerQueryResponse>, callback?: grpc_1.requestCallback<SessionCustomerQueryResponse>): grpc_1.ClientUnaryCall => {
            return super.QueryCustomer(message, metadata, options, callback);
        };
        Disable: GrpcUnaryServiceInterface<WorkerDisableRequest, dependency_1.google.protobuf.Empty> = (message: WorkerDisableRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_1.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.Disable(message, metadata, options, callback);
        };
        ApplyWorkerState: GrpcUnaryServiceInterface<ApplyWorkerStateRequest, dependency_1.google.protobuf.Empty> = (message: ApplyWorkerStateRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_1.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.ApplyWorkerState(message, metadata, options, callback);
        };
        GetApplyWorkerStateList: GrpcUnaryServiceInterface<GetApplyWorkerStateListReq, GetApplyWorkerStateListResp> = (message: GetApplyWorkerStateListReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetApplyWorkerStateListResp>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetApplyWorkerStateListResp>, callback?: grpc_1.requestCallback<GetApplyWorkerStateListResp>): grpc_1.ClientUnaryCall => {
            return super.GetApplyWorkerStateList(message, metadata, options, callback);
        };
        CheckWorkerState: GrpcUnaryServiceInterface<CheckWorkerStateReq, dependency_1.google.protobuf.Empty> = (message: CheckWorkerStateReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_1.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.CheckWorkerState(message, metadata, options, callback);
        };
        GetApplyWorkerState: GrpcUnaryServiceInterface<dependency_1.google.protobuf.Empty, GetApplyWorkerStateResp> = (message: dependency_1.google.protobuf.Empty, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetApplyWorkerStateResp>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetApplyWorkerStateResp>, callback?: grpc_1.requestCallback<GetApplyWorkerStateResp>): grpc_1.ClientUnaryCall => {
            return super.GetApplyWorkerState(message, metadata, options, callback);
        };
        HistoryRecharges: GrpcUnaryServiceInterface<HistoryRechargesRequest, HistoryRechargesResponse> = (message: HistoryRechargesRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<HistoryRechargesResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<HistoryRechargesResponse>, callback?: grpc_1.requestCallback<HistoryRechargesResponse>): grpc_1.ClientUnaryCall => {
            return super.HistoryRecharges(message, metadata, options, callback);
        };
        GetGlUrl: GrpcUnaryServiceInterface<dependency_1.google.protobuf.Empty, GetQlUrlResp> = (message: dependency_1.google.protobuf.Empty, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetQlUrlResp>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetQlUrlResp>, callback?: grpc_1.requestCallback<GetQlUrlResp>): grpc_1.ClientUnaryCall => {
            return super.GetGlUrl(message, metadata, options, callback);
        };
        BindGl: GrpcUnaryServiceInterface<GlReq, GlResp> = (message: GlReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GlResp>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GlResp>, callback?: grpc_1.requestCallback<GlResp>): grpc_1.ClientUnaryCall => {
            return super.BindGl(message, metadata, options, callback);
        };
        VerifyGl: GrpcUnaryServiceInterface<GlReq, GlResp> = (message: GlReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GlResp>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GlResp>, callback?: grpc_1.requestCallback<GlResp>): grpc_1.ClientUnaryCall => {
            return super.VerifyGl(message, metadata, options, callback);
        };
        ResetGl: GrpcUnaryServiceInterface<GlReq, GlResp> = (message: GlReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GlResp>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GlResp>, callback?: grpc_1.requestCallback<GlResp>): grpc_1.ClientUnaryCall => {
            return super.ResetGl(message, metadata, options, callback);
        };
    }
}
