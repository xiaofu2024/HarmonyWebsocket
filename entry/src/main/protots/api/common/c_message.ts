/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.26.1
 * source: api/common/c_message.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../google/protobuf/timestamp";
import * as dependency_2 from "./c_asset";
import * as dependency_3 from "./c_device";
import * as dependency_4 from "./../../google/protobuf/wrappers";
import * as dependency_5 from "./../../validate/validate";
import * as pb_1 from "google-protobuf";
export namespace api.common {
    export enum ChatState {
        CHAT_STATE_COMMON = 0,
        CHAT_STATE_TRANSFER = 1,
        CHAT_STATE_UNPROCESSED_3MIN = 2,
        CHAT_STATE_TIMEOUT = 3,
        CHAT_STATE_PROCESSED = 4,
        CHAT_STATE_BLACKLIST_APPLY = 5,
        CHAT_STATE_BLACKLIST_CONFIRMED = 6,
        CHAT_STATE_FREE = 7
    }
    export enum MessageFormat {
        MSG_TEXT = 0,
        MSG_IMG = 1,
        MSG_VOICE = 2,
        MSG_VIDEO = 3,
        MSG_GEO = 4,
        MSG_FILE = 6
    }
    export enum MessageRole {
        MSG_ROLE_SYSTEM = 0,
        MSG_ROLE_WORKER = 1,
        MSG_ROLE_CUSTOMER = 2,
        MSG_ROLE_ANONYMOUS = 3
    }
    export enum MsgSourceType {
        MST_DEFAULT = 0,
        MST_WORKER = 1,
        MST_CUSTOMER = 2,
        MST_SYSTEM_WORKER = 3,
        MST_SYSTEM_CUSTOMER = 4
    }
    export enum MessageOperate {
        MSG_OP_POST = 0,
        MSG_OP_EDIT = 1,
        MSG_OP_DELETE = 2
    }
    export class MessageContent extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            data?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get data() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set data(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            data?: string;
        }): MessageContent {
            const message = new MessageContent({});
            if (data.data != null) {
                message.data = data.data;
            }
            return message;
        }
        toObject() {
            const data: {
                data?: string;
            } = {};
            if (this.data != null) {
                data.data = this.data;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.data.length)
                writer.writeString(1, this.data);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MessageContent {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MessageContent();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.data = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MessageContent {
            return MessageContent.deserialize(bytes);
        }
    }
    export class MessageImage extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            uri?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("uri" in data && data.uri != undefined) {
                    this.uri = data.uri;
                }
            }
        }
        get uri() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set uri(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            uri?: string;
        }): MessageImage {
            const message = new MessageImage({});
            if (data.uri != null) {
                message.uri = data.uri;
            }
            return message;
        }
        toObject() {
            const data: {
                uri?: string;
            } = {};
            if (this.uri != null) {
                data.uri = this.uri;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.uri.length)
                writer.writeString(1, this.uri);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MessageImage {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MessageImage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.uri = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MessageImage {
            return MessageImage.deserialize(bytes);
        }
    }
    export class MessageAudio extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            uri?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("uri" in data && data.uri != undefined) {
                    this.uri = data.uri;
                }
            }
        }
        get uri() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set uri(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            uri?: string;
        }): MessageAudio {
            const message = new MessageAudio({});
            if (data.uri != null) {
                message.uri = data.uri;
            }
            return message;
        }
        toObject() {
            const data: {
                uri?: string;
            } = {};
            if (this.uri != null) {
                data.uri = this.uri;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.uri.length)
                writer.writeString(1, this.uri);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MessageAudio {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MessageAudio();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.uri = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MessageAudio {
            return MessageAudio.deserialize(bytes);
        }
    }
    export class MessageVideo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            uri?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("uri" in data && data.uri != undefined) {
                    this.uri = data.uri;
                }
            }
        }
        get uri() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set uri(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            uri?: string;
        }): MessageVideo {
            const message = new MessageVideo({});
            if (data.uri != null) {
                message.uri = data.uri;
            }
            return message;
        }
        toObject() {
            const data: {
                uri?: string;
            } = {};
            if (this.uri != null) {
                data.uri = this.uri;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.uri.length)
                writer.writeString(1, this.uri);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MessageVideo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MessageVideo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.uri = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MessageVideo {
            return MessageVideo.deserialize(bytes);
        }
    }
    export class MessageGeo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            longitude?: string;
            latitude?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("longitude" in data && data.longitude != undefined) {
                    this.longitude = data.longitude;
                }
                if ("latitude" in data && data.latitude != undefined) {
                    this.latitude = data.latitude;
                }
            }
        }
        get longitude() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set longitude(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get latitude() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set latitude(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            longitude?: string;
            latitude?: string;
        }): MessageGeo {
            const message = new MessageGeo({});
            if (data.longitude != null) {
                message.longitude = data.longitude;
            }
            if (data.latitude != null) {
                message.latitude = data.latitude;
            }
            return message;
        }
        toObject() {
            const data: {
                longitude?: string;
                latitude?: string;
            } = {};
            if (this.longitude != null) {
                data.longitude = this.longitude;
            }
            if (this.latitude != null) {
                data.latitude = this.latitude;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.longitude.length)
                writer.writeString(1, this.longitude);
            if (this.latitude.length)
                writer.writeString(2, this.latitude);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MessageGeo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MessageGeo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.longitude = reader.readString();
                        break;
                    case 2:
                        message.latitude = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MessageGeo {
            return MessageGeo.deserialize(bytes);
        }
    }
    export class MessageFile extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            uri?: string;
            file_name?: string;
            size?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("uri" in data && data.uri != undefined) {
                    this.uri = data.uri;
                }
                if ("file_name" in data && data.file_name != undefined) {
                    this.file_name = data.file_name;
                }
                if ("size" in data && data.size != undefined) {
                    this.size = data.size;
                }
            }
        }
        get uri() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set uri(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get file_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set file_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get size() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set size(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            uri?: string;
            file_name?: string;
            size?: number;
        }): MessageFile {
            const message = new MessageFile({});
            if (data.uri != null) {
                message.uri = data.uri;
            }
            if (data.file_name != null) {
                message.file_name = data.file_name;
            }
            if (data.size != null) {
                message.size = data.size;
            }
            return message;
        }
        toObject() {
            const data: {
                uri?: string;
                file_name?: string;
                size?: number;
            } = {};
            if (this.uri != null) {
                data.uri = this.uri;
            }
            if (this.file_name != null) {
                data.file_name = this.file_name;
            }
            if (this.size != null) {
                data.size = this.size;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.uri.length)
                writer.writeString(1, this.uri);
            if (this.file_name.length)
                writer.writeString(2, this.file_name);
            if (this.size != 0)
                writer.writeInt32(3, this.size);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MessageFile {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MessageFile();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.uri = reader.readString();
                        break;
                    case 2:
                        message.file_name = reader.readString();
                        break;
                    case 3:
                        message.size = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MessageFile {
            return MessageFile.deserialize(bytes);
        }
    }
    export class MessageUnion extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2, 3, 4, 5, 6]];
        constructor(data?: any[] | ({} & (({
            content?: MessageContent;
            image?: never;
            audio?: never;
            video?: never;
            geo?: never;
            file?: never;
        } | {
            content?: never;
            image?: MessageImage;
            audio?: never;
            video?: never;
            geo?: never;
            file?: never;
        } | {
            content?: never;
            image?: never;
            audio?: MessageAudio;
            video?: never;
            geo?: never;
            file?: never;
        } | {
            content?: never;
            image?: never;
            audio?: never;
            video?: MessageVideo;
            geo?: never;
            file?: never;
        } | {
            content?: never;
            image?: never;
            audio?: never;
            video?: never;
            geo?: MessageGeo;
            file?: never;
        } | {
            content?: never;
            image?: never;
            audio?: never;
            video?: never;
            geo?: never;
            file?: MessageFile;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("content" in data && data.content != undefined) {
                    this.content = data.content;
                }
                if ("image" in data && data.image != undefined) {
                    this.image = data.image;
                }
                if ("audio" in data && data.audio != undefined) {
                    this.audio = data.audio;
                }
                if ("video" in data && data.video != undefined) {
                    this.video = data.video;
                }
                if ("geo" in data && data.geo != undefined) {
                    this.geo = data.geo;
                }
                if ("file" in data && data.file != undefined) {
                    this.file = data.file;
                }
            }
        }
        get content() {
            return pb_1.Message.getWrapperField(this, MessageContent, 1) as MessageContent;
        }
        set content(value: MessageContent) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_content() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get image() {
            return pb_1.Message.getWrapperField(this, MessageImage, 2) as MessageImage;
        }
        set image(value: MessageImage) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_image() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get audio() {
            return pb_1.Message.getWrapperField(this, MessageAudio, 3) as MessageAudio;
        }
        set audio(value: MessageAudio) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_audio() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get video() {
            return pb_1.Message.getWrapperField(this, MessageVideo, 4) as MessageVideo;
        }
        set video(value: MessageVideo) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_video() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get geo() {
            return pb_1.Message.getWrapperField(this, MessageGeo, 5) as MessageGeo;
        }
        set geo(value: MessageGeo) {
            pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
        }
        get has_geo() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get file() {
            return pb_1.Message.getWrapperField(this, MessageFile, 6) as MessageFile;
        }
        set file(value: MessageFile) {
            pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[0], value);
        }
        get has_file() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get payload() {
            const cases: {
                [index: number]: "none" | "content" | "image" | "audio" | "video" | "geo" | "file";
            } = {
                0: "none",
                1: "content",
                2: "image",
                3: "audio",
                4: "video",
                5: "geo",
                6: "file"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3, 4, 5, 6])];
        }
        static fromObject(data: {
            content?: ReturnType<typeof MessageContent.prototype.toObject>;
            image?: ReturnType<typeof MessageImage.prototype.toObject>;
            audio?: ReturnType<typeof MessageAudio.prototype.toObject>;
            video?: ReturnType<typeof MessageVideo.prototype.toObject>;
            geo?: ReturnType<typeof MessageGeo.prototype.toObject>;
            file?: ReturnType<typeof MessageFile.prototype.toObject>;
        }): MessageUnion {
            const message = new MessageUnion({});
            if (data.content != null) {
                message.content = MessageContent.fromObject(data.content);
            }
            if (data.image != null) {
                message.image = MessageImage.fromObject(data.image);
            }
            if (data.audio != null) {
                message.audio = MessageAudio.fromObject(data.audio);
            }
            if (data.video != null) {
                message.video = MessageVideo.fromObject(data.video);
            }
            if (data.geo != null) {
                message.geo = MessageGeo.fromObject(data.geo);
            }
            if (data.file != null) {
                message.file = MessageFile.fromObject(data.file);
            }
            return message;
        }
        toObject() {
            const data: {
                content?: ReturnType<typeof MessageContent.prototype.toObject>;
                image?: ReturnType<typeof MessageImage.prototype.toObject>;
                audio?: ReturnType<typeof MessageAudio.prototype.toObject>;
                video?: ReturnType<typeof MessageVideo.prototype.toObject>;
                geo?: ReturnType<typeof MessageGeo.prototype.toObject>;
                file?: ReturnType<typeof MessageFile.prototype.toObject>;
            } = {};
            if (this.content != null) {
                data.content = this.content.toObject();
            }
            if (this.image != null) {
                data.image = this.image.toObject();
            }
            if (this.audio != null) {
                data.audio = this.audio.toObject();
            }
            if (this.video != null) {
                data.video = this.video.toObject();
            }
            if (this.geo != null) {
                data.geo = this.geo.toObject();
            }
            if (this.file != null) {
                data.file = this.file.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_content)
                writer.writeMessage(1, this.content, () => this.content.serialize(writer));
            if (this.has_image)
                writer.writeMessage(2, this.image, () => this.image.serialize(writer));
            if (this.has_audio)
                writer.writeMessage(3, this.audio, () => this.audio.serialize(writer));
            if (this.has_video)
                writer.writeMessage(4, this.video, () => this.video.serialize(writer));
            if (this.has_geo)
                writer.writeMessage(5, this.geo, () => this.geo.serialize(writer));
            if (this.has_file)
                writer.writeMessage(6, this.file, () => this.file.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MessageUnion {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MessageUnion();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.content, () => message.content = MessageContent.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.image, () => message.image = MessageImage.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.audio, () => message.audio = MessageAudio.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.video, () => message.video = MessageVideo.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.geo, () => message.geo = MessageGeo.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.file, () => message.file = MessageFile.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MessageUnion {
            return MessageUnion.deserialize(bytes);
        }
    }
    export class MessageAutoReplyQA extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            question?: MessageUnion;
            answer?: MessageUnion[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("question" in data && data.question != undefined) {
                    this.question = data.question;
                }
                if ("answer" in data && data.answer != undefined) {
                    this.answer = data.answer;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get question() {
            return pb_1.Message.getWrapperField(this, MessageUnion, 2) as MessageUnion;
        }
        set question(value: MessageUnion) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_question() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get answer() {
            return pb_1.Message.getRepeatedWrapperField(this, MessageUnion, 3) as MessageUnion[];
        }
        set answer(value: MessageUnion[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        static fromObject(data: {
            id?: number;
            question?: ReturnType<typeof MessageUnion.prototype.toObject>;
            answer?: ReturnType<typeof MessageUnion.prototype.toObject>[];
        }): MessageAutoReplyQA {
            const message = new MessageAutoReplyQA({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.question != null) {
                message.question = MessageUnion.fromObject(data.question);
            }
            if (data.answer != null) {
                message.answer = data.answer.map(item => MessageUnion.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                question?: ReturnType<typeof MessageUnion.prototype.toObject>;
                answer?: ReturnType<typeof MessageUnion.prototype.toObject>[];
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.question != null) {
                data.question = this.question.toObject();
            }
            if (this.answer != null) {
                data.answer = this.answer.map((item: MessageUnion) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt32(1, this.id);
            if (this.has_question)
                writer.writeMessage(2, this.question, () => this.question.serialize(writer));
            if (this.answer.length)
                writer.writeRepeatedMessage(3, this.answer, (item: MessageUnion) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MessageAutoReplyQA {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MessageAutoReplyQA();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    case 2:
                        reader.readMessage(message.question, () => message.question = MessageUnion.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.answer, () => pb_1.Message.addToRepeatedWrapperField(message, 3, MessageUnion.deserialize(reader), MessageUnion));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MessageAutoReplyQA {
            return MessageAutoReplyQA.deserialize(bytes);
        }
    }
    export class MessageAutoReply extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            title?: string;
            delay_sec?: number;
            qa?: MessageAutoReplyQA[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("title" in data && data.title != undefined) {
                    this.title = data.title;
                }
                if ("delay_sec" in data && data.delay_sec != undefined) {
                    this.delay_sec = data.delay_sec;
                }
                if ("qa" in data && data.qa != undefined) {
                    this.qa = data.qa;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get title() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set title(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get delay_sec() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set delay_sec(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get qa() {
            return pb_1.Message.getRepeatedWrapperField(this, MessageAutoReplyQA, 4) as MessageAutoReplyQA[];
        }
        set qa(value: MessageAutoReplyQA[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        static fromObject(data: {
            id?: number;
            title?: string;
            delay_sec?: number;
            qa?: ReturnType<typeof MessageAutoReplyQA.prototype.toObject>[];
        }): MessageAutoReply {
            const message = new MessageAutoReply({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.title != null) {
                message.title = data.title;
            }
            if (data.delay_sec != null) {
                message.delay_sec = data.delay_sec;
            }
            if (data.qa != null) {
                message.qa = data.qa.map(item => MessageAutoReplyQA.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                title?: string;
                delay_sec?: number;
                qa?: ReturnType<typeof MessageAutoReplyQA.prototype.toObject>[];
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.title != null) {
                data.title = this.title;
            }
            if (this.delay_sec != null) {
                data.delay_sec = this.delay_sec;
            }
            if (this.qa != null) {
                data.qa = this.qa.map((item: MessageAutoReplyQA) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt64(1, this.id);
            if (this.title.length)
                writer.writeString(2, this.title);
            if (this.delay_sec != 0)
                writer.writeInt32(3, this.delay_sec);
            if (this.qa.length)
                writer.writeRepeatedMessage(4, this.qa, (item: MessageAutoReplyQA) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MessageAutoReply {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MessageAutoReply();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt64();
                        break;
                    case 2:
                        message.title = reader.readString();
                        break;
                    case 3:
                        message.delay_sec = reader.readInt32();
                        break;
                    case 4:
                        reader.readMessage(message.qa, () => pb_1.Message.addToRepeatedWrapperField(message, 4, MessageAutoReplyQA.deserialize(reader), MessageAutoReplyQA));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MessageAutoReply {
            return MessageAutoReply.deserialize(bytes);
        }
    }
    export class MessageKey extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            chat_id?: number;
            msg_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("chat_id" in data && data.chat_id != undefined) {
                    this.chat_id = data.chat_id;
                }
                if ("msg_id" in data && data.msg_id != undefined) {
                    this.msg_id = data.msg_id;
                }
            }
        }
        get chat_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set chat_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get msg_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set msg_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            chat_id?: number;
            msg_id?: number;
        }): MessageKey {
            const message = new MessageKey({});
            if (data.chat_id != null) {
                message.chat_id = data.chat_id;
            }
            if (data.msg_id != null) {
                message.msg_id = data.msg_id;
            }
            return message;
        }
        toObject() {
            const data: {
                chat_id?: number;
                msg_id?: number;
            } = {};
            if (this.chat_id != null) {
                data.chat_id = this.chat_id;
            }
            if (this.msg_id != null) {
                data.msg_id = this.msg_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.chat_id != 0)
                writer.writeInt64(1, this.chat_id);
            if (this.msg_id != 0)
                writer.writeInt64(2, this.msg_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MessageKey {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MessageKey();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.chat_id = reader.readInt64();
                        break;
                    case 2:
                        message.msg_id = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MessageKey {
            return MessageKey.deserialize(bytes);
        }
    }
    export class MessageAutoReplyFlag extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            qa_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("qa_id" in data && data.qa_id != undefined) {
                    this.qa_id = data.qa_id;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get qa_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set qa_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            id?: number;
            qa_id?: number;
        }): MessageAutoReplyFlag {
            const message = new MessageAutoReplyFlag({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.qa_id != null) {
                message.qa_id = data.qa_id;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                qa_id?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.qa_id != null) {
                data.qa_id = this.qa_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt64(1, this.id);
            if (this.qa_id != 0)
                writer.writeInt32(2, this.qa_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MessageAutoReplyFlag {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MessageAutoReplyFlag();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt64();
                        break;
                    case 2:
                        message.qa_id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MessageAutoReplyFlag {
            return MessageAutoReplyFlag.deserialize(bytes);
        }
    }
    export class MessageWorkerChanged extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            worker_client_id?: number;
            worker_id?: number;
            name?: string;
            avatar?: string;
            greeting?: string;
            State?: ChatState;
            consult_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("worker_client_id" in data && data.worker_client_id != undefined) {
                    this.worker_client_id = data.worker_client_id;
                }
                if ("worker_id" in data && data.worker_id != undefined) {
                    this.worker_id = data.worker_id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("avatar" in data && data.avatar != undefined) {
                    this.avatar = data.avatar;
                }
                if ("greeting" in data && data.greeting != undefined) {
                    this.greeting = data.greeting;
                }
                if ("State" in data && data.State != undefined) {
                    this.State = data.State;
                }
                if ("consult_id" in data && data.consult_id != undefined) {
                    this.consult_id = data.consult_id;
                }
            }
        }
        get worker_client_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set worker_client_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get worker_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set worker_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get avatar() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set avatar(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get greeting() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set greeting(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get State() {
            return pb_1.Message.getFieldWithDefault(this, 6, ChatState.CHAT_STATE_COMMON) as ChatState;
        }
        set State(value: ChatState) {
            pb_1.Message.setField(this, 6, value);
        }
        get consult_id() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set consult_id(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            worker_client_id?: number;
            worker_id?: number;
            name?: string;
            avatar?: string;
            greeting?: string;
            State?: ChatState;
            consult_id?: number;
        }): MessageWorkerChanged {
            const message = new MessageWorkerChanged({});
            if (data.worker_client_id != null) {
                message.worker_client_id = data.worker_client_id;
            }
            if (data.worker_id != null) {
                message.worker_id = data.worker_id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.avatar != null) {
                message.avatar = data.avatar;
            }
            if (data.greeting != null) {
                message.greeting = data.greeting;
            }
            if (data.State != null) {
                message.State = data.State;
            }
            if (data.consult_id != null) {
                message.consult_id = data.consult_id;
            }
            return message;
        }
        toObject() {
            const data: {
                worker_client_id?: number;
                worker_id?: number;
                name?: string;
                avatar?: string;
                greeting?: string;
                State?: ChatState;
                consult_id?: number;
            } = {};
            if (this.worker_client_id != null) {
                data.worker_client_id = this.worker_client_id;
            }
            if (this.worker_id != null) {
                data.worker_id = this.worker_id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.avatar != null) {
                data.avatar = this.avatar;
            }
            if (this.greeting != null) {
                data.greeting = this.greeting;
            }
            if (this.State != null) {
                data.State = this.State;
            }
            if (this.consult_id != null) {
                data.consult_id = this.consult_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.worker_client_id != 0)
                writer.writeInt64(1, this.worker_client_id);
            if (this.worker_id != 0)
                writer.writeInt32(2, this.worker_id);
            if (this.name.length)
                writer.writeString(3, this.name);
            if (this.avatar.length)
                writer.writeString(4, this.avatar);
            if (this.greeting.length)
                writer.writeString(5, this.greeting);
            if (this.State != ChatState.CHAT_STATE_COMMON)
                writer.writeEnum(6, this.State);
            if (this.consult_id != 0)
                writer.writeInt64(7, this.consult_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MessageWorkerChanged {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MessageWorkerChanged();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.worker_client_id = reader.readInt64();
                        break;
                    case 2:
                        message.worker_id = reader.readInt32();
                        break;
                    case 3:
                        message.name = reader.readString();
                        break;
                    case 4:
                        message.avatar = reader.readString();
                        break;
                    case 5:
                        message.greeting = reader.readString();
                        break;
                    case 6:
                        message.State = reader.readEnum();
                        break;
                    case 7:
                        message.consult_id = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MessageWorkerChanged {
            return MessageWorkerChanged.deserialize(bytes);
        }
    }
    export class Message extends pb_1.Message {
        #one_of_decls: number[][] = [[100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110]];
        constructor(data?: any[] | ({
            chat_id?: number;
            msg_id?: number;
            msg_time?: dependency_1.google.protobuf.Timestamp;
            sender?: number;
            reply_msg_id?: number;
            msg_op?: MessageOperate;
            worker?: number;
            auto_reply_flag?: MessageAutoReplyFlag;
            msg_fmt?: MessageFormat;
            consult_id?: number;
            with_auto_replies?: WithAutoReply[];
            msg_source_type?: MsgSourceType;
        } & (({
            content?: MessageContent;
            image?: never;
            audio?: never;
            video?: never;
            geo?: never;
            file?: never;
            worker_trans?: never;
            blacklist_apply?: never;
            blacklist_confirm?: never;
            auto_reply?: never;
            worker_changed?: never;
        } | {
            content?: never;
            image?: MessageImage;
            audio?: never;
            video?: never;
            geo?: never;
            file?: never;
            worker_trans?: never;
            blacklist_apply?: never;
            blacklist_confirm?: never;
            auto_reply?: never;
            worker_changed?: never;
        } | {
            content?: never;
            image?: never;
            audio?: MessageAudio;
            video?: never;
            geo?: never;
            file?: never;
            worker_trans?: never;
            blacklist_apply?: never;
            blacklist_confirm?: never;
            auto_reply?: never;
            worker_changed?: never;
        } | {
            content?: never;
            image?: never;
            audio?: never;
            video?: MessageVideo;
            geo?: never;
            file?: never;
            worker_trans?: never;
            blacklist_apply?: never;
            blacklist_confirm?: never;
            auto_reply?: never;
            worker_changed?: never;
        } | {
            content?: never;
            image?: never;
            audio?: never;
            video?: never;
            geo?: MessageGeo;
            file?: never;
            worker_trans?: never;
            blacklist_apply?: never;
            blacklist_confirm?: never;
            auto_reply?: never;
            worker_changed?: never;
        } | {
            content?: never;
            image?: never;
            audio?: never;
            video?: never;
            geo?: never;
            file?: MessageFile;
            worker_trans?: never;
            blacklist_apply?: never;
            blacklist_confirm?: never;
            auto_reply?: never;
            worker_changed?: never;
        } | {
            content?: never;
            image?: never;
            audio?: never;
            video?: never;
            geo?: never;
            file?: never;
            worker_trans?: WorkerTransfer;
            blacklist_apply?: never;
            blacklist_confirm?: never;
            auto_reply?: never;
            worker_changed?: never;
        } | {
            content?: never;
            image?: never;
            audio?: never;
            video?: never;
            geo?: never;
            file?: never;
            worker_trans?: never;
            blacklist_apply?: BlackListApply;
            blacklist_confirm?: never;
            auto_reply?: never;
            worker_changed?: never;
        } | {
            content?: never;
            image?: never;
            audio?: never;
            video?: never;
            geo?: never;
            file?: never;
            worker_trans?: never;
            blacklist_apply?: never;
            blacklist_confirm?: BlackListConfirm;
            auto_reply?: never;
            worker_changed?: never;
        } | {
            content?: never;
            image?: never;
            audio?: never;
            video?: never;
            geo?: never;
            file?: never;
            worker_trans?: never;
            blacklist_apply?: never;
            blacklist_confirm?: never;
            auto_reply?: MessageAutoReply;
            worker_changed?: never;
        } | {
            content?: never;
            image?: never;
            audio?: never;
            video?: never;
            geo?: never;
            file?: never;
            worker_trans?: never;
            blacklist_apply?: never;
            blacklist_confirm?: never;
            auto_reply?: never;
            worker_changed?: MessageWorkerChanged;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [11], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("chat_id" in data && data.chat_id != undefined) {
                    this.chat_id = data.chat_id;
                }
                if ("msg_id" in data && data.msg_id != undefined) {
                    this.msg_id = data.msg_id;
                }
                if ("msg_time" in data && data.msg_time != undefined) {
                    this.msg_time = data.msg_time;
                }
                if ("sender" in data && data.sender != undefined) {
                    this.sender = data.sender;
                }
                if ("reply_msg_id" in data && data.reply_msg_id != undefined) {
                    this.reply_msg_id = data.reply_msg_id;
                }
                if ("msg_op" in data && data.msg_op != undefined) {
                    this.msg_op = data.msg_op;
                }
                if ("worker" in data && data.worker != undefined) {
                    this.worker = data.worker;
                }
                if ("auto_reply_flag" in data && data.auto_reply_flag != undefined) {
                    this.auto_reply_flag = data.auto_reply_flag;
                }
                if ("msg_fmt" in data && data.msg_fmt != undefined) {
                    this.msg_fmt = data.msg_fmt;
                }
                if ("consult_id" in data && data.consult_id != undefined) {
                    this.consult_id = data.consult_id;
                }
                if ("with_auto_replies" in data && data.with_auto_replies != undefined) {
                    this.with_auto_replies = data.with_auto_replies;
                }
                if ("msg_source_type" in data && data.msg_source_type != undefined) {
                    this.msg_source_type = data.msg_source_type;
                }
                if ("content" in data && data.content != undefined) {
                    this.content = data.content;
                }
                if ("image" in data && data.image != undefined) {
                    this.image = data.image;
                }
                if ("audio" in data && data.audio != undefined) {
                    this.audio = data.audio;
                }
                if ("video" in data && data.video != undefined) {
                    this.video = data.video;
                }
                if ("geo" in data && data.geo != undefined) {
                    this.geo = data.geo;
                }
                if ("file" in data && data.file != undefined) {
                    this.file = data.file;
                }
                if ("worker_trans" in data && data.worker_trans != undefined) {
                    this.worker_trans = data.worker_trans;
                }
                if ("blacklist_apply" in data && data.blacklist_apply != undefined) {
                    this.blacklist_apply = data.blacklist_apply;
                }
                if ("blacklist_confirm" in data && data.blacklist_confirm != undefined) {
                    this.blacklist_confirm = data.blacklist_confirm;
                }
                if ("auto_reply" in data && data.auto_reply != undefined) {
                    this.auto_reply = data.auto_reply;
                }
                if ("worker_changed" in data && data.worker_changed != undefined) {
                    this.worker_changed = data.worker_changed;
                }
            }
        }
        get chat_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set chat_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get msg_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set msg_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get msg_time() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 3) as dependency_1.google.protobuf.Timestamp;
        }
        set msg_time(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_msg_time() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get sender() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set sender(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get reply_msg_id() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set reply_msg_id(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get msg_op() {
            return pb_1.Message.getFieldWithDefault(this, 6, MessageOperate.MSG_OP_POST) as MessageOperate;
        }
        set msg_op(value: MessageOperate) {
            pb_1.Message.setField(this, 6, value);
        }
        get worker() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set worker(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get auto_reply_flag() {
            return pb_1.Message.getWrapperField(this, MessageAutoReplyFlag, 8) as MessageAutoReplyFlag;
        }
        set auto_reply_flag(value: MessageAutoReplyFlag) {
            pb_1.Message.setWrapperField(this, 8, value);
        }
        get has_auto_reply_flag() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get msg_fmt() {
            return pb_1.Message.getFieldWithDefault(this, 9, MessageFormat.MSG_TEXT) as MessageFormat;
        }
        set msg_fmt(value: MessageFormat) {
            pb_1.Message.setField(this, 9, value);
        }
        get consult_id() {
            return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
        }
        set consult_id(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        get with_auto_replies() {
            return pb_1.Message.getRepeatedWrapperField(this, WithAutoReply, 11) as WithAutoReply[];
        }
        set with_auto_replies(value: WithAutoReply[]) {
            pb_1.Message.setRepeatedWrapperField(this, 11, value);
        }
        get msg_source_type() {
            return pb_1.Message.getFieldWithDefault(this, 12, MsgSourceType.MST_DEFAULT) as MsgSourceType;
        }
        set msg_source_type(value: MsgSourceType) {
            pb_1.Message.setField(this, 12, value);
        }
        get content() {
            return pb_1.Message.getWrapperField(this, MessageContent, 100) as MessageContent;
        }
        set content(value: MessageContent) {
            pb_1.Message.setOneofWrapperField(this, 100, this.#one_of_decls[0], value);
        }
        get has_content() {
            return pb_1.Message.getField(this, 100) != null;
        }
        get image() {
            return pb_1.Message.getWrapperField(this, MessageImage, 101) as MessageImage;
        }
        set image(value: MessageImage) {
            pb_1.Message.setOneofWrapperField(this, 101, this.#one_of_decls[0], value);
        }
        get has_image() {
            return pb_1.Message.getField(this, 101) != null;
        }
        get audio() {
            return pb_1.Message.getWrapperField(this, MessageAudio, 102) as MessageAudio;
        }
        set audio(value: MessageAudio) {
            pb_1.Message.setOneofWrapperField(this, 102, this.#one_of_decls[0], value);
        }
        get has_audio() {
            return pb_1.Message.getField(this, 102) != null;
        }
        get video() {
            return pb_1.Message.getWrapperField(this, MessageVideo, 103) as MessageVideo;
        }
        set video(value: MessageVideo) {
            pb_1.Message.setOneofWrapperField(this, 103, this.#one_of_decls[0], value);
        }
        get has_video() {
            return pb_1.Message.getField(this, 103) != null;
        }
        get geo() {
            return pb_1.Message.getWrapperField(this, MessageGeo, 104) as MessageGeo;
        }
        set geo(value: MessageGeo) {
            pb_1.Message.setOneofWrapperField(this, 104, this.#one_of_decls[0], value);
        }
        get has_geo() {
            return pb_1.Message.getField(this, 104) != null;
        }
        get file() {
            return pb_1.Message.getWrapperField(this, MessageFile, 105) as MessageFile;
        }
        set file(value: MessageFile) {
            pb_1.Message.setOneofWrapperField(this, 105, this.#one_of_decls[0], value);
        }
        get has_file() {
            return pb_1.Message.getField(this, 105) != null;
        }
        get worker_trans() {
            return pb_1.Message.getWrapperField(this, WorkerTransfer, 106) as WorkerTransfer;
        }
        set worker_trans(value: WorkerTransfer) {
            pb_1.Message.setOneofWrapperField(this, 106, this.#one_of_decls[0], value);
        }
        get has_worker_trans() {
            return pb_1.Message.getField(this, 106) != null;
        }
        get blacklist_apply() {
            return pb_1.Message.getWrapperField(this, BlackListApply, 107) as BlackListApply;
        }
        set blacklist_apply(value: BlackListApply) {
            pb_1.Message.setOneofWrapperField(this, 107, this.#one_of_decls[0], value);
        }
        get has_blacklist_apply() {
            return pb_1.Message.getField(this, 107) != null;
        }
        get blacklist_confirm() {
            return pb_1.Message.getWrapperField(this, BlackListConfirm, 108) as BlackListConfirm;
        }
        set blacklist_confirm(value: BlackListConfirm) {
            pb_1.Message.setOneofWrapperField(this, 108, this.#one_of_decls[0], value);
        }
        get has_blacklist_confirm() {
            return pb_1.Message.getField(this, 108) != null;
        }
        get auto_reply() {
            return pb_1.Message.getWrapperField(this, MessageAutoReply, 109) as MessageAutoReply;
        }
        set auto_reply(value: MessageAutoReply) {
            pb_1.Message.setOneofWrapperField(this, 109, this.#one_of_decls[0], value);
        }
        get has_auto_reply() {
            return pb_1.Message.getField(this, 109) != null;
        }
        get worker_changed() {
            return pb_1.Message.getWrapperField(this, MessageWorkerChanged, 110) as MessageWorkerChanged;
        }
        set worker_changed(value: MessageWorkerChanged) {
            pb_1.Message.setOneofWrapperField(this, 110, this.#one_of_decls[0], value);
        }
        get has_worker_changed() {
            return pb_1.Message.getField(this, 110) != null;
        }
        get payload() {
            const cases: {
                [index: number]: "none" | "content" | "image" | "audio" | "video" | "geo" | "file" | "worker_trans" | "blacklist_apply" | "blacklist_confirm" | "auto_reply" | "worker_changed";
            } = {
                0: "none",
                100: "content",
                101: "image",
                102: "audio",
                103: "video",
                104: "geo",
                105: "file",
                106: "worker_trans",
                107: "blacklist_apply",
                108: "blacklist_confirm",
                109: "auto_reply",
                110: "worker_changed"
            };
            return cases[pb_1.Message.computeOneofCase(this, [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110])];
        }
        static fromObject(data: {
            chat_id?: number;
            msg_id?: number;
            msg_time?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            sender?: number;
            reply_msg_id?: number;
            msg_op?: MessageOperate;
            worker?: number;
            auto_reply_flag?: ReturnType<typeof MessageAutoReplyFlag.prototype.toObject>;
            msg_fmt?: MessageFormat;
            consult_id?: number;
            with_auto_replies?: ReturnType<typeof WithAutoReply.prototype.toObject>[];
            msg_source_type?: MsgSourceType;
            content?: ReturnType<typeof MessageContent.prototype.toObject>;
            image?: ReturnType<typeof MessageImage.prototype.toObject>;
            audio?: ReturnType<typeof MessageAudio.prototype.toObject>;
            video?: ReturnType<typeof MessageVideo.prototype.toObject>;
            geo?: ReturnType<typeof MessageGeo.prototype.toObject>;
            file?: ReturnType<typeof MessageFile.prototype.toObject>;
            worker_trans?: ReturnType<typeof WorkerTransfer.prototype.toObject>;
            blacklist_apply?: ReturnType<typeof BlackListApply.prototype.toObject>;
            blacklist_confirm?: ReturnType<typeof BlackListConfirm.prototype.toObject>;
            auto_reply?: ReturnType<typeof MessageAutoReply.prototype.toObject>;
            worker_changed?: ReturnType<typeof MessageWorkerChanged.prototype.toObject>;
        }): Message {
            const message = new Message({});
            if (data.chat_id != null) {
                message.chat_id = data.chat_id;
            }
            if (data.msg_id != null) {
                message.msg_id = data.msg_id;
            }
            if (data.msg_time != null) {
                message.msg_time = dependency_1.google.protobuf.Timestamp.fromObject(data.msg_time);
            }
            if (data.sender != null) {
                message.sender = data.sender;
            }
            if (data.reply_msg_id != null) {
                message.reply_msg_id = data.reply_msg_id;
            }
            if (data.msg_op != null) {
                message.msg_op = data.msg_op;
            }
            if (data.worker != null) {
                message.worker = data.worker;
            }
            if (data.auto_reply_flag != null) {
                message.auto_reply_flag = MessageAutoReplyFlag.fromObject(data.auto_reply_flag);
            }
            if (data.msg_fmt != null) {
                message.msg_fmt = data.msg_fmt;
            }
            if (data.consult_id != null) {
                message.consult_id = data.consult_id;
            }
            if (data.with_auto_replies != null) {
                message.with_auto_replies = data.with_auto_replies.map(item => WithAutoReply.fromObject(item));
            }
            if (data.msg_source_type != null) {
                message.msg_source_type = data.msg_source_type;
            }
            if (data.content != null) {
                message.content = MessageContent.fromObject(data.content);
            }
            if (data.image != null) {
                message.image = MessageImage.fromObject(data.image);
            }
            if (data.audio != null) {
                message.audio = MessageAudio.fromObject(data.audio);
            }
            if (data.video != null) {
                message.video = MessageVideo.fromObject(data.video);
            }
            if (data.geo != null) {
                message.geo = MessageGeo.fromObject(data.geo);
            }
            if (data.file != null) {
                message.file = MessageFile.fromObject(data.file);
            }
            if (data.worker_trans != null) {
                message.worker_trans = WorkerTransfer.fromObject(data.worker_trans);
            }
            if (data.blacklist_apply != null) {
                message.blacklist_apply = BlackListApply.fromObject(data.blacklist_apply);
            }
            if (data.blacklist_confirm != null) {
                message.blacklist_confirm = BlackListConfirm.fromObject(data.blacklist_confirm);
            }
            if (data.auto_reply != null) {
                message.auto_reply = MessageAutoReply.fromObject(data.auto_reply);
            }
            if (data.worker_changed != null) {
                message.worker_changed = MessageWorkerChanged.fromObject(data.worker_changed);
            }
            return message;
        }
        toObject() {
            const data: {
                chat_id?: number;
                msg_id?: number;
                msg_time?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                sender?: number;
                reply_msg_id?: number;
                msg_op?: MessageOperate;
                worker?: number;
                auto_reply_flag?: ReturnType<typeof MessageAutoReplyFlag.prototype.toObject>;
                msg_fmt?: MessageFormat;
                consult_id?: number;
                with_auto_replies?: ReturnType<typeof WithAutoReply.prototype.toObject>[];
                msg_source_type?: MsgSourceType;
                content?: ReturnType<typeof MessageContent.prototype.toObject>;
                image?: ReturnType<typeof MessageImage.prototype.toObject>;
                audio?: ReturnType<typeof MessageAudio.prototype.toObject>;
                video?: ReturnType<typeof MessageVideo.prototype.toObject>;
                geo?: ReturnType<typeof MessageGeo.prototype.toObject>;
                file?: ReturnType<typeof MessageFile.prototype.toObject>;
                worker_trans?: ReturnType<typeof WorkerTransfer.prototype.toObject>;
                blacklist_apply?: ReturnType<typeof BlackListApply.prototype.toObject>;
                blacklist_confirm?: ReturnType<typeof BlackListConfirm.prototype.toObject>;
                auto_reply?: ReturnType<typeof MessageAutoReply.prototype.toObject>;
                worker_changed?: ReturnType<typeof MessageWorkerChanged.prototype.toObject>;
            } = {};
            if (this.chat_id != null) {
                data.chat_id = this.chat_id;
            }
            if (this.msg_id != null) {
                data.msg_id = this.msg_id;
            }
            if (this.msg_time != null) {
                data.msg_time = this.msg_time.toObject();
            }
            if (this.sender != null) {
                data.sender = this.sender;
            }
            if (this.reply_msg_id != null) {
                data.reply_msg_id = this.reply_msg_id;
            }
            if (this.msg_op != null) {
                data.msg_op = this.msg_op;
            }
            if (this.worker != null) {
                data.worker = this.worker;
            }
            if (this.auto_reply_flag != null) {
                data.auto_reply_flag = this.auto_reply_flag.toObject();
            }
            if (this.msg_fmt != null) {
                data.msg_fmt = this.msg_fmt;
            }
            if (this.consult_id != null) {
                data.consult_id = this.consult_id;
            }
            if (this.with_auto_replies != null) {
                data.with_auto_replies = this.with_auto_replies.map((item: WithAutoReply) => item.toObject());
            }
            if (this.msg_source_type != null) {
                data.msg_source_type = this.msg_source_type;
            }
            if (this.content != null) {
                data.content = this.content.toObject();
            }
            if (this.image != null) {
                data.image = this.image.toObject();
            }
            if (this.audio != null) {
                data.audio = this.audio.toObject();
            }
            if (this.video != null) {
                data.video = this.video.toObject();
            }
            if (this.geo != null) {
                data.geo = this.geo.toObject();
            }
            if (this.file != null) {
                data.file = this.file.toObject();
            }
            if (this.worker_trans != null) {
                data.worker_trans = this.worker_trans.toObject();
            }
            if (this.blacklist_apply != null) {
                data.blacklist_apply = this.blacklist_apply.toObject();
            }
            if (this.blacklist_confirm != null) {
                data.blacklist_confirm = this.blacklist_confirm.toObject();
            }
            if (this.auto_reply != null) {
                data.auto_reply = this.auto_reply.toObject();
            }
            if (this.worker_changed != null) {
                data.worker_changed = this.worker_changed.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.chat_id != 0)
                writer.writeInt64(1, this.chat_id);
            if (this.msg_id != 0)
                writer.writeInt64(2, this.msg_id);
            if (this.has_msg_time)
                writer.writeMessage(3, this.msg_time, () => this.msg_time.serialize(writer));
            if (this.sender != 0)
                writer.writeInt64(4, this.sender);
            if (this.reply_msg_id != 0)
                writer.writeInt64(5, this.reply_msg_id);
            if (this.msg_op != MessageOperate.MSG_OP_POST)
                writer.writeEnum(6, this.msg_op);
            if (this.worker != 0)
                writer.writeInt32(7, this.worker);
            if (this.has_auto_reply_flag)
                writer.writeMessage(8, this.auto_reply_flag, () => this.auto_reply_flag.serialize(writer));
            if (this.msg_fmt != MessageFormat.MSG_TEXT)
                writer.writeEnum(9, this.msg_fmt);
            if (this.consult_id != 0)
                writer.writeInt64(10, this.consult_id);
            if (this.with_auto_replies.length)
                writer.writeRepeatedMessage(11, this.with_auto_replies, (item: WithAutoReply) => item.serialize(writer));
            if (this.msg_source_type != MsgSourceType.MST_DEFAULT)
                writer.writeEnum(12, this.msg_source_type);
            if (this.has_content)
                writer.writeMessage(100, this.content, () => this.content.serialize(writer));
            if (this.has_image)
                writer.writeMessage(101, this.image, () => this.image.serialize(writer));
            if (this.has_audio)
                writer.writeMessage(102, this.audio, () => this.audio.serialize(writer));
            if (this.has_video)
                writer.writeMessage(103, this.video, () => this.video.serialize(writer));
            if (this.has_geo)
                writer.writeMessage(104, this.geo, () => this.geo.serialize(writer));
            if (this.has_file)
                writer.writeMessage(105, this.file, () => this.file.serialize(writer));
            if (this.has_worker_trans)
                writer.writeMessage(106, this.worker_trans, () => this.worker_trans.serialize(writer));
            if (this.has_blacklist_apply)
                writer.writeMessage(107, this.blacklist_apply, () => this.blacklist_apply.serialize(writer));
            if (this.has_blacklist_confirm)
                writer.writeMessage(108, this.blacklist_confirm, () => this.blacklist_confirm.serialize(writer));
            if (this.has_auto_reply)
                writer.writeMessage(109, this.auto_reply, () => this.auto_reply.serialize(writer));
            if (this.has_worker_changed)
                writer.writeMessage(110, this.worker_changed, () => this.worker_changed.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Message {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Message();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.chat_id = reader.readInt64();
                        break;
                    case 2:
                        message.msg_id = reader.readInt64();
                        break;
                    case 3:
                        reader.readMessage(message.msg_time, () => message.msg_time = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 4:
                        message.sender = reader.readInt64();
                        break;
                    case 5:
                        message.reply_msg_id = reader.readInt64();
                        break;
                    case 6:
                        message.msg_op = reader.readEnum();
                        break;
                    case 7:
                        message.worker = reader.readInt32();
                        break;
                    case 8:
                        reader.readMessage(message.auto_reply_flag, () => message.auto_reply_flag = MessageAutoReplyFlag.deserialize(reader));
                        break;
                    case 9:
                        message.msg_fmt = reader.readEnum();
                        break;
                    case 10:
                        message.consult_id = reader.readInt64();
                        break;
                    case 11:
                        reader.readMessage(message.with_auto_replies, () => pb_1.Message.addToRepeatedWrapperField(message, 11, WithAutoReply.deserialize(reader), WithAutoReply));
                        break;
                    case 12:
                        message.msg_source_type = reader.readEnum();
                        break;
                    case 100:
                        reader.readMessage(message.content, () => message.content = MessageContent.deserialize(reader));
                        break;
                    case 101:
                        reader.readMessage(message.image, () => message.image = MessageImage.deserialize(reader));
                        break;
                    case 102:
                        reader.readMessage(message.audio, () => message.audio = MessageAudio.deserialize(reader));
                        break;
                    case 103:
                        reader.readMessage(message.video, () => message.video = MessageVideo.deserialize(reader));
                        break;
                    case 104:
                        reader.readMessage(message.geo, () => message.geo = MessageGeo.deserialize(reader));
                        break;
                    case 105:
                        reader.readMessage(message.file, () => message.file = MessageFile.deserialize(reader));
                        break;
                    case 106:
                        reader.readMessage(message.worker_trans, () => message.worker_trans = WorkerTransfer.deserialize(reader));
                        break;
                    case 107:
                        reader.readMessage(message.blacklist_apply, () => message.blacklist_apply = BlackListApply.deserialize(reader));
                        break;
                    case 108:
                        reader.readMessage(message.blacklist_confirm, () => message.blacklist_confirm = BlackListConfirm.deserialize(reader));
                        break;
                    case 109:
                        reader.readMessage(message.auto_reply, () => message.auto_reply = MessageAutoReply.deserialize(reader));
                        break;
                    case 110:
                        reader.readMessage(message.worker_changed, () => message.worker_changed = MessageWorkerChanged.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Message {
            return Message.deserialize(bytes);
        }
    }
    export class WithAutoReply extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            title?: string;
            created_time?: dependency_1.google.protobuf.Timestamp;
            answers?: MessageUnion[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("title" in data && data.title != undefined) {
                    this.title = data.title;
                }
                if ("created_time" in data && data.created_time != undefined) {
                    this.created_time = data.created_time;
                }
                if ("answers" in data && data.answers != undefined) {
                    this.answers = data.answers;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get title() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set title(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get created_time() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 3) as dependency_1.google.protobuf.Timestamp;
        }
        set created_time(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_created_time() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get answers() {
            return pb_1.Message.getRepeatedWrapperField(this, MessageUnion, 4) as MessageUnion[];
        }
        set answers(value: MessageUnion[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        static fromObject(data: {
            id?: number;
            title?: string;
            created_time?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            answers?: ReturnType<typeof MessageUnion.prototype.toObject>[];
        }): WithAutoReply {
            const message = new WithAutoReply({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.title != null) {
                message.title = data.title;
            }
            if (data.created_time != null) {
                message.created_time = dependency_1.google.protobuf.Timestamp.fromObject(data.created_time);
            }
            if (data.answers != null) {
                message.answers = data.answers.map(item => MessageUnion.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                title?: string;
                created_time?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                answers?: ReturnType<typeof MessageUnion.prototype.toObject>[];
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.title != null) {
                data.title = this.title;
            }
            if (this.created_time != null) {
                data.created_time = this.created_time.toObject();
            }
            if (this.answers != null) {
                data.answers = this.answers.map((item: MessageUnion) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt64(1, this.id);
            if (this.title.length)
                writer.writeString(2, this.title);
            if (this.has_created_time)
                writer.writeMessage(3, this.created_time, () => this.created_time.serialize(writer));
            if (this.answers.length)
                writer.writeRepeatedMessage(4, this.answers, (item: MessageUnion) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WithAutoReply {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WithAutoReply();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt64();
                        break;
                    case 2:
                        message.title = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.created_time, () => message.created_time = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.answers, () => pb_1.Message.addToRepeatedWrapperField(message, 4, MessageUnion.deserialize(reader), MessageUnion));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WithAutoReply {
            return WithAutoReply.deserialize(bytes);
        }
    }
    export class WorkerTransfer extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            worker_id?: number;
            worker_name?: string;
            worker_avatar?: string;
            consult_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("worker_id" in data && data.worker_id != undefined) {
                    this.worker_id = data.worker_id;
                }
                if ("worker_name" in data && data.worker_name != undefined) {
                    this.worker_name = data.worker_name;
                }
                if ("worker_avatar" in data && data.worker_avatar != undefined) {
                    this.worker_avatar = data.worker_avatar;
                }
                if ("consult_id" in data && data.consult_id != undefined) {
                    this.consult_id = data.consult_id;
                }
            }
        }
        get worker_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set worker_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get worker_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set worker_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get worker_avatar() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set worker_avatar(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get consult_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set consult_id(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            worker_id?: number;
            worker_name?: string;
            worker_avatar?: string;
            consult_id?: number;
        }): WorkerTransfer {
            const message = new WorkerTransfer({});
            if (data.worker_id != null) {
                message.worker_id = data.worker_id;
            }
            if (data.worker_name != null) {
                message.worker_name = data.worker_name;
            }
            if (data.worker_avatar != null) {
                message.worker_avatar = data.worker_avatar;
            }
            if (data.consult_id != null) {
                message.consult_id = data.consult_id;
            }
            return message;
        }
        toObject() {
            const data: {
                worker_id?: number;
                worker_name?: string;
                worker_avatar?: string;
                consult_id?: number;
            } = {};
            if (this.worker_id != null) {
                data.worker_id = this.worker_id;
            }
            if (this.worker_name != null) {
                data.worker_name = this.worker_name;
            }
            if (this.worker_avatar != null) {
                data.worker_avatar = this.worker_avatar;
            }
            if (this.consult_id != null) {
                data.consult_id = this.consult_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.worker_id != 0)
                writer.writeInt32(1, this.worker_id);
            if (this.worker_name.length)
                writer.writeString(2, this.worker_name);
            if (this.worker_avatar.length)
                writer.writeString(3, this.worker_avatar);
            if (this.consult_id != 0)
                writer.writeUint32(4, this.consult_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WorkerTransfer {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WorkerTransfer();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.worker_id = reader.readInt32();
                        break;
                    case 2:
                        message.worker_name = reader.readString();
                        break;
                    case 3:
                        message.worker_avatar = reader.readString();
                        break;
                    case 4:
                        message.consult_id = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WorkerTransfer {
            return WorkerTransfer.deserialize(bytes);
        }
    }
    export class BlackListApply extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            worker_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("worker_id" in data && data.worker_id != undefined) {
                    this.worker_id = data.worker_id;
                }
            }
        }
        get worker_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set worker_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            worker_id?: number;
        }): BlackListApply {
            const message = new BlackListApply({});
            if (data.worker_id != null) {
                message.worker_id = data.worker_id;
            }
            return message;
        }
        toObject() {
            const data: {
                worker_id?: number;
            } = {};
            if (this.worker_id != null) {
                data.worker_id = this.worker_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.worker_id != 0)
                writer.writeInt32(1, this.worker_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BlackListApply {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BlackListApply();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.worker_id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BlackListApply {
            return BlackListApply.deserialize(bytes);
        }
    }
    export class BlackListConfirm extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            worker_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("worker_id" in data && data.worker_id != undefined) {
                    this.worker_id = data.worker_id;
                }
            }
        }
        get worker_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set worker_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            worker_id?: number;
        }): BlackListConfirm {
            const message = new BlackListConfirm({});
            if (data.worker_id != null) {
                message.worker_id = data.worker_id;
            }
            return message;
        }
        toObject() {
            const data: {
                worker_id?: number;
            } = {};
            if (this.worker_id != null) {
                data.worker_id = this.worker_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.worker_id != 0)
                writer.writeInt32(1, this.worker_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BlackListConfirm {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BlackListConfirm();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.worker_id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BlackListConfirm {
            return BlackListConfirm.deserialize(bytes);
        }
    }
}
