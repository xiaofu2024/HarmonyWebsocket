/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.26.1
 * source: api/common/c_reply.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../google/protobuf/timestamp";
import * as dependency_2 from "./c_message";
import * as dependency_3 from "./../../google/protobuf/wrappers";
import * as dependency_4 from "./../../validate/validate";
import * as pb_1 from "google-protobuf";
export namespace api.common {
    export class QuickReply extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            priority?: number;
            items?: dependency_2.api.common.Message[];
            content?: string;
            group_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("priority" in data && data.priority != undefined) {
                    this.priority = data.priority;
                }
                if ("items" in data && data.items != undefined) {
                    this.items = data.items;
                }
                if ("content" in data && data.content != undefined) {
                    this.content = data.content;
                }
                if ("group_id" in data && data.group_id != undefined) {
                    this.group_id = data.group_id;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get priority() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set priority(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get items() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.api.common.Message, 3) as dependency_2.api.common.Message[];
        }
        set items(value: dependency_2.api.common.Message[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get content() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set content(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get group_id() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set group_id(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            name?: string;
            priority?: number;
            items?: ReturnType<typeof dependency_2.api.common.Message.prototype.toObject>[];
            content?: string;
            group_id?: number;
        }): QuickReply {
            const message = new QuickReply({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.priority != null) {
                message.priority = data.priority;
            }
            if (data.items != null) {
                message.items = data.items.map(item => dependency_2.api.common.Message.fromObject(item));
            }
            if (data.content != null) {
                message.content = data.content;
            }
            if (data.group_id != null) {
                message.group_id = data.group_id;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                priority?: number;
                items?: ReturnType<typeof dependency_2.api.common.Message.prototype.toObject>[];
                content?: string;
                group_id?: number;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.priority != null) {
                data.priority = this.priority;
            }
            if (this.items != null) {
                data.items = this.items.map((item: dependency_2.api.common.Message) => item.toObject());
            }
            if (this.content != null) {
                data.content = this.content;
            }
            if (this.group_id != null) {
                data.group_id = this.group_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.priority != 0)
                writer.writeInt32(2, this.priority);
            if (this.items.length)
                writer.writeRepeatedMessage(3, this.items, (item: dependency_2.api.common.Message) => item.serialize(writer));
            if (this.content.length)
                writer.writeString(4, this.content);
            if (this.group_id != 0)
                writer.writeInt64(5, this.group_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QuickReply {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QuickReply();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.priority = reader.readInt32();
                        break;
                    case 3:
                        reader.readMessage(message.items, () => pb_1.Message.addToRepeatedWrapperField(message, 3, dependency_2.api.common.Message.deserialize(reader), dependency_2.api.common.Message));
                        break;
                    case 4:
                        message.content = reader.readString();
                        break;
                    case 5:
                        message.group_id = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QuickReply {
            return QuickReply.deserialize(bytes);
        }
    }
    export class QuickReplyWorkerStore extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            quick_reply_id?: Map<number, string>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("quick_reply_id" in data && data.quick_reply_id != undefined) {
                    this.quick_reply_id = data.quick_reply_id;
                }
            }
            if (!this.quick_reply_id)
                this.quick_reply_id = new Map();
        }
        get quick_reply_id() {
            return pb_1.Message.getField(this, 3) as any as Map<number, string>;
        }
        set quick_reply_id(value: Map<number, string>) {
            pb_1.Message.setField(this, 3, value as any);
        }
        static fromObject(data: {
            quick_reply_id?: {
                [key: number]: string;
            };
        }): QuickReplyWorkerStore {
            const message = new QuickReplyWorkerStore({});
            if (typeof data.quick_reply_id == "object") {
                message.quick_reply_id = new Map(Object.entries(data.quick_reply_id).map(([key, value]) => [Number(key), value]));
            }
            return message;
        }
        toObject() {
            const data: {
                quick_reply_id?: {
                    [key: number]: string;
                };
            } = {};
            if (this.quick_reply_id != null) {
                data.quick_reply_id = (Object.fromEntries)(this.quick_reply_id);
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            for (const [key, value] of this.quick_reply_id) {
                writer.writeMessage(3, this.quick_reply_id, () => {
                    writer.writeInt64(1, key);
                    writer.writeString(2, value);
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QuickReplyWorkerStore {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QuickReplyWorkerStore();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 3:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.quick_reply_id as any, reader, reader.readInt64, reader.readString));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QuickReplyWorkerStore {
            return QuickReplyWorkerStore.deserialize(bytes);
        }
    }
    export class QuickReplyGroup extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            priority?: number;
            quick_reply_id?: Map<number, string>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("priority" in data && data.priority != undefined) {
                    this.priority = data.priority;
                }
                if ("quick_reply_id" in data && data.quick_reply_id != undefined) {
                    this.quick_reply_id = data.quick_reply_id;
                }
            }
            if (!this.quick_reply_id)
                this.quick_reply_id = new Map();
        }
        get priority() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set priority(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get quick_reply_id() {
            return pb_1.Message.getField(this, 2) as any as Map<number, string>;
        }
        set quick_reply_id(value: Map<number, string>) {
            pb_1.Message.setField(this, 2, value as any);
        }
        static fromObject(data: {
            priority?: number;
            quick_reply_id?: {
                [key: number]: string;
            };
        }): QuickReplyGroup {
            const message = new QuickReplyGroup({});
            if (data.priority != null) {
                message.priority = data.priority;
            }
            if (typeof data.quick_reply_id == "object") {
                message.quick_reply_id = new Map(Object.entries(data.quick_reply_id).map(([key, value]) => [Number(key), value]));
            }
            return message;
        }
        toObject() {
            const data: {
                priority?: number;
                quick_reply_id?: {
                    [key: number]: string;
                };
            } = {};
            if (this.priority != null) {
                data.priority = this.priority;
            }
            if (this.quick_reply_id != null) {
                data.quick_reply_id = (Object.fromEntries)(this.quick_reply_id);
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.priority != 0)
                writer.writeInt32(1, this.priority);
            for (const [key, value] of this.quick_reply_id) {
                writer.writeMessage(2, this.quick_reply_id, () => {
                    writer.writeInt64(1, key);
                    writer.writeString(2, value);
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QuickReplyGroup {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QuickReplyGroup();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.priority = reader.readInt32();
                        break;
                    case 2:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.quick_reply_id as any, reader, reader.readInt64, reader.readString));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QuickReplyGroup {
            return QuickReplyGroup.deserialize(bytes);
        }
    }
    export class QuickReplyGroupStore extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            store?: Map<string, QuickReplyGroup>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("store" in data && data.store != undefined) {
                    this.store = data.store;
                }
            }
            if (!this.store)
                this.store = new Map();
        }
        get store() {
            return pb_1.Message.getField(this, 1) as any as Map<string, QuickReplyGroup>;
        }
        set store(value: Map<string, QuickReplyGroup>) {
            pb_1.Message.setField(this, 1, value as any);
        }
        static fromObject(data: {
            store?: {
                [key: string]: ReturnType<typeof QuickReplyGroup.prototype.toObject>;
            };
        }): QuickReplyGroupStore {
            const message = new QuickReplyGroupStore({});
            if (typeof data.store == "object") {
                message.store = new Map(Object.entries(data.store).map(([key, value]) => [key, QuickReplyGroup.fromObject(value)]));
            }
            return message;
        }
        toObject() {
            const data: {
                store?: {
                    [key: string]: ReturnType<typeof QuickReplyGroup.prototype.toObject>;
                };
            } = {};
            if (this.store != null) {
                data.store = (Object.fromEntries)((Array.from)(this.store).map(([key, value]) => [key, value.toObject()]));
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            for (const [key, value] of this.store) {
                writer.writeMessage(1, this.store, () => {
                    writer.writeString(1, key);
                    writer.writeMessage(2, value, () => value.serialize(writer));
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QuickReplyGroupStore {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QuickReplyGroupStore();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.store as any, reader, reader.readString, () => {
                            let value;
                            reader.readMessage(message, () => value = QuickReplyGroup.deserialize(reader));
                            return value;
                        }));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QuickReplyGroupStore {
            return QuickReplyGroupStore.deserialize(bytes);
        }
    }
    export class RelatedQuestionAnswer extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            question?: dependency_2.api.common.Message;
            content?: string;
            answer?: dependency_2.api.common.Message[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("question" in data && data.question != undefined) {
                    this.question = data.question;
                }
                if ("content" in data && data.content != undefined) {
                    this.content = data.content;
                }
                if ("answer" in data && data.answer != undefined) {
                    this.answer = data.answer;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get question() {
            return pb_1.Message.getWrapperField(this, dependency_2.api.common.Message, 2) as dependency_2.api.common.Message;
        }
        set question(value: dependency_2.api.common.Message) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_question() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get content() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set content(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get answer() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.api.common.Message, 4) as dependency_2.api.common.Message[];
        }
        set answer(value: dependency_2.api.common.Message[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        static fromObject(data: {
            id?: number;
            question?: ReturnType<typeof dependency_2.api.common.Message.prototype.toObject>;
            content?: string;
            answer?: ReturnType<typeof dependency_2.api.common.Message.prototype.toObject>[];
        }): RelatedQuestionAnswer {
            const message = new RelatedQuestionAnswer({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.question != null) {
                message.question = dependency_2.api.common.Message.fromObject(data.question);
            }
            if (data.content != null) {
                message.content = data.content;
            }
            if (data.answer != null) {
                message.answer = data.answer.map(item => dependency_2.api.common.Message.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                question?: ReturnType<typeof dependency_2.api.common.Message.prototype.toObject>;
                content?: string;
                answer?: ReturnType<typeof dependency_2.api.common.Message.prototype.toObject>[];
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.question != null) {
                data.question = this.question.toObject();
            }
            if (this.content != null) {
                data.content = this.content;
            }
            if (this.answer != null) {
                data.answer = this.answer.map((item: dependency_2.api.common.Message) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt32(1, this.id);
            if (this.has_question)
                writer.writeMessage(2, this.question, () => this.question.serialize(writer));
            if (this.content.length)
                writer.writeString(3, this.content);
            if (this.answer.length)
                writer.writeRepeatedMessage(4, this.answer, (item: dependency_2.api.common.Message) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RelatedQuestionAnswer {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RelatedQuestionAnswer();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    case 2:
                        reader.readMessage(message.question, () => message.question = dependency_2.api.common.Message.deserialize(reader));
                        break;
                    case 3:
                        message.content = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.answer, () => pb_1.Message.addToRepeatedWrapperField(message, 4, dependency_2.api.common.Message.deserialize(reader), dependency_2.api.common.Message));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RelatedQuestionAnswer {
            return RelatedQuestionAnswer.deserialize(bytes);
        }
    }
    export class QuestionAnswer extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            question?: dependency_2.api.common.Message;
            content?: string;
            answer?: dependency_2.api.common.Message[];
            related?: RelatedQuestionAnswer[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4, 5], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("question" in data && data.question != undefined) {
                    this.question = data.question;
                }
                if ("content" in data && data.content != undefined) {
                    this.content = data.content;
                }
                if ("answer" in data && data.answer != undefined) {
                    this.answer = data.answer;
                }
                if ("related" in data && data.related != undefined) {
                    this.related = data.related;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get question() {
            return pb_1.Message.getWrapperField(this, dependency_2.api.common.Message, 2) as dependency_2.api.common.Message;
        }
        set question(value: dependency_2.api.common.Message) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_question() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get content() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set content(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get answer() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.api.common.Message, 4) as dependency_2.api.common.Message[];
        }
        set answer(value: dependency_2.api.common.Message[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get related() {
            return pb_1.Message.getRepeatedWrapperField(this, RelatedQuestionAnswer, 5) as RelatedQuestionAnswer[];
        }
        set related(value: RelatedQuestionAnswer[]) {
            pb_1.Message.setRepeatedWrapperField(this, 5, value);
        }
        static fromObject(data: {
            id?: number;
            question?: ReturnType<typeof dependency_2.api.common.Message.prototype.toObject>;
            content?: string;
            answer?: ReturnType<typeof dependency_2.api.common.Message.prototype.toObject>[];
            related?: ReturnType<typeof RelatedQuestionAnswer.prototype.toObject>[];
        }): QuestionAnswer {
            const message = new QuestionAnswer({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.question != null) {
                message.question = dependency_2.api.common.Message.fromObject(data.question);
            }
            if (data.content != null) {
                message.content = data.content;
            }
            if (data.answer != null) {
                message.answer = data.answer.map(item => dependency_2.api.common.Message.fromObject(item));
            }
            if (data.related != null) {
                message.related = data.related.map(item => RelatedQuestionAnswer.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                question?: ReturnType<typeof dependency_2.api.common.Message.prototype.toObject>;
                content?: string;
                answer?: ReturnType<typeof dependency_2.api.common.Message.prototype.toObject>[];
                related?: ReturnType<typeof RelatedQuestionAnswer.prototype.toObject>[];
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.question != null) {
                data.question = this.question.toObject();
            }
            if (this.content != null) {
                data.content = this.content;
            }
            if (this.answer != null) {
                data.answer = this.answer.map((item: dependency_2.api.common.Message) => item.toObject());
            }
            if (this.related != null) {
                data.related = this.related.map((item: RelatedQuestionAnswer) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt32(1, this.id);
            if (this.has_question)
                writer.writeMessage(2, this.question, () => this.question.serialize(writer));
            if (this.content.length)
                writer.writeString(3, this.content);
            if (this.answer.length)
                writer.writeRepeatedMessage(4, this.answer, (item: dependency_2.api.common.Message) => item.serialize(writer));
            if (this.related.length)
                writer.writeRepeatedMessage(5, this.related, (item: RelatedQuestionAnswer) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QuestionAnswer {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QuestionAnswer();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    case 2:
                        reader.readMessage(message.question, () => message.question = dependency_2.api.common.Message.deserialize(reader));
                        break;
                    case 3:
                        message.content = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.answer, () => pb_1.Message.addToRepeatedWrapperField(message, 4, dependency_2.api.common.Message.deserialize(reader), dependency_2.api.common.Message));
                        break;
                    case 5:
                        reader.readMessage(message.related, () => pb_1.Message.addToRepeatedWrapperField(message, 5, RelatedQuestionAnswer.deserialize(reader), RelatedQuestionAnswer));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QuestionAnswer {
            return QuestionAnswer.deserialize(bytes);
        }
    }
    export class AutoReplyItem extends pb_1.Message {
        #one_of_decls: number[][] = [[3]];
        constructor(data?: any[] | ({
            id?: number;
            name?: string;
            qa?: QuestionAnswer[];
            delay_sec?: number;
            worker_id?: number[];
            worker_names?: string[];
        } & (({
            title?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4, 6, 7], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("title" in data && data.title != undefined) {
                    this.title = data.title;
                }
                if ("qa" in data && data.qa != undefined) {
                    this.qa = data.qa;
                }
                if ("delay_sec" in data && data.delay_sec != undefined) {
                    this.delay_sec = data.delay_sec;
                }
                if ("worker_id" in data && data.worker_id != undefined) {
                    this.worker_id = data.worker_id;
                }
                if ("worker_names" in data && data.worker_names != undefined) {
                    this.worker_names = data.worker_names;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get title() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set title(value: string) {
            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[0], value);
        }
        get has_title() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get qa() {
            return pb_1.Message.getRepeatedWrapperField(this, QuestionAnswer, 4) as QuestionAnswer[];
        }
        set qa(value: QuestionAnswer[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get delay_sec() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set delay_sec(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get worker_id() {
            return pb_1.Message.getFieldWithDefault(this, 6, []) as number[];
        }
        set worker_id(value: number[]) {
            pb_1.Message.setField(this, 6, value);
        }
        get worker_names() {
            return pb_1.Message.getFieldWithDefault(this, 7, []) as string[];
        }
        set worker_names(value: string[]) {
            pb_1.Message.setField(this, 7, value);
        }
        get _title() {
            const cases: {
                [index: number]: "none" | "title";
            } = {
                0: "none",
                3: "title"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3])];
        }
        static fromObject(data: {
            id?: number;
            name?: string;
            title?: string;
            qa?: ReturnType<typeof QuestionAnswer.prototype.toObject>[];
            delay_sec?: number;
            worker_id?: number[];
            worker_names?: string[];
        }): AutoReplyItem {
            const message = new AutoReplyItem({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.title != null) {
                message.title = data.title;
            }
            if (data.qa != null) {
                message.qa = data.qa.map(item => QuestionAnswer.fromObject(item));
            }
            if (data.delay_sec != null) {
                message.delay_sec = data.delay_sec;
            }
            if (data.worker_id != null) {
                message.worker_id = data.worker_id;
            }
            if (data.worker_names != null) {
                message.worker_names = data.worker_names;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                name?: string;
                title?: string;
                qa?: ReturnType<typeof QuestionAnswer.prototype.toObject>[];
                delay_sec?: number;
                worker_id?: number[];
                worker_names?: string[];
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.title != null) {
                data.title = this.title;
            }
            if (this.qa != null) {
                data.qa = this.qa.map((item: QuestionAnswer) => item.toObject());
            }
            if (this.delay_sec != null) {
                data.delay_sec = this.delay_sec;
            }
            if (this.worker_id != null) {
                data.worker_id = this.worker_id;
            }
            if (this.worker_names != null) {
                data.worker_names = this.worker_names;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt64(1, this.id);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.has_title)
                writer.writeString(3, this.title);
            if (this.qa.length)
                writer.writeRepeatedMessage(4, this.qa, (item: QuestionAnswer) => item.serialize(writer));
            if (this.delay_sec != 0)
                writer.writeDouble(5, this.delay_sec);
            if (this.worker_id.length)
                writer.writePackedInt32(6, this.worker_id);
            if (this.worker_names.length)
                writer.writeRepeatedString(7, this.worker_names);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AutoReplyItem {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AutoReplyItem();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt64();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.title = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.qa, () => pb_1.Message.addToRepeatedWrapperField(message, 4, QuestionAnswer.deserialize(reader), QuestionAnswer));
                        break;
                    case 5:
                        message.delay_sec = reader.readDouble();
                        break;
                    case 6:
                        message.worker_id = reader.readPackedInt32();
                        break;
                    case 7:
                        pb_1.Message.addToRepeatedField(message, 7, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AutoReplyItem {
            return AutoReplyItem.deserialize(bytes);
        }
    }
}
