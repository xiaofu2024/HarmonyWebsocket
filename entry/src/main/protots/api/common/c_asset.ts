/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.26.1
 * source: api/common/c_asset.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../validate/validate";
import * as dependency_2 from "./../../google/protobuf/timestamp";
import * as pb_1 from "google-protobuf";
export namespace api.common {
    export enum AssetUploadState {
        ASSET_UPLOAD_STATE_UNKNOWN = 0,
        ASSET_UPLOAD_STATE_PUTTING = 1,
        ASSET_UPLOAD_STATE_PUT = 2
    }
    export enum AssetKind {
        ASSET_KIND_NONE = 0,
        ASSET_KIND_PUBLIC = 1,
        ASSET_KIND_PRIVATE = 2,
        ASSET_KIND_AVATAR = 3,
        ASSET_KIND_SESSION = 4
    }
    export enum AssetType {
        ASSET_TYPE_UNKNOWN = 0,
        ASSET_TYPE_IMAGE = 1,
        ASSET_TYPE_AUDIO = 2,
        ASSET_TYPE_VIDEO = 3,
        ASSET_TYPE_FILE = 4
    }
    export enum AssetContext {
        ASSET_CONTEXT_UNKNOWN = 0,
        ASSET_CONTEXT_MESSAGE = 1,
        ASSET_CONTEXT_MOMENT = 2,
        ASSET_CONTEXT_PROFILE = 3,
        ASSET_CONTEXT_FAVORITE = 4,
        ASSET_CONTEXT_EMOJI = 5,
        ASSET_CONTEXT_BULLETIN = 6
    }
    export class Asset extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            uri?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("uri" in data && data.uri != undefined) {
                    this.uri = data.uri;
                }
            }
        }
        get uri() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set uri(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            uri?: string;
        }): Asset {
            const message = new Asset({});
            if (data.uri != null) {
                message.uri = data.uri;
            }
            return message;
        }
        toObject() {
            const data: {
                uri?: string;
            } = {};
            if (this.uri != null) {
                data.uri = this.uri;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.uri.length)
                writer.writeString(1, this.uri);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Asset {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Asset();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.uri = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Asset {
            return Asset.deserialize(bytes);
        }
    }
}
