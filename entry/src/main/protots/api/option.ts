/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.26.1
 * source: api/option.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../google/protobuf/descriptor";
import * as pb_1 from "google-protobuf";
export namespace api {
    export enum AuthenticationRole {
        AUTH_ROLE_NONE = 0,
        AUTH_ROLE_ACCOUNT = 1,
        AUTH_ROLE_DEVICE = 2,
        AUTH_ROLE_SERVICE = 4,
        AUTH_ROLE_EXTERNAL = 8,
        AUTH_ROLE_TENANT = 16,
        AUTH_ROLE_ADMIN = 32,
        AUTH_ROLE_PUBLIC = 64
    }
    export enum PayloadType {
        JSON_PAYLOAD = 0,
        BINARY_PAYLOAD = 1
    }
    export class Payload extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            type?: PayloadType;
            examples?: Example[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("examples" in data && data.examples != undefined) {
                    this.examples = data.examples;
                }
            }
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 1, PayloadType.JSON_PAYLOAD) as PayloadType;
        }
        set type(value: PayloadType) {
            pb_1.Message.setField(this, 1, value);
        }
        get examples() {
            return pb_1.Message.getRepeatedWrapperField(this, Example, 2) as Example[];
        }
        set examples(value: Example[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            type?: PayloadType;
            examples?: ReturnType<typeof Example.prototype.toObject>[];
        }): Payload {
            const message = new Payload({});
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.examples != null) {
                message.examples = data.examples.map(item => Example.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                type?: PayloadType;
                examples?: ReturnType<typeof Example.prototype.toObject>[];
            } = {};
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.examples != null) {
                data.examples = this.examples.map((item: Example) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.type != PayloadType.JSON_PAYLOAD)
                writer.writeEnum(1, this.type);
            if (this.examples.length)
                writer.writeRepeatedMessage(2, this.examples, (item: Example) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Payload {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Payload();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.type = reader.readEnum();
                        break;
                    case 2:
                        reader.readMessage(message.examples, () => pb_1.Message.addToRepeatedWrapperField(message, 2, Example.deserialize(reader), Example));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Payload {
            return Payload.deserialize(bytes);
        }
    }
    export class ExternalDocumentation extends pb_1.Message {
        #one_of_decls: number[][] = [[1], [2]];
        constructor(data?: any[] | ({} & (({
            description?: string;
        }) | ({
            url?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("url" in data && data.url != undefined) {
                    this.url = data.url;
                }
            }
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_description() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get url() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set url(value: string) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[1], value);
        }
        get has_url() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get _description() {
            const cases: {
                [index: number]: "none" | "description";
            } = {
                0: "none",
                1: "description"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1])];
        }
        get _url() {
            const cases: {
                [index: number]: "none" | "url";
            } = {
                0: "none",
                2: "url"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        static fromObject(data: {
            description?: string;
            url?: string;
        }): ExternalDocumentation {
            const message = new ExternalDocumentation({});
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.url != null) {
                message.url = data.url;
            }
            return message;
        }
        toObject() {
            const data: {
                description?: string;
                url?: string;
            } = {};
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.url != null) {
                data.url = this.url;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_description)
                writer.writeString(1, this.description);
            if (this.has_url)
                writer.writeString(2, this.url);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ExternalDocumentation {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ExternalDocumentation();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.description = reader.readString();
                        break;
                    case 2:
                        message.url = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ExternalDocumentation {
            return ExternalDocumentation.deserialize(bytes);
        }
    }
    export class Example extends pb_1.Message {
        #one_of_decls: number[][] = [[1], [2], [3], [4]];
        constructor(data?: any[] | ({} & (({
            summary?: string;
        }) | ({
            description?: string;
        }) | ({
            value?: string;
        }) | ({
            externalValue?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("summary" in data && data.summary != undefined) {
                    this.summary = data.summary;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
                if ("externalValue" in data && data.externalValue != undefined) {
                    this.externalValue = data.externalValue;
                }
            }
        }
        get summary() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set summary(value: string) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_summary() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[1], value);
        }
        get has_description() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get value() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set value(value: string) {
            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[2], value);
        }
        get has_value() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get externalValue() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set externalValue(value: string) {
            pb_1.Message.setOneofField(this, 4, this.#one_of_decls[3], value);
        }
        get has_externalValue() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get _summary() {
            const cases: {
                [index: number]: "none" | "summary";
            } = {
                0: "none",
                1: "summary"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1])];
        }
        get _description() {
            const cases: {
                [index: number]: "none" | "description";
            } = {
                0: "none",
                2: "description"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        get _value() {
            const cases: {
                [index: number]: "none" | "value";
            } = {
                0: "none",
                3: "value"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3])];
        }
        get _externalValue() {
            const cases: {
                [index: number]: "none" | "externalValue";
            } = {
                0: "none",
                4: "externalValue"
            };
            return cases[pb_1.Message.computeOneofCase(this, [4])];
        }
        static fromObject(data: {
            summary?: string;
            description?: string;
            value?: string;
            externalValue?: string;
        }): Example {
            const message = new Example({});
            if (data.summary != null) {
                message.summary = data.summary;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.value != null) {
                message.value = data.value;
            }
            if (data.externalValue != null) {
                message.externalValue = data.externalValue;
            }
            return message;
        }
        toObject() {
            const data: {
                summary?: string;
                description?: string;
                value?: string;
                externalValue?: string;
            } = {};
            if (this.summary != null) {
                data.summary = this.summary;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.value != null) {
                data.value = this.value;
            }
            if (this.externalValue != null) {
                data.externalValue = this.externalValue;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_summary)
                writer.writeString(1, this.summary);
            if (this.has_description)
                writer.writeString(2, this.description);
            if (this.has_value)
                writer.writeString(3, this.value);
            if (this.has_externalValue)
                writer.writeString(4, this.externalValue);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Example {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Example();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.summary = reader.readString();
                        break;
                    case 2:
                        message.description = reader.readString();
                        break;
                    case 3:
                        message.value = reader.readString();
                        break;
                    case 4:
                        message.externalValue = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Example {
            return Example.deserialize(bytes);
        }
    }
    export class MessageCache extends pb_1.Message {
        #one_of_decls: number[][] = [[1], [2], [3]];
        constructor(data?: any[] | ({} & (({
            name?: string;
        }) | ({
            id?: string;
        }) | ({
            tag?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("tag" in data && data.tag != undefined) {
                    this.tag = data.tag;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_name() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[1], value);
        }
        get has_id() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get tag() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set tag(value: string) {
            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[2], value);
        }
        get has_tag() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get _name() {
            const cases: {
                [index: number]: "none" | "name";
            } = {
                0: "none",
                1: "name"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1])];
        }
        get _id() {
            const cases: {
                [index: number]: "none" | "id";
            } = {
                0: "none",
                2: "id"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        get _tag() {
            const cases: {
                [index: number]: "none" | "tag";
            } = {
                0: "none",
                3: "tag"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3])];
        }
        static fromObject(data: {
            name?: string;
            id?: string;
            tag?: string;
        }): MessageCache {
            const message = new MessageCache({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.tag != null) {
                message.tag = data.tag;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                id?: string;
                tag?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.tag != null) {
                data.tag = this.tag;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_name)
                writer.writeString(1, this.name);
            if (this.has_id)
                writer.writeString(2, this.id);
            if (this.has_tag)
                writer.writeString(3, this.tag);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MessageCache {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MessageCache();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.id = reader.readString();
                        break;
                    case 3:
                        message.tag = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MessageCache {
            return MessageCache.deserialize(bytes);
        }
    }
    export class InfoOptions extends pb_1.Message {
        #one_of_decls: number[][] = [[13], [101], [102], [202], [203]];
        constructor(data?: any[] | ({
            authors?: string[];
            tags?: string[];
            auth?: AuthenticationRole[];
        } & (({
            app_id?: string;
        }) | ({
            inherit_authors?: boolean;
        }) | ({
            date?: string;
        }) | ({
            path?: string;
        }) | ({
            qos?: number;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [100, 103, 201], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("app_id" in data && data.app_id != undefined) {
                    this.app_id = data.app_id;
                }
                if ("authors" in data && data.authors != undefined) {
                    this.authors = data.authors;
                }
                if ("inherit_authors" in data && data.inherit_authors != undefined) {
                    this.inherit_authors = data.inherit_authors;
                }
                if ("date" in data && data.date != undefined) {
                    this.date = data.date;
                }
                if ("tags" in data && data.tags != undefined) {
                    this.tags = data.tags;
                }
                if ("auth" in data && data.auth != undefined) {
                    this.auth = data.auth;
                }
                if ("path" in data && data.path != undefined) {
                    this.path = data.path;
                }
                if ("qos" in data && data.qos != undefined) {
                    this.qos = data.qos;
                }
            }
        }
        get app_id() {
            return pb_1.Message.getFieldWithDefault(this, 13, "") as string;
        }
        set app_id(value: string) {
            pb_1.Message.setOneofField(this, 13, this.#one_of_decls[0], value);
        }
        get has_app_id() {
            return pb_1.Message.getField(this, 13) != null;
        }
        get authors() {
            return pb_1.Message.getFieldWithDefault(this, 100, []) as string[];
        }
        set authors(value: string[]) {
            pb_1.Message.setField(this, 100, value);
        }
        get inherit_authors() {
            return pb_1.Message.getFieldWithDefault(this, 101, false) as boolean;
        }
        set inherit_authors(value: boolean) {
            pb_1.Message.setOneofField(this, 101, this.#one_of_decls[1], value);
        }
        get has_inherit_authors() {
            return pb_1.Message.getField(this, 101) != null;
        }
        get date() {
            return pb_1.Message.getFieldWithDefault(this, 102, "") as string;
        }
        set date(value: string) {
            pb_1.Message.setOneofField(this, 102, this.#one_of_decls[2], value);
        }
        get has_date() {
            return pb_1.Message.getField(this, 102) != null;
        }
        get tags() {
            return pb_1.Message.getFieldWithDefault(this, 103, []) as string[];
        }
        set tags(value: string[]) {
            pb_1.Message.setField(this, 103, value);
        }
        get auth() {
            return pb_1.Message.getFieldWithDefault(this, 201, []) as AuthenticationRole[];
        }
        set auth(value: AuthenticationRole[]) {
            pb_1.Message.setField(this, 201, value);
        }
        get path() {
            return pb_1.Message.getFieldWithDefault(this, 202, "") as string;
        }
        set path(value: string) {
            pb_1.Message.setOneofField(this, 202, this.#one_of_decls[3], value);
        }
        get has_path() {
            return pb_1.Message.getField(this, 202) != null;
        }
        get qos() {
            return pb_1.Message.getFieldWithDefault(this, 203, 0) as number;
        }
        set qos(value: number) {
            pb_1.Message.setOneofField(this, 203, this.#one_of_decls[4], value);
        }
        get has_qos() {
            return pb_1.Message.getField(this, 203) != null;
        }
        get _app_id() {
            const cases: {
                [index: number]: "none" | "app_id";
            } = {
                0: "none",
                13: "app_id"
            };
            return cases[pb_1.Message.computeOneofCase(this, [13])];
        }
        get _inherit_authors() {
            const cases: {
                [index: number]: "none" | "inherit_authors";
            } = {
                0: "none",
                101: "inherit_authors"
            };
            return cases[pb_1.Message.computeOneofCase(this, [101])];
        }
        get _date() {
            const cases: {
                [index: number]: "none" | "date";
            } = {
                0: "none",
                102: "date"
            };
            return cases[pb_1.Message.computeOneofCase(this, [102])];
        }
        get _path() {
            const cases: {
                [index: number]: "none" | "path";
            } = {
                0: "none",
                202: "path"
            };
            return cases[pb_1.Message.computeOneofCase(this, [202])];
        }
        get _qos() {
            const cases: {
                [index: number]: "none" | "qos";
            } = {
                0: "none",
                203: "qos"
            };
            return cases[pb_1.Message.computeOneofCase(this, [203])];
        }
        static fromObject(data: {
            app_id?: string;
            authors?: string[];
            inherit_authors?: boolean;
            date?: string;
            tags?: string[];
            auth?: AuthenticationRole[];
            path?: string;
            qos?: number;
        }): InfoOptions {
            const message = new InfoOptions({});
            if (data.app_id != null) {
                message.app_id = data.app_id;
            }
            if (data.authors != null) {
                message.authors = data.authors;
            }
            if (data.inherit_authors != null) {
                message.inherit_authors = data.inherit_authors;
            }
            if (data.date != null) {
                message.date = data.date;
            }
            if (data.tags != null) {
                message.tags = data.tags;
            }
            if (data.auth != null) {
                message.auth = data.auth;
            }
            if (data.path != null) {
                message.path = data.path;
            }
            if (data.qos != null) {
                message.qos = data.qos;
            }
            return message;
        }
        toObject() {
            const data: {
                app_id?: string;
                authors?: string[];
                inherit_authors?: boolean;
                date?: string;
                tags?: string[];
                auth?: AuthenticationRole[];
                path?: string;
                qos?: number;
            } = {};
            if (this.app_id != null) {
                data.app_id = this.app_id;
            }
            if (this.authors != null) {
                data.authors = this.authors;
            }
            if (this.inherit_authors != null) {
                data.inherit_authors = this.inherit_authors;
            }
            if (this.date != null) {
                data.date = this.date;
            }
            if (this.tags != null) {
                data.tags = this.tags;
            }
            if (this.auth != null) {
                data.auth = this.auth;
            }
            if (this.path != null) {
                data.path = this.path;
            }
            if (this.qos != null) {
                data.qos = this.qos;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_app_id)
                writer.writeString(13, this.app_id);
            if (this.authors.length)
                writer.writeRepeatedString(100, this.authors);
            if (this.has_inherit_authors)
                writer.writeBool(101, this.inherit_authors);
            if (this.has_date)
                writer.writeString(102, this.date);
            if (this.tags.length)
                writer.writeRepeatedString(103, this.tags);
            if (this.auth.length)
                writer.writePackedEnum(201, this.auth);
            if (this.has_path)
                writer.writeString(202, this.path);
            if (this.has_qos)
                writer.writeInt32(203, this.qos);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InfoOptions {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InfoOptions();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 13:
                        message.app_id = reader.readString();
                        break;
                    case 100:
                        pb_1.Message.addToRepeatedField(message, 100, reader.readString());
                        break;
                    case 101:
                        message.inherit_authors = reader.readBool();
                        break;
                    case 102:
                        message.date = reader.readString();
                        break;
                    case 103:
                        pb_1.Message.addToRepeatedField(message, 103, reader.readString());
                        break;
                    case 201:
                        message.auth = reader.readPackedEnum();
                        break;
                    case 202:
                        message.path = reader.readString();
                        break;
                    case 203:
                        message.qos = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): InfoOptions {
            return InfoOptions.deserialize(bytes);
        }
    }
    export class ServiceOptions extends pb_1.Message {
        #one_of_decls: number[][] = [[1], [101], [102], [202], [203], [204]];
        constructor(data?: any[] | ({
            authors?: string[];
            tags?: string[];
            auth?: AuthenticationRole[];
        } & (({
            summary?: string;
        }) | ({
            inherit_authors?: boolean;
        }) | ({
            date?: string;
        }) | ({
            path?: string;
        }) | ({
            qos?: number;
        }) | ({
            cache?: MessageCache;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [100, 103, 201], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("summary" in data && data.summary != undefined) {
                    this.summary = data.summary;
                }
                if ("authors" in data && data.authors != undefined) {
                    this.authors = data.authors;
                }
                if ("inherit_authors" in data && data.inherit_authors != undefined) {
                    this.inherit_authors = data.inherit_authors;
                }
                if ("date" in data && data.date != undefined) {
                    this.date = data.date;
                }
                if ("tags" in data && data.tags != undefined) {
                    this.tags = data.tags;
                }
                if ("auth" in data && data.auth != undefined) {
                    this.auth = data.auth;
                }
                if ("path" in data && data.path != undefined) {
                    this.path = data.path;
                }
                if ("qos" in data && data.qos != undefined) {
                    this.qos = data.qos;
                }
                if ("cache" in data && data.cache != undefined) {
                    this.cache = data.cache;
                }
            }
        }
        get summary() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set summary(value: string) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_summary() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get authors() {
            return pb_1.Message.getFieldWithDefault(this, 100, []) as string[];
        }
        set authors(value: string[]) {
            pb_1.Message.setField(this, 100, value);
        }
        get inherit_authors() {
            return pb_1.Message.getFieldWithDefault(this, 101, false) as boolean;
        }
        set inherit_authors(value: boolean) {
            pb_1.Message.setOneofField(this, 101, this.#one_of_decls[1], value);
        }
        get has_inherit_authors() {
            return pb_1.Message.getField(this, 101) != null;
        }
        get date() {
            return pb_1.Message.getFieldWithDefault(this, 102, "") as string;
        }
        set date(value: string) {
            pb_1.Message.setOneofField(this, 102, this.#one_of_decls[2], value);
        }
        get has_date() {
            return pb_1.Message.getField(this, 102) != null;
        }
        get tags() {
            return pb_1.Message.getFieldWithDefault(this, 103, []) as string[];
        }
        set tags(value: string[]) {
            pb_1.Message.setField(this, 103, value);
        }
        get auth() {
            return pb_1.Message.getFieldWithDefault(this, 201, []) as AuthenticationRole[];
        }
        set auth(value: AuthenticationRole[]) {
            pb_1.Message.setField(this, 201, value);
        }
        get path() {
            return pb_1.Message.getFieldWithDefault(this, 202, "") as string;
        }
        set path(value: string) {
            pb_1.Message.setOneofField(this, 202, this.#one_of_decls[3], value);
        }
        get has_path() {
            return pb_1.Message.getField(this, 202) != null;
        }
        get qos() {
            return pb_1.Message.getFieldWithDefault(this, 203, 0) as number;
        }
        set qos(value: number) {
            pb_1.Message.setOneofField(this, 203, this.#one_of_decls[4], value);
        }
        get has_qos() {
            return pb_1.Message.getField(this, 203) != null;
        }
        get cache() {
            return pb_1.Message.getWrapperField(this, MessageCache, 204) as MessageCache;
        }
        set cache(value: MessageCache) {
            pb_1.Message.setOneofWrapperField(this, 204, this.#one_of_decls[5], value);
        }
        get has_cache() {
            return pb_1.Message.getField(this, 204) != null;
        }
        get _summary() {
            const cases: {
                [index: number]: "none" | "summary";
            } = {
                0: "none",
                1: "summary"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1])];
        }
        get _inherit_authors() {
            const cases: {
                [index: number]: "none" | "inherit_authors";
            } = {
                0: "none",
                101: "inherit_authors"
            };
            return cases[pb_1.Message.computeOneofCase(this, [101])];
        }
        get _date() {
            const cases: {
                [index: number]: "none" | "date";
            } = {
                0: "none",
                102: "date"
            };
            return cases[pb_1.Message.computeOneofCase(this, [102])];
        }
        get _path() {
            const cases: {
                [index: number]: "none" | "path";
            } = {
                0: "none",
                202: "path"
            };
            return cases[pb_1.Message.computeOneofCase(this, [202])];
        }
        get _qos() {
            const cases: {
                [index: number]: "none" | "qos";
            } = {
                0: "none",
                203: "qos"
            };
            return cases[pb_1.Message.computeOneofCase(this, [203])];
        }
        get _cache() {
            const cases: {
                [index: number]: "none" | "cache";
            } = {
                0: "none",
                204: "cache"
            };
            return cases[pb_1.Message.computeOneofCase(this, [204])];
        }
        static fromObject(data: {
            summary?: string;
            authors?: string[];
            inherit_authors?: boolean;
            date?: string;
            tags?: string[];
            auth?: AuthenticationRole[];
            path?: string;
            qos?: number;
            cache?: ReturnType<typeof MessageCache.prototype.toObject>;
        }): ServiceOptions {
            const message = new ServiceOptions({});
            if (data.summary != null) {
                message.summary = data.summary;
            }
            if (data.authors != null) {
                message.authors = data.authors;
            }
            if (data.inherit_authors != null) {
                message.inherit_authors = data.inherit_authors;
            }
            if (data.date != null) {
                message.date = data.date;
            }
            if (data.tags != null) {
                message.tags = data.tags;
            }
            if (data.auth != null) {
                message.auth = data.auth;
            }
            if (data.path != null) {
                message.path = data.path;
            }
            if (data.qos != null) {
                message.qos = data.qos;
            }
            if (data.cache != null) {
                message.cache = MessageCache.fromObject(data.cache);
            }
            return message;
        }
        toObject() {
            const data: {
                summary?: string;
                authors?: string[];
                inherit_authors?: boolean;
                date?: string;
                tags?: string[];
                auth?: AuthenticationRole[];
                path?: string;
                qos?: number;
                cache?: ReturnType<typeof MessageCache.prototype.toObject>;
            } = {};
            if (this.summary != null) {
                data.summary = this.summary;
            }
            if (this.authors != null) {
                data.authors = this.authors;
            }
            if (this.inherit_authors != null) {
                data.inherit_authors = this.inherit_authors;
            }
            if (this.date != null) {
                data.date = this.date;
            }
            if (this.tags != null) {
                data.tags = this.tags;
            }
            if (this.auth != null) {
                data.auth = this.auth;
            }
            if (this.path != null) {
                data.path = this.path;
            }
            if (this.qos != null) {
                data.qos = this.qos;
            }
            if (this.cache != null) {
                data.cache = this.cache.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_summary)
                writer.writeString(1, this.summary);
            if (this.authors.length)
                writer.writeRepeatedString(100, this.authors);
            if (this.has_inherit_authors)
                writer.writeBool(101, this.inherit_authors);
            if (this.has_date)
                writer.writeString(102, this.date);
            if (this.tags.length)
                writer.writeRepeatedString(103, this.tags);
            if (this.auth.length)
                writer.writePackedEnum(201, this.auth);
            if (this.has_path)
                writer.writeString(202, this.path);
            if (this.has_qos)
                writer.writeInt32(203, this.qos);
            if (this.has_cache)
                writer.writeMessage(204, this.cache, () => this.cache.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ServiceOptions {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ServiceOptions();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.summary = reader.readString();
                        break;
                    case 100:
                        pb_1.Message.addToRepeatedField(message, 100, reader.readString());
                        break;
                    case 101:
                        message.inherit_authors = reader.readBool();
                        break;
                    case 102:
                        message.date = reader.readString();
                        break;
                    case 103:
                        pb_1.Message.addToRepeatedField(message, 103, reader.readString());
                        break;
                    case 201:
                        message.auth = reader.readPackedEnum();
                        break;
                    case 202:
                        message.path = reader.readString();
                        break;
                    case 203:
                        message.qos = reader.readInt32();
                        break;
                    case 204:
                        reader.readMessage(message.cache, () => message.cache = MessageCache.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ServiceOptions {
            return ServiceOptions.deserialize(bytes);
        }
    }
    export class MethodOptions extends pb_1.Message {
        #one_of_decls: number[][] = [[2], [3], [101], [102], [202], [203], [204], [20], [21], [22]];
        constructor(data?: any[] | ({
            id?: number;
            authors?: string[];
            tags?: string[];
            auth?: AuthenticationRole[];
            docs?: ExternalDocumentation[];
        } & (({
            summary?: string;
        }) | ({
            ready?: boolean;
        }) | ({
            inherit_authors?: boolean;
        }) | ({
            date?: string;
        }) | ({
            path?: string;
        }) | ({
            qos?: number;
        }) | ({
            cache?: MessageCache;
        }) | ({
            readonly?: boolean;
        }) | ({
            in?: Payload;
        }) | ({
            out?: Payload;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [100, 103, 201, 50], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("summary" in data && data.summary != undefined) {
                    this.summary = data.summary;
                }
                if ("ready" in data && data.ready != undefined) {
                    this.ready = data.ready;
                }
                if ("authors" in data && data.authors != undefined) {
                    this.authors = data.authors;
                }
                if ("inherit_authors" in data && data.inherit_authors != undefined) {
                    this.inherit_authors = data.inherit_authors;
                }
                if ("date" in data && data.date != undefined) {
                    this.date = data.date;
                }
                if ("tags" in data && data.tags != undefined) {
                    this.tags = data.tags;
                }
                if ("auth" in data && data.auth != undefined) {
                    this.auth = data.auth;
                }
                if ("path" in data && data.path != undefined) {
                    this.path = data.path;
                }
                if ("qos" in data && data.qos != undefined) {
                    this.qos = data.qos;
                }
                if ("cache" in data && data.cache != undefined) {
                    this.cache = data.cache;
                }
                if ("readonly" in data && data.readonly != undefined) {
                    this.readonly = data.readonly;
                }
                if ("in" in data && data.in != undefined) {
                    this.in = data.in;
                }
                if ("out" in data && data.out != undefined) {
                    this.out = data.out;
                }
                if ("docs" in data && data.docs != undefined) {
                    this.docs = data.docs;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get summary() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set summary(value: string) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
        }
        get has_summary() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get ready() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set ready(value: boolean) {
            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[1], value);
        }
        get has_ready() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get authors() {
            return pb_1.Message.getFieldWithDefault(this, 100, []) as string[];
        }
        set authors(value: string[]) {
            pb_1.Message.setField(this, 100, value);
        }
        get inherit_authors() {
            return pb_1.Message.getFieldWithDefault(this, 101, false) as boolean;
        }
        set inherit_authors(value: boolean) {
            pb_1.Message.setOneofField(this, 101, this.#one_of_decls[2], value);
        }
        get has_inherit_authors() {
            return pb_1.Message.getField(this, 101) != null;
        }
        get date() {
            return pb_1.Message.getFieldWithDefault(this, 102, "") as string;
        }
        set date(value: string) {
            pb_1.Message.setOneofField(this, 102, this.#one_of_decls[3], value);
        }
        get has_date() {
            return pb_1.Message.getField(this, 102) != null;
        }
        get tags() {
            return pb_1.Message.getFieldWithDefault(this, 103, []) as string[];
        }
        set tags(value: string[]) {
            pb_1.Message.setField(this, 103, value);
        }
        get auth() {
            return pb_1.Message.getFieldWithDefault(this, 201, []) as AuthenticationRole[];
        }
        set auth(value: AuthenticationRole[]) {
            pb_1.Message.setField(this, 201, value);
        }
        get path() {
            return pb_1.Message.getFieldWithDefault(this, 202, "") as string;
        }
        set path(value: string) {
            pb_1.Message.setOneofField(this, 202, this.#one_of_decls[4], value);
        }
        get has_path() {
            return pb_1.Message.getField(this, 202) != null;
        }
        get qos() {
            return pb_1.Message.getFieldWithDefault(this, 203, 0) as number;
        }
        set qos(value: number) {
            pb_1.Message.setOneofField(this, 203, this.#one_of_decls[5], value);
        }
        get has_qos() {
            return pb_1.Message.getField(this, 203) != null;
        }
        get cache() {
            return pb_1.Message.getWrapperField(this, MessageCache, 204) as MessageCache;
        }
        set cache(value: MessageCache) {
            pb_1.Message.setOneofWrapperField(this, 204, this.#one_of_decls[6], value);
        }
        get has_cache() {
            return pb_1.Message.getField(this, 204) != null;
        }
        get readonly() {
            return pb_1.Message.getFieldWithDefault(this, 20, false) as boolean;
        }
        set readonly(value: boolean) {
            pb_1.Message.setOneofField(this, 20, this.#one_of_decls[7], value);
        }
        get has_readonly() {
            return pb_1.Message.getField(this, 20) != null;
        }
        get in() {
            return pb_1.Message.getWrapperField(this, Payload, 21) as Payload;
        }
        set in(value: Payload) {
            pb_1.Message.setOneofWrapperField(this, 21, this.#one_of_decls[8], value);
        }
        get has_in() {
            return pb_1.Message.getField(this, 21) != null;
        }
        get out() {
            return pb_1.Message.getWrapperField(this, Payload, 22) as Payload;
        }
        set out(value: Payload) {
            pb_1.Message.setOneofWrapperField(this, 22, this.#one_of_decls[9], value);
        }
        get has_out() {
            return pb_1.Message.getField(this, 22) != null;
        }
        get docs() {
            return pb_1.Message.getRepeatedWrapperField(this, ExternalDocumentation, 50) as ExternalDocumentation[];
        }
        set docs(value: ExternalDocumentation[]) {
            pb_1.Message.setRepeatedWrapperField(this, 50, value);
        }
        get _summary() {
            const cases: {
                [index: number]: "none" | "summary";
            } = {
                0: "none",
                2: "summary"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        get _ready() {
            const cases: {
                [index: number]: "none" | "ready";
            } = {
                0: "none",
                3: "ready"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3])];
        }
        get _inherit_authors() {
            const cases: {
                [index: number]: "none" | "inherit_authors";
            } = {
                0: "none",
                101: "inherit_authors"
            };
            return cases[pb_1.Message.computeOneofCase(this, [101])];
        }
        get _date() {
            const cases: {
                [index: number]: "none" | "date";
            } = {
                0: "none",
                102: "date"
            };
            return cases[pb_1.Message.computeOneofCase(this, [102])];
        }
        get _path() {
            const cases: {
                [index: number]: "none" | "path";
            } = {
                0: "none",
                202: "path"
            };
            return cases[pb_1.Message.computeOneofCase(this, [202])];
        }
        get _qos() {
            const cases: {
                [index: number]: "none" | "qos";
            } = {
                0: "none",
                203: "qos"
            };
            return cases[pb_1.Message.computeOneofCase(this, [203])];
        }
        get _cache() {
            const cases: {
                [index: number]: "none" | "cache";
            } = {
                0: "none",
                204: "cache"
            };
            return cases[pb_1.Message.computeOneofCase(this, [204])];
        }
        get _readonly() {
            const cases: {
                [index: number]: "none" | "readonly";
            } = {
                0: "none",
                20: "readonly"
            };
            return cases[pb_1.Message.computeOneofCase(this, [20])];
        }
        get _in() {
            const cases: {
                [index: number]: "none" | "in";
            } = {
                0: "none",
                21: "in"
            };
            return cases[pb_1.Message.computeOneofCase(this, [21])];
        }
        get _out() {
            const cases: {
                [index: number]: "none" | "out";
            } = {
                0: "none",
                22: "out"
            };
            return cases[pb_1.Message.computeOneofCase(this, [22])];
        }
        static fromObject(data: {
            id?: number;
            summary?: string;
            ready?: boolean;
            authors?: string[];
            inherit_authors?: boolean;
            date?: string;
            tags?: string[];
            auth?: AuthenticationRole[];
            path?: string;
            qos?: number;
            cache?: ReturnType<typeof MessageCache.prototype.toObject>;
            readonly?: boolean;
            in?: ReturnType<typeof Payload.prototype.toObject>;
            out?: ReturnType<typeof Payload.prototype.toObject>;
            docs?: ReturnType<typeof ExternalDocumentation.prototype.toObject>[];
        }): MethodOptions {
            const message = new MethodOptions({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.summary != null) {
                message.summary = data.summary;
            }
            if (data.ready != null) {
                message.ready = data.ready;
            }
            if (data.authors != null) {
                message.authors = data.authors;
            }
            if (data.inherit_authors != null) {
                message.inherit_authors = data.inherit_authors;
            }
            if (data.date != null) {
                message.date = data.date;
            }
            if (data.tags != null) {
                message.tags = data.tags;
            }
            if (data.auth != null) {
                message.auth = data.auth;
            }
            if (data.path != null) {
                message.path = data.path;
            }
            if (data.qos != null) {
                message.qos = data.qos;
            }
            if (data.cache != null) {
                message.cache = MessageCache.fromObject(data.cache);
            }
            if (data.readonly != null) {
                message.readonly = data.readonly;
            }
            if (data.in != null) {
                message.in = Payload.fromObject(data.in);
            }
            if (data.out != null) {
                message.out = Payload.fromObject(data.out);
            }
            if (data.docs != null) {
                message.docs = data.docs.map(item => ExternalDocumentation.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                summary?: string;
                ready?: boolean;
                authors?: string[];
                inherit_authors?: boolean;
                date?: string;
                tags?: string[];
                auth?: AuthenticationRole[];
                path?: string;
                qos?: number;
                cache?: ReturnType<typeof MessageCache.prototype.toObject>;
                readonly?: boolean;
                in?: ReturnType<typeof Payload.prototype.toObject>;
                out?: ReturnType<typeof Payload.prototype.toObject>;
                docs?: ReturnType<typeof ExternalDocumentation.prototype.toObject>[];
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.summary != null) {
                data.summary = this.summary;
            }
            if (this.ready != null) {
                data.ready = this.ready;
            }
            if (this.authors != null) {
                data.authors = this.authors;
            }
            if (this.inherit_authors != null) {
                data.inherit_authors = this.inherit_authors;
            }
            if (this.date != null) {
                data.date = this.date;
            }
            if (this.tags != null) {
                data.tags = this.tags;
            }
            if (this.auth != null) {
                data.auth = this.auth;
            }
            if (this.path != null) {
                data.path = this.path;
            }
            if (this.qos != null) {
                data.qos = this.qos;
            }
            if (this.cache != null) {
                data.cache = this.cache.toObject();
            }
            if (this.readonly != null) {
                data.readonly = this.readonly;
            }
            if (this.in != null) {
                data.in = this.in.toObject();
            }
            if (this.out != null) {
                data.out = this.out.toObject();
            }
            if (this.docs != null) {
                data.docs = this.docs.map((item: ExternalDocumentation) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeUint32(1, this.id);
            if (this.has_summary)
                writer.writeString(2, this.summary);
            if (this.has_ready)
                writer.writeBool(3, this.ready);
            if (this.authors.length)
                writer.writeRepeatedString(100, this.authors);
            if (this.has_inherit_authors)
                writer.writeBool(101, this.inherit_authors);
            if (this.has_date)
                writer.writeString(102, this.date);
            if (this.tags.length)
                writer.writeRepeatedString(103, this.tags);
            if (this.auth.length)
                writer.writePackedEnum(201, this.auth);
            if (this.has_path)
                writer.writeString(202, this.path);
            if (this.has_qos)
                writer.writeInt32(203, this.qos);
            if (this.has_cache)
                writer.writeMessage(204, this.cache, () => this.cache.serialize(writer));
            if (this.has_readonly)
                writer.writeBool(20, this.readonly);
            if (this.has_in)
                writer.writeMessage(21, this.in, () => this.in.serialize(writer));
            if (this.has_out)
                writer.writeMessage(22, this.out, () => this.out.serialize(writer));
            if (this.docs.length)
                writer.writeRepeatedMessage(50, this.docs, (item: ExternalDocumentation) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MethodOptions {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MethodOptions();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readUint32();
                        break;
                    case 2:
                        message.summary = reader.readString();
                        break;
                    case 3:
                        message.ready = reader.readBool();
                        break;
                    case 100:
                        pb_1.Message.addToRepeatedField(message, 100, reader.readString());
                        break;
                    case 101:
                        message.inherit_authors = reader.readBool();
                        break;
                    case 102:
                        message.date = reader.readString();
                        break;
                    case 103:
                        pb_1.Message.addToRepeatedField(message, 103, reader.readString());
                        break;
                    case 201:
                        message.auth = reader.readPackedEnum();
                        break;
                    case 202:
                        message.path = reader.readString();
                        break;
                    case 203:
                        message.qos = reader.readInt32();
                        break;
                    case 204:
                        reader.readMessage(message.cache, () => message.cache = MessageCache.deserialize(reader));
                        break;
                    case 20:
                        message.readonly = reader.readBool();
                        break;
                    case 21:
                        reader.readMessage(message.in, () => message.in = Payload.deserialize(reader));
                        break;
                    case 22:
                        reader.readMessage(message.out, () => message.out = Payload.deserialize(reader));
                        break;
                    case 50:
                        reader.readMessage(message.docs, () => pb_1.Message.addToRepeatedWrapperField(message, 50, ExternalDocumentation.deserialize(reader), ExternalDocumentation));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MethodOptions {
            return MethodOptions.deserialize(bytes);
        }
    }
    export class PubSubOptions extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            topic?: string;
            route?: string;
            retry?: boolean;
            content_type?: string;
            match?: string;
            priority?: number;
            disable_topic_validation?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("topic" in data && data.topic != undefined) {
                    this.topic = data.topic;
                }
                if ("route" in data && data.route != undefined) {
                    this.route = data.route;
                }
                if ("retry" in data && data.retry != undefined) {
                    this.retry = data.retry;
                }
                if ("content_type" in data && data.content_type != undefined) {
                    this.content_type = data.content_type;
                }
                if ("match" in data && data.match != undefined) {
                    this.match = data.match;
                }
                if ("priority" in data && data.priority != undefined) {
                    this.priority = data.priority;
                }
                if ("disable_topic_validation" in data && data.disable_topic_validation != undefined) {
                    this.disable_topic_validation = data.disable_topic_validation;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get topic() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set topic(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get route() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set route(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get retry() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set retry(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        get content_type() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set content_type(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get match() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set match(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get priority() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set priority(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get disable_topic_validation() {
            return pb_1.Message.getFieldWithDefault(this, 8, false) as boolean;
        }
        set disable_topic_validation(value: boolean) {
            pb_1.Message.setField(this, 8, value);
        }
        static fromObject(data: {
            name?: string;
            topic?: string;
            route?: string;
            retry?: boolean;
            content_type?: string;
            match?: string;
            priority?: number;
            disable_topic_validation?: boolean;
        }): PubSubOptions {
            const message = new PubSubOptions({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.topic != null) {
                message.topic = data.topic;
            }
            if (data.route != null) {
                message.route = data.route;
            }
            if (data.retry != null) {
                message.retry = data.retry;
            }
            if (data.content_type != null) {
                message.content_type = data.content_type;
            }
            if (data.match != null) {
                message.match = data.match;
            }
            if (data.priority != null) {
                message.priority = data.priority;
            }
            if (data.disable_topic_validation != null) {
                message.disable_topic_validation = data.disable_topic_validation;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                topic?: string;
                route?: string;
                retry?: boolean;
                content_type?: string;
                match?: string;
                priority?: number;
                disable_topic_validation?: boolean;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.topic != null) {
                data.topic = this.topic;
            }
            if (this.route != null) {
                data.route = this.route;
            }
            if (this.retry != null) {
                data.retry = this.retry;
            }
            if (this.content_type != null) {
                data.content_type = this.content_type;
            }
            if (this.match != null) {
                data.match = this.match;
            }
            if (this.priority != null) {
                data.priority = this.priority;
            }
            if (this.disable_topic_validation != null) {
                data.disable_topic_validation = this.disable_topic_validation;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.topic.length)
                writer.writeString(2, this.topic);
            if (this.route.length)
                writer.writeString(3, this.route);
            if (this.retry != false)
                writer.writeBool(4, this.retry);
            if (this.content_type.length)
                writer.writeString(5, this.content_type);
            if (this.match.length)
                writer.writeString(6, this.match);
            if (this.priority != 0)
                writer.writeInt32(7, this.priority);
            if (this.disable_topic_validation != false)
                writer.writeBool(8, this.disable_topic_validation);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PubSubOptions {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PubSubOptions();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.topic = reader.readString();
                        break;
                    case 3:
                        message.route = reader.readString();
                        break;
                    case 4:
                        message.retry = reader.readBool();
                        break;
                    case 5:
                        message.content_type = reader.readString();
                        break;
                    case 6:
                        message.match = reader.readString();
                        break;
                    case 7:
                        message.priority = reader.readInt32();
                        break;
                    case 8:
                        message.disable_topic_validation = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PubSubOptions {
            return PubSubOptions.deserialize(bytes);
        }
    }
    export class MessageOptions extends pb_1.Message {
        #one_of_decls: number[][] = [[1]];
        constructor(data?: any[] | ({} & (({
            summary?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("summary" in data && data.summary != undefined) {
                    this.summary = data.summary;
                }
            }
        }
        get summary() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set summary(value: string) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_summary() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get _summary() {
            const cases: {
                [index: number]: "none" | "summary";
            } = {
                0: "none",
                1: "summary"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1])];
        }
        static fromObject(data: {
            summary?: string;
        }): MessageOptions {
            const message = new MessageOptions({});
            if (data.summary != null) {
                message.summary = data.summary;
            }
            return message;
        }
        toObject() {
            const data: {
                summary?: string;
            } = {};
            if (this.summary != null) {
                data.summary = this.summary;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_summary)
                writer.writeString(1, this.summary);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MessageOptions {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MessageOptions();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.summary = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MessageOptions {
            return MessageOptions.deserialize(bytes);
        }
    }
    export class FieldOptions extends pb_1.Message {
        #one_of_decls: number[][] = [[1], [2], [3], [5], [6], [10], [11], [12], [13], [14], [20], [21], [30], [40], [41], [42]];
        constructor(data?: any[] | ({} & (({
            summary?: string;
        }) | ({
            in?: boolean;
        }) | ({
            out?: boolean;
        }) | ({
            required?: boolean;
        }) | ({
            example?: string;
        }) | ({
            minimum?: number;
        }) | ({
            exclusiveMinimum?: boolean;
        }) | ({
            maximum?: number;
        }) | ({
            exclusiveMaximum?: boolean;
        }) | ({
            multipleOf?: number;
        }) | ({
            maxLength?: number;
        }) | ({
            minLength?: number;
        }) | ({
            pattern?: string;
        }) | ({
            maxItems?: number;
        }) | ({
            minItems?: number;
        }) | ({
            uniqueItems?: boolean;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("summary" in data && data.summary != undefined) {
                    this.summary = data.summary;
                }
                if ("in" in data && data.in != undefined) {
                    this.in = data.in;
                }
                if ("out" in data && data.out != undefined) {
                    this.out = data.out;
                }
                if ("required" in data && data.required != undefined) {
                    this.required = data.required;
                }
                if ("example" in data && data.example != undefined) {
                    this.example = data.example;
                }
                if ("minimum" in data && data.minimum != undefined) {
                    this.minimum = data.minimum;
                }
                if ("exclusiveMinimum" in data && data.exclusiveMinimum != undefined) {
                    this.exclusiveMinimum = data.exclusiveMinimum;
                }
                if ("maximum" in data && data.maximum != undefined) {
                    this.maximum = data.maximum;
                }
                if ("exclusiveMaximum" in data && data.exclusiveMaximum != undefined) {
                    this.exclusiveMaximum = data.exclusiveMaximum;
                }
                if ("multipleOf" in data && data.multipleOf != undefined) {
                    this.multipleOf = data.multipleOf;
                }
                if ("maxLength" in data && data.maxLength != undefined) {
                    this.maxLength = data.maxLength;
                }
                if ("minLength" in data && data.minLength != undefined) {
                    this.minLength = data.minLength;
                }
                if ("pattern" in data && data.pattern != undefined) {
                    this.pattern = data.pattern;
                }
                if ("maxItems" in data && data.maxItems != undefined) {
                    this.maxItems = data.maxItems;
                }
                if ("minItems" in data && data.minItems != undefined) {
                    this.minItems = data.minItems;
                }
                if ("uniqueItems" in data && data.uniqueItems != undefined) {
                    this.uniqueItems = data.uniqueItems;
                }
            }
        }
        get summary() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set summary(value: string) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_summary() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get in() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set in(value: boolean) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[1], value);
        }
        get has_in() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get out() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set out(value: boolean) {
            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[2], value);
        }
        get has_out() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get required() {
            return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
        }
        set required(value: boolean) {
            pb_1.Message.setOneofField(this, 5, this.#one_of_decls[3], value);
        }
        get has_required() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get example() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set example(value: string) {
            pb_1.Message.setOneofField(this, 6, this.#one_of_decls[4], value);
        }
        get has_example() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get minimum() {
            return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
        }
        set minimum(value: number) {
            pb_1.Message.setOneofField(this, 10, this.#one_of_decls[5], value);
        }
        get has_minimum() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get exclusiveMinimum() {
            return pb_1.Message.getFieldWithDefault(this, 11, false) as boolean;
        }
        set exclusiveMinimum(value: boolean) {
            pb_1.Message.setOneofField(this, 11, this.#one_of_decls[6], value);
        }
        get has_exclusiveMinimum() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get maximum() {
            return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;
        }
        set maximum(value: number) {
            pb_1.Message.setOneofField(this, 12, this.#one_of_decls[7], value);
        }
        get has_maximum() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get exclusiveMaximum() {
            return pb_1.Message.getFieldWithDefault(this, 13, false) as boolean;
        }
        set exclusiveMaximum(value: boolean) {
            pb_1.Message.setOneofField(this, 13, this.#one_of_decls[8], value);
        }
        get has_exclusiveMaximum() {
            return pb_1.Message.getField(this, 13) != null;
        }
        get multipleOf() {
            return pb_1.Message.getFieldWithDefault(this, 14, 0) as number;
        }
        set multipleOf(value: number) {
            pb_1.Message.setOneofField(this, 14, this.#one_of_decls[9], value);
        }
        get has_multipleOf() {
            return pb_1.Message.getField(this, 14) != null;
        }
        get maxLength() {
            return pb_1.Message.getFieldWithDefault(this, 20, 0) as number;
        }
        set maxLength(value: number) {
            pb_1.Message.setOneofField(this, 20, this.#one_of_decls[10], value);
        }
        get has_maxLength() {
            return pb_1.Message.getField(this, 20) != null;
        }
        get minLength() {
            return pb_1.Message.getFieldWithDefault(this, 21, 0) as number;
        }
        set minLength(value: number) {
            pb_1.Message.setOneofField(this, 21, this.#one_of_decls[11], value);
        }
        get has_minLength() {
            return pb_1.Message.getField(this, 21) != null;
        }
        get pattern() {
            return pb_1.Message.getFieldWithDefault(this, 30, "") as string;
        }
        set pattern(value: string) {
            pb_1.Message.setOneofField(this, 30, this.#one_of_decls[12], value);
        }
        get has_pattern() {
            return pb_1.Message.getField(this, 30) != null;
        }
        get maxItems() {
            return pb_1.Message.getFieldWithDefault(this, 40, 0) as number;
        }
        set maxItems(value: number) {
            pb_1.Message.setOneofField(this, 40, this.#one_of_decls[13], value);
        }
        get has_maxItems() {
            return pb_1.Message.getField(this, 40) != null;
        }
        get minItems() {
            return pb_1.Message.getFieldWithDefault(this, 41, 0) as number;
        }
        set minItems(value: number) {
            pb_1.Message.setOneofField(this, 41, this.#one_of_decls[14], value);
        }
        get has_minItems() {
            return pb_1.Message.getField(this, 41) != null;
        }
        get uniqueItems() {
            return pb_1.Message.getFieldWithDefault(this, 42, false) as boolean;
        }
        set uniqueItems(value: boolean) {
            pb_1.Message.setOneofField(this, 42, this.#one_of_decls[15], value);
        }
        get has_uniqueItems() {
            return pb_1.Message.getField(this, 42) != null;
        }
        get _summary() {
            const cases: {
                [index: number]: "none" | "summary";
            } = {
                0: "none",
                1: "summary"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1])];
        }
        get _in() {
            const cases: {
                [index: number]: "none" | "in";
            } = {
                0: "none",
                2: "in"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        get _out() {
            const cases: {
                [index: number]: "none" | "out";
            } = {
                0: "none",
                3: "out"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3])];
        }
        get _required() {
            const cases: {
                [index: number]: "none" | "required";
            } = {
                0: "none",
                5: "required"
            };
            return cases[pb_1.Message.computeOneofCase(this, [5])];
        }
        get _example() {
            const cases: {
                [index: number]: "none" | "example";
            } = {
                0: "none",
                6: "example"
            };
            return cases[pb_1.Message.computeOneofCase(this, [6])];
        }
        get _minimum() {
            const cases: {
                [index: number]: "none" | "minimum";
            } = {
                0: "none",
                10: "minimum"
            };
            return cases[pb_1.Message.computeOneofCase(this, [10])];
        }
        get _exclusiveMinimum() {
            const cases: {
                [index: number]: "none" | "exclusiveMinimum";
            } = {
                0: "none",
                11: "exclusiveMinimum"
            };
            return cases[pb_1.Message.computeOneofCase(this, [11])];
        }
        get _maximum() {
            const cases: {
                [index: number]: "none" | "maximum";
            } = {
                0: "none",
                12: "maximum"
            };
            return cases[pb_1.Message.computeOneofCase(this, [12])];
        }
        get _exclusiveMaximum() {
            const cases: {
                [index: number]: "none" | "exclusiveMaximum";
            } = {
                0: "none",
                13: "exclusiveMaximum"
            };
            return cases[pb_1.Message.computeOneofCase(this, [13])];
        }
        get _multipleOf() {
            const cases: {
                [index: number]: "none" | "multipleOf";
            } = {
                0: "none",
                14: "multipleOf"
            };
            return cases[pb_1.Message.computeOneofCase(this, [14])];
        }
        get _maxLength() {
            const cases: {
                [index: number]: "none" | "maxLength";
            } = {
                0: "none",
                20: "maxLength"
            };
            return cases[pb_1.Message.computeOneofCase(this, [20])];
        }
        get _minLength() {
            const cases: {
                [index: number]: "none" | "minLength";
            } = {
                0: "none",
                21: "minLength"
            };
            return cases[pb_1.Message.computeOneofCase(this, [21])];
        }
        get _pattern() {
            const cases: {
                [index: number]: "none" | "pattern";
            } = {
                0: "none",
                30: "pattern"
            };
            return cases[pb_1.Message.computeOneofCase(this, [30])];
        }
        get _maxItems() {
            const cases: {
                [index: number]: "none" | "maxItems";
            } = {
                0: "none",
                40: "maxItems"
            };
            return cases[pb_1.Message.computeOneofCase(this, [40])];
        }
        get _minItems() {
            const cases: {
                [index: number]: "none" | "minItems";
            } = {
                0: "none",
                41: "minItems"
            };
            return cases[pb_1.Message.computeOneofCase(this, [41])];
        }
        get _uniqueItems() {
            const cases: {
                [index: number]: "none" | "uniqueItems";
            } = {
                0: "none",
                42: "uniqueItems"
            };
            return cases[pb_1.Message.computeOneofCase(this, [42])];
        }
        static fromObject(data: {
            summary?: string;
            in?: boolean;
            out?: boolean;
            required?: boolean;
            example?: string;
            minimum?: number;
            exclusiveMinimum?: boolean;
            maximum?: number;
            exclusiveMaximum?: boolean;
            multipleOf?: number;
            maxLength?: number;
            minLength?: number;
            pattern?: string;
            maxItems?: number;
            minItems?: number;
            uniqueItems?: boolean;
        }): FieldOptions {
            const message = new FieldOptions({});
            if (data.summary != null) {
                message.summary = data.summary;
            }
            if (data.in != null) {
                message.in = data.in;
            }
            if (data.out != null) {
                message.out = data.out;
            }
            if (data.required != null) {
                message.required = data.required;
            }
            if (data.example != null) {
                message.example = data.example;
            }
            if (data.minimum != null) {
                message.minimum = data.minimum;
            }
            if (data.exclusiveMinimum != null) {
                message.exclusiveMinimum = data.exclusiveMinimum;
            }
            if (data.maximum != null) {
                message.maximum = data.maximum;
            }
            if (data.exclusiveMaximum != null) {
                message.exclusiveMaximum = data.exclusiveMaximum;
            }
            if (data.multipleOf != null) {
                message.multipleOf = data.multipleOf;
            }
            if (data.maxLength != null) {
                message.maxLength = data.maxLength;
            }
            if (data.minLength != null) {
                message.minLength = data.minLength;
            }
            if (data.pattern != null) {
                message.pattern = data.pattern;
            }
            if (data.maxItems != null) {
                message.maxItems = data.maxItems;
            }
            if (data.minItems != null) {
                message.minItems = data.minItems;
            }
            if (data.uniqueItems != null) {
                message.uniqueItems = data.uniqueItems;
            }
            return message;
        }
        toObject() {
            const data: {
                summary?: string;
                in?: boolean;
                out?: boolean;
                required?: boolean;
                example?: string;
                minimum?: number;
                exclusiveMinimum?: boolean;
                maximum?: number;
                exclusiveMaximum?: boolean;
                multipleOf?: number;
                maxLength?: number;
                minLength?: number;
                pattern?: string;
                maxItems?: number;
                minItems?: number;
                uniqueItems?: boolean;
            } = {};
            if (this.summary != null) {
                data.summary = this.summary;
            }
            if (this.in != null) {
                data.in = this.in;
            }
            if (this.out != null) {
                data.out = this.out;
            }
            if (this.required != null) {
                data.required = this.required;
            }
            if (this.example != null) {
                data.example = this.example;
            }
            if (this.minimum != null) {
                data.minimum = this.minimum;
            }
            if (this.exclusiveMinimum != null) {
                data.exclusiveMinimum = this.exclusiveMinimum;
            }
            if (this.maximum != null) {
                data.maximum = this.maximum;
            }
            if (this.exclusiveMaximum != null) {
                data.exclusiveMaximum = this.exclusiveMaximum;
            }
            if (this.multipleOf != null) {
                data.multipleOf = this.multipleOf;
            }
            if (this.maxLength != null) {
                data.maxLength = this.maxLength;
            }
            if (this.minLength != null) {
                data.minLength = this.minLength;
            }
            if (this.pattern != null) {
                data.pattern = this.pattern;
            }
            if (this.maxItems != null) {
                data.maxItems = this.maxItems;
            }
            if (this.minItems != null) {
                data.minItems = this.minItems;
            }
            if (this.uniqueItems != null) {
                data.uniqueItems = this.uniqueItems;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_summary)
                writer.writeString(1, this.summary);
            if (this.has_in)
                writer.writeBool(2, this.in);
            if (this.has_out)
                writer.writeBool(3, this.out);
            if (this.has_required)
                writer.writeBool(5, this.required);
            if (this.has_example)
                writer.writeString(6, this.example);
            if (this.has_minimum)
                writer.writeInt64(10, this.minimum);
            if (this.has_exclusiveMinimum)
                writer.writeBool(11, this.exclusiveMinimum);
            if (this.has_maximum)
                writer.writeUint64(12, this.maximum);
            if (this.has_exclusiveMaximum)
                writer.writeBool(13, this.exclusiveMaximum);
            if (this.has_multipleOf)
                writer.writeInt64(14, this.multipleOf);
            if (this.has_maxLength)
                writer.writeUint32(20, this.maxLength);
            if (this.has_minLength)
                writer.writeUint32(21, this.minLength);
            if (this.has_pattern)
                writer.writeString(30, this.pattern);
            if (this.has_maxItems)
                writer.writeUint32(40, this.maxItems);
            if (this.has_minItems)
                writer.writeUint32(41, this.minItems);
            if (this.has_uniqueItems)
                writer.writeBool(42, this.uniqueItems);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FieldOptions {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FieldOptions();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.summary = reader.readString();
                        break;
                    case 2:
                        message.in = reader.readBool();
                        break;
                    case 3:
                        message.out = reader.readBool();
                        break;
                    case 5:
                        message.required = reader.readBool();
                        break;
                    case 6:
                        message.example = reader.readString();
                        break;
                    case 10:
                        message.minimum = reader.readInt64();
                        break;
                    case 11:
                        message.exclusiveMinimum = reader.readBool();
                        break;
                    case 12:
                        message.maximum = reader.readUint64();
                        break;
                    case 13:
                        message.exclusiveMaximum = reader.readBool();
                        break;
                    case 14:
                        message.multipleOf = reader.readInt64();
                        break;
                    case 20:
                        message.maxLength = reader.readUint32();
                        break;
                    case 21:
                        message.minLength = reader.readUint32();
                        break;
                    case 30:
                        message.pattern = reader.readString();
                        break;
                    case 40:
                        message.maxItems = reader.readUint32();
                        break;
                    case 41:
                        message.minItems = reader.readUint32();
                        break;
                    case 42:
                        message.uniqueItems = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FieldOptions {
            return FieldOptions.deserialize(bytes);
        }
    }
}
