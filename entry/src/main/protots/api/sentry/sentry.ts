/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.26.1
 * source: api/sentry/sentry.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../google/protobuf/wrappers";
import * as dependency_2 from "./../common/c_device";
import * as dependency_3 from "./../option";
import * as pb_1 from "google-protobuf";
export namespace api.sentry {
    export enum AuthRole {
        ROLE_NONE = 0,
        ROLE_ANONYMOUS = 1,
        ROLE_CUSTOMER = 2,
        ROLE_WORKER = 3,
        ROLE_SYSTEM = 4,
        ROLE_ENTRANCE = 5,
        ROLE_ADMINISTRATOR = 6
    }
    export class AuthToken extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            tenant_id?: number;
            owner_role?: AuthRole;
            owner_id?: number;
            owner_session?: number;
            owner_session_time?: number;
            owner_device?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("tenant_id" in data && data.tenant_id != undefined) {
                    this.tenant_id = data.tenant_id;
                }
                if ("owner_role" in data && data.owner_role != undefined) {
                    this.owner_role = data.owner_role;
                }
                if ("owner_id" in data && data.owner_id != undefined) {
                    this.owner_id = data.owner_id;
                }
                if ("owner_session" in data && data.owner_session != undefined) {
                    this.owner_session = data.owner_session;
                }
                if ("owner_session_time" in data && data.owner_session_time != undefined) {
                    this.owner_session_time = data.owner_session_time;
                }
                if ("owner_device" in data && data.owner_device != undefined) {
                    this.owner_device = data.owner_device;
                }
            }
        }
        get tenant_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set tenant_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get owner_role() {
            return pb_1.Message.getFieldWithDefault(this, 2, AuthRole.ROLE_NONE) as AuthRole;
        }
        set owner_role(value: AuthRole) {
            pb_1.Message.setField(this, 2, value);
        }
        get owner_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set owner_id(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get owner_session() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set owner_session(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get owner_session_time() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set owner_session_time(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get owner_device() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set owner_device(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            tenant_id?: number;
            owner_role?: AuthRole;
            owner_id?: number;
            owner_session?: number;
            owner_session_time?: number;
            owner_device?: number;
        }): AuthToken {
            const message = new AuthToken({});
            if (data.tenant_id != null) {
                message.tenant_id = data.tenant_id;
            }
            if (data.owner_role != null) {
                message.owner_role = data.owner_role;
            }
            if (data.owner_id != null) {
                message.owner_id = data.owner_id;
            }
            if (data.owner_session != null) {
                message.owner_session = data.owner_session;
            }
            if (data.owner_session_time != null) {
                message.owner_session_time = data.owner_session_time;
            }
            if (data.owner_device != null) {
                message.owner_device = data.owner_device;
            }
            return message;
        }
        toObject() {
            const data: {
                tenant_id?: number;
                owner_role?: AuthRole;
                owner_id?: number;
                owner_session?: number;
                owner_session_time?: number;
                owner_device?: number;
            } = {};
            if (this.tenant_id != null) {
                data.tenant_id = this.tenant_id;
            }
            if (this.owner_role != null) {
                data.owner_role = this.owner_role;
            }
            if (this.owner_id != null) {
                data.owner_id = this.owner_id;
            }
            if (this.owner_session != null) {
                data.owner_session = this.owner_session;
            }
            if (this.owner_session_time != null) {
                data.owner_session_time = this.owner_session_time;
            }
            if (this.owner_device != null) {
                data.owner_device = this.owner_device;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.tenant_id != 0)
                writer.writeInt32(1, this.tenant_id);
            if (this.owner_role != AuthRole.ROLE_NONE)
                writer.writeEnum(2, this.owner_role);
            if (this.owner_id != 0)
                writer.writeInt32(3, this.owner_id);
            if (this.owner_session != 0)
                writer.writeInt32(4, this.owner_session);
            if (this.owner_session_time != 0)
                writer.writeInt64(5, this.owner_session_time);
            if (this.owner_device != 0)
                writer.writeInt64(6, this.owner_device);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AuthToken {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AuthToken();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.tenant_id = reader.readInt32();
                        break;
                    case 2:
                        message.owner_role = reader.readEnum();
                        break;
                    case 3:
                        message.owner_id = reader.readInt32();
                        break;
                    case 4:
                        message.owner_session = reader.readInt32();
                        break;
                    case 5:
                        message.owner_session_time = reader.readInt64();
                        break;
                    case 6:
                        message.owner_device = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AuthToken {
            return AuthToken.deserialize(bytes);
        }
    }
    export class AuthRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            path?: string;
            ip?: string;
            token?: string;
            auth?: number;
            readonly?: boolean;
            qos?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("path" in data && data.path != undefined) {
                    this.path = data.path;
                }
                if ("ip" in data && data.ip != undefined) {
                    this.ip = data.ip;
                }
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
                if ("auth" in data && data.auth != undefined) {
                    this.auth = data.auth;
                }
                if ("readonly" in data && data.readonly != undefined) {
                    this.readonly = data.readonly;
                }
                if ("qos" in data && data.qos != undefined) {
                    this.qos = data.qos;
                }
            }
        }
        get path() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set path(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get ip() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set ip(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get auth() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set auth(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get readonly() {
            return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
        }
        set readonly(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        get qos() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set qos(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            path?: string;
            ip?: string;
            token?: string;
            auth?: number;
            readonly?: boolean;
            qos?: number;
        }): AuthRequest {
            const message = new AuthRequest({});
            if (data.path != null) {
                message.path = data.path;
            }
            if (data.ip != null) {
                message.ip = data.ip;
            }
            if (data.token != null) {
                message.token = data.token;
            }
            if (data.auth != null) {
                message.auth = data.auth;
            }
            if (data.readonly != null) {
                message.readonly = data.readonly;
            }
            if (data.qos != null) {
                message.qos = data.qos;
            }
            return message;
        }
        toObject() {
            const data: {
                path?: string;
                ip?: string;
                token?: string;
                auth?: number;
                readonly?: boolean;
                qos?: number;
            } = {};
            if (this.path != null) {
                data.path = this.path;
            }
            if (this.ip != null) {
                data.ip = this.ip;
            }
            if (this.token != null) {
                data.token = this.token;
            }
            if (this.auth != null) {
                data.auth = this.auth;
            }
            if (this.readonly != null) {
                data.readonly = this.readonly;
            }
            if (this.qos != null) {
                data.qos = this.qos;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.path.length)
                writer.writeString(1, this.path);
            if (this.ip.length)
                writer.writeString(2, this.ip);
            if (this.token.length)
                writer.writeString(3, this.token);
            if (this.auth != 0)
                writer.writeUint32(4, this.auth);
            if (this.readonly != false)
                writer.writeBool(5, this.readonly);
            if (this.qos != 0)
                writer.writeUint32(6, this.qos);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AuthRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AuthRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.path = reader.readString();
                        break;
                    case 2:
                        message.ip = reader.readString();
                        break;
                    case 3:
                        message.token = reader.readString();
                        break;
                    case 4:
                        message.auth = reader.readUint32();
                        break;
                    case 5:
                        message.readonly = reader.readBool();
                        break;
                    case 6:
                        message.qos = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AuthRequest {
            return AuthRequest.deserialize(bytes);
        }
    }
    export class AuthResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_type?: dependency_2.api.common.DeviceType;
            user_id?: number;
            session_id?: number;
            device_id?: number;
            external_id?: number;
            unique_id?: number;
            unique_key?: Uint8Array;
            is_command?: boolean;
            err_code?: number;
            err_msg?: string;
            jwt_token?: string;
            cloudflare_ip?: string;
            real_ip?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_type" in data && data.device_type != undefined) {
                    this.device_type = data.device_type;
                }
                if ("user_id" in data && data.user_id != undefined) {
                    this.user_id = data.user_id;
                }
                if ("session_id" in data && data.session_id != undefined) {
                    this.session_id = data.session_id;
                }
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("external_id" in data && data.external_id != undefined) {
                    this.external_id = data.external_id;
                }
                if ("unique_id" in data && data.unique_id != undefined) {
                    this.unique_id = data.unique_id;
                }
                if ("unique_key" in data && data.unique_key != undefined) {
                    this.unique_key = data.unique_key;
                }
                if ("is_command" in data && data.is_command != undefined) {
                    this.is_command = data.is_command;
                }
                if ("err_code" in data && data.err_code != undefined) {
                    this.err_code = data.err_code;
                }
                if ("err_msg" in data && data.err_msg != undefined) {
                    this.err_msg = data.err_msg;
                }
                if ("jwt_token" in data && data.jwt_token != undefined) {
                    this.jwt_token = data.jwt_token;
                }
                if ("cloudflare_ip" in data && data.cloudflare_ip != undefined) {
                    this.cloudflare_ip = data.cloudflare_ip;
                }
                if ("real_ip" in data && data.real_ip != undefined) {
                    this.real_ip = data.real_ip;
                }
            }
        }
        get device_type() {
            return pb_1.Message.getFieldWithDefault(this, 1, dependency_2.api.common.DeviceType.System) as dependency_2.api.common.DeviceType;
        }
        set device_type(value: dependency_2.api.common.DeviceType) {
            pb_1.Message.setField(this, 1, value);
        }
        get user_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set user_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get session_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set session_id(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set device_id(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get external_id() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set external_id(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get unique_id() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set unique_id(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get unique_key() {
            return pb_1.Message.getFieldWithDefault(this, 7, new Uint8Array(0)) as Uint8Array;
        }
        set unique_key(value: Uint8Array) {
            pb_1.Message.setField(this, 7, value);
        }
        get is_command() {
            return pb_1.Message.getFieldWithDefault(this, 8, false) as boolean;
        }
        set is_command(value: boolean) {
            pb_1.Message.setField(this, 8, value);
        }
        get err_code() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set err_code(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get err_msg() {
            return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
        }
        set err_msg(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        get jwt_token() {
            return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
        }
        set jwt_token(value: string) {
            pb_1.Message.setField(this, 11, value);
        }
        get cloudflare_ip() {
            return pb_1.Message.getFieldWithDefault(this, 12, "") as string;
        }
        set cloudflare_ip(value: string) {
            pb_1.Message.setField(this, 12, value);
        }
        get real_ip() {
            return pb_1.Message.getFieldWithDefault(this, 13, "") as string;
        }
        set real_ip(value: string) {
            pb_1.Message.setField(this, 13, value);
        }
        static fromObject(data: {
            device_type?: dependency_2.api.common.DeviceType;
            user_id?: number;
            session_id?: number;
            device_id?: number;
            external_id?: number;
            unique_id?: number;
            unique_key?: Uint8Array;
            is_command?: boolean;
            err_code?: number;
            err_msg?: string;
            jwt_token?: string;
            cloudflare_ip?: string;
            real_ip?: string;
        }): AuthResponse {
            const message = new AuthResponse({});
            if (data.device_type != null) {
                message.device_type = data.device_type;
            }
            if (data.user_id != null) {
                message.user_id = data.user_id;
            }
            if (data.session_id != null) {
                message.session_id = data.session_id;
            }
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.external_id != null) {
                message.external_id = data.external_id;
            }
            if (data.unique_id != null) {
                message.unique_id = data.unique_id;
            }
            if (data.unique_key != null) {
                message.unique_key = data.unique_key;
            }
            if (data.is_command != null) {
                message.is_command = data.is_command;
            }
            if (data.err_code != null) {
                message.err_code = data.err_code;
            }
            if (data.err_msg != null) {
                message.err_msg = data.err_msg;
            }
            if (data.jwt_token != null) {
                message.jwt_token = data.jwt_token;
            }
            if (data.cloudflare_ip != null) {
                message.cloudflare_ip = data.cloudflare_ip;
            }
            if (data.real_ip != null) {
                message.real_ip = data.real_ip;
            }
            return message;
        }
        toObject() {
            const data: {
                device_type?: dependency_2.api.common.DeviceType;
                user_id?: number;
                session_id?: number;
                device_id?: number;
                external_id?: number;
                unique_id?: number;
                unique_key?: Uint8Array;
                is_command?: boolean;
                err_code?: number;
                err_msg?: string;
                jwt_token?: string;
                cloudflare_ip?: string;
                real_ip?: string;
            } = {};
            if (this.device_type != null) {
                data.device_type = this.device_type;
            }
            if (this.user_id != null) {
                data.user_id = this.user_id;
            }
            if (this.session_id != null) {
                data.session_id = this.session_id;
            }
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.external_id != null) {
                data.external_id = this.external_id;
            }
            if (this.unique_id != null) {
                data.unique_id = this.unique_id;
            }
            if (this.unique_key != null) {
                data.unique_key = this.unique_key;
            }
            if (this.is_command != null) {
                data.is_command = this.is_command;
            }
            if (this.err_code != null) {
                data.err_code = this.err_code;
            }
            if (this.err_msg != null) {
                data.err_msg = this.err_msg;
            }
            if (this.jwt_token != null) {
                data.jwt_token = this.jwt_token;
            }
            if (this.cloudflare_ip != null) {
                data.cloudflare_ip = this.cloudflare_ip;
            }
            if (this.real_ip != null) {
                data.real_ip = this.real_ip;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.device_type != dependency_2.api.common.DeviceType.System)
                writer.writeEnum(1, this.device_type);
            if (this.user_id != 0)
                writer.writeInt32(2, this.user_id);
            if (this.session_id != 0)
                writer.writeInt32(3, this.session_id);
            if (this.device_id != 0)
                writer.writeInt32(4, this.device_id);
            if (this.external_id != 0)
                writer.writeInt32(5, this.external_id);
            if (this.unique_id != 0)
                writer.writeInt64(6, this.unique_id);
            if (this.unique_key.length)
                writer.writeBytes(7, this.unique_key);
            if (this.is_command != false)
                writer.writeBool(8, this.is_command);
            if (this.err_code != 0)
                writer.writeInt32(9, this.err_code);
            if (this.err_msg.length)
                writer.writeString(10, this.err_msg);
            if (this.jwt_token.length)
                writer.writeString(11, this.jwt_token);
            if (this.cloudflare_ip.length)
                writer.writeString(12, this.cloudflare_ip);
            if (this.real_ip.length)
                writer.writeString(13, this.real_ip);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AuthResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AuthResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_type = reader.readEnum();
                        break;
                    case 2:
                        message.user_id = reader.readInt32();
                        break;
                    case 3:
                        message.session_id = reader.readInt32();
                        break;
                    case 4:
                        message.device_id = reader.readInt32();
                        break;
                    case 5:
                        message.external_id = reader.readInt32();
                        break;
                    case 6:
                        message.unique_id = reader.readInt64();
                        break;
                    case 7:
                        message.unique_key = reader.readBytes();
                        break;
                    case 8:
                        message.is_command = reader.readBool();
                        break;
                    case 9:
                        message.err_code = reader.readInt32();
                        break;
                    case 10:
                        message.err_msg = reader.readString();
                        break;
                    case 11:
                        message.jwt_token = reader.readString();
                        break;
                    case 12:
                        message.cloudflare_ip = reader.readString();
                        break;
                    case 13:
                        message.real_ip = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AuthResponse {
            return AuthResponse.deserialize(bytes);
        }
    }
}
