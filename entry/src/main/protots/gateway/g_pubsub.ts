/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.26.1
 * source: gateway/g_pubsub.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../api/common/c_message";
import * as pb_1 from "google-protobuf";
export namespace gateway {
    export class PubSubMessage extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            target?: number;
            id?: number;
            msg?: dependency_1.api.common.Message;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("target" in data && data.target != undefined) {
                    this.target = data.target;
                }
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("msg" in data && data.msg != undefined) {
                    this.msg = data.msg;
                }
            }
        }
        get target() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set target(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get msg() {
            return pb_1.Message.getWrapperField(this, dependency_1.api.common.Message, 3) as dependency_1.api.common.Message;
        }
        set msg(value: dependency_1.api.common.Message) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_msg() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            target?: number;
            id?: number;
            msg?: ReturnType<typeof dependency_1.api.common.Message.prototype.toObject>;
        }): PubSubMessage {
            const message = new PubSubMessage({});
            if (data.target != null) {
                message.target = data.target;
            }
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.msg != null) {
                message.msg = dependency_1.api.common.Message.fromObject(data.msg);
            }
            return message;
        }
        toObject() {
            const data: {
                target?: number;
                id?: number;
                msg?: ReturnType<typeof dependency_1.api.common.Message.prototype.toObject>;
            } = {};
            if (this.target != null) {
                data.target = this.target;
            }
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.msg != null) {
                data.msg = this.msg.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.target != 0)
                writer.writeInt64(1, this.target);
            if (this.id != 0)
                writer.writeUint64(2, this.id);
            if (this.has_msg)
                writer.writeMessage(3, this.msg, () => this.msg.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PubSubMessage {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PubSubMessage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.target = reader.readInt64();
                        break;
                    case 2:
                        message.id = reader.readUint64();
                        break;
                    case 3:
                        reader.readMessage(message.msg, () => message.msg = dependency_1.api.common.Message.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PubSubMessage {
            return PubSubMessage.deserialize(bytes);
        }
    }
}
