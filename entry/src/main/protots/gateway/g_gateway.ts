/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.26.1
 * source: gateway/g_gateway.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../google/protobuf/timestamp";
import * as dependency_2 from "./../api/common/c_message";
import * as dependency_3 from "./../api/common/c_worker";
import * as dependency_4 from "@api/common/c_chat";
import * as pb_1 from "google-protobuf";
export namespace gateway {
    export enum WorkerChangedReason {
        WorkerChangedReasonUnknown = 0,
        WorkerChangedReasonMissAssignedWorker = 1,
        WorkerChangedReasonTransferWorker = 2,
        WorkerChangedReasonWorkerDeleted = 3
    }
    export enum KickReason {
        KickReasonCommon = 0,
        KickReasonPermChanged = 1
    }
    export class SCHi extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            token?: string;
            worker_id?: number;
            chat_expire_time?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
                if ("worker_id" in data && data.worker_id != undefined) {
                    this.worker_id = data.worker_id;
                }
                if ("chat_expire_time" in data && data.chat_expire_time != undefined) {
                    this.chat_expire_time = data.chat_expire_time;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get worker_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set worker_id(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get chat_expire_time() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set chat_expire_time(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            id?: number;
            token?: string;
            worker_id?: number;
            chat_expire_time?: number;
        }): SCHi {
            const message = new SCHi({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.token != null) {
                message.token = data.token;
            }
            if (data.worker_id != null) {
                message.worker_id = data.worker_id;
            }
            if (data.chat_expire_time != null) {
                message.chat_expire_time = data.chat_expire_time;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                token?: string;
                worker_id?: number;
                chat_expire_time?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.token != null) {
                data.token = this.token;
            }
            if (this.worker_id != null) {
                data.worker_id = this.worker_id;
            }
            if (this.chat_expire_time != null) {
                data.chat_expire_time = this.chat_expire_time;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt64(1, this.id);
            if (this.token.length)
                writer.writeString(2, this.token);
            if (this.worker_id != 0)
                writer.writeInt32(3, this.worker_id);
            if (this.chat_expire_time != 0)
                writer.writeInt64(4, this.chat_expire_time);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SCHi {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SCHi();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt64();
                        break;
                    case 2:
                        message.token = reader.readString();
                        break;
                    case 3:
                        message.worker_id = reader.readInt32();
                        break;
                    case 4:
                        message.chat_expire_time = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SCHi {
            return SCHi.deserialize(bytes);
        }
    }
    export class CSForward extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            appId?: string;
            url?: string;
            verb?: string;
            data?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("appId" in data && data.appId != undefined) {
                    this.appId = data.appId;
                }
                if ("url" in data && data.url != undefined) {
                    this.url = data.url;
                }
                if ("verb" in data && data.verb != undefined) {
                    this.verb = data.verb;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get appId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set appId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get url() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set url(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get verb() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set verb(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get data() {
            return pb_1.Message.getFieldWithDefault(this, 4, new Uint8Array(0)) as Uint8Array;
        }
        set data(value: Uint8Array) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            appId?: string;
            url?: string;
            verb?: string;
            data?: Uint8Array;
        }): CSForward {
            const message = new CSForward({});
            if (data.appId != null) {
                message.appId = data.appId;
            }
            if (data.url != null) {
                message.url = data.url;
            }
            if (data.verb != null) {
                message.verb = data.verb;
            }
            if (data.data != null) {
                message.data = data.data;
            }
            return message;
        }
        toObject() {
            const data: {
                appId?: string;
                url?: string;
                verb?: string;
                data?: Uint8Array;
            } = {};
            if (this.appId != null) {
                data.appId = this.appId;
            }
            if (this.url != null) {
                data.url = this.url;
            }
            if (this.verb != null) {
                data.verb = this.verb;
            }
            if (this.data != null) {
                data.data = this.data;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.appId.length)
                writer.writeString(1, this.appId);
            if (this.url.length)
                writer.writeString(2, this.url);
            if (this.verb.length)
                writer.writeString(3, this.verb);
            if (this.data.length)
                writer.writeBytes(4, this.data);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CSForward {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CSForward();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.appId = reader.readString();
                        break;
                    case 2:
                        message.url = reader.readString();
                        break;
                    case 3:
                        message.verb = reader.readString();
                        break;
                    case 4:
                        message.data = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CSForward {
            return CSForward.deserialize(bytes);
        }
    }
    export class SCForward extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            err?: string;
            data?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("err" in data && data.err != undefined) {
                    this.err = data.err;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get err() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set err(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get data() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set data(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            err?: string;
            data?: Uint8Array;
        }): SCForward {
            const message = new SCForward({});
            if (data.err != null) {
                message.err = data.err;
            }
            if (data.data != null) {
                message.data = data.data;
            }
            return message;
        }
        toObject() {
            const data: {
                err?: string;
                data?: Uint8Array;
            } = {};
            if (this.err != null) {
                data.err = this.err;
            }
            if (this.data != null) {
                data.data = this.data;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.err.length)
                writer.writeString(2, this.err);
            if (this.data.length)
                writer.writeBytes(3, this.data);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SCForward {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SCForward();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 2:
                        message.err = reader.readString();
                        break;
                    case 3:
                        message.data = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SCForward {
            return SCForward.deserialize(bytes);
        }
    }
    export class CSSendMessage extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            msg?: dependency_2.api.common.Message;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("msg" in data && data.msg != undefined) {
                    this.msg = data.msg;
                }
            }
        }
        get msg() {
            return pb_1.Message.getWrapperField(this, dependency_2.api.common.Message, 1) as dependency_2.api.common.Message;
        }
        set msg(value: dependency_2.api.common.Message) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_msg() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            msg?: ReturnType<typeof dependency_2.api.common.Message.prototype.toObject>;
        }): CSSendMessage {
            const message = new CSSendMessage({});
            if (data.msg != null) {
                message.msg = dependency_2.api.common.Message.fromObject(data.msg);
            }
            return message;
        }
        toObject() {
            const data: {
                msg?: ReturnType<typeof dependency_2.api.common.Message.prototype.toObject>;
            } = {};
            if (this.msg != null) {
                data.msg = this.msg.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_msg)
                writer.writeMessage(1, this.msg, () => this.msg.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CSSendMessage {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CSSendMessage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.msg, () => message.msg = dependency_2.api.common.Message.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CSSendMessage {
            return CSSendMessage.deserialize(bytes);
        }
    }
    export class SCSendMessage extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            chat_id?: number;
            msg_id?: number;
            msg_time?: dependency_1.google.protobuf.Timestamp;
            err_msg?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("chat_id" in data && data.chat_id != undefined) {
                    this.chat_id = data.chat_id;
                }
                if ("msg_id" in data && data.msg_id != undefined) {
                    this.msg_id = data.msg_id;
                }
                if ("msg_time" in data && data.msg_time != undefined) {
                    this.msg_time = data.msg_time;
                }
                if ("err_msg" in data && data.err_msg != undefined) {
                    this.err_msg = data.err_msg;
                }
            }
        }
        get chat_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set chat_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get msg_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set msg_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get msg_time() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 3) as dependency_1.google.protobuf.Timestamp;
        }
        set msg_time(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_msg_time() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get err_msg() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set err_msg(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            chat_id?: number;
            msg_id?: number;
            msg_time?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            err_msg?: string;
        }): SCSendMessage {
            const message = new SCSendMessage({});
            if (data.chat_id != null) {
                message.chat_id = data.chat_id;
            }
            if (data.msg_id != null) {
                message.msg_id = data.msg_id;
            }
            if (data.msg_time != null) {
                message.msg_time = dependency_1.google.protobuf.Timestamp.fromObject(data.msg_time);
            }
            if (data.err_msg != null) {
                message.err_msg = data.err_msg;
            }
            return message;
        }
        toObject() {
            const data: {
                chat_id?: number;
                msg_id?: number;
                msg_time?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                err_msg?: string;
            } = {};
            if (this.chat_id != null) {
                data.chat_id = this.chat_id;
            }
            if (this.msg_id != null) {
                data.msg_id = this.msg_id;
            }
            if (this.msg_time != null) {
                data.msg_time = this.msg_time.toObject();
            }
            if (this.err_msg != null) {
                data.err_msg = this.err_msg;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.chat_id != 0)
                writer.writeInt64(1, this.chat_id);
            if (this.msg_id != 0)
                writer.writeInt64(2, this.msg_id);
            if (this.has_msg_time)
                writer.writeMessage(3, this.msg_time, () => this.msg_time.serialize(writer));
            if (this.err_msg.length)
                writer.writeString(4, this.err_msg);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SCSendMessage {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SCSendMessage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.chat_id = reader.readInt64();
                        break;
                    case 2:
                        message.msg_id = reader.readInt64();
                        break;
                    case 3:
                        reader.readMessage(message.msg_time, () => message.msg_time = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 4:
                        message.err_msg = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SCSendMessage {
            return SCSendMessage.deserialize(bytes);
        }
    }
    export class SCRecvMessage extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            msg?: dependency_2.api.common.Message;
            target?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("msg" in data && data.msg != undefined) {
                    this.msg = data.msg;
                }
                if ("target" in data && data.target != undefined) {
                    this.target = data.target;
                }
            }
        }
        get msg() {
            return pb_1.Message.getWrapperField(this, dependency_2.api.common.Message, 1) as dependency_2.api.common.Message;
        }
        set msg(value: dependency_2.api.common.Message) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_msg() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get target() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set target(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            msg?: ReturnType<typeof dependency_2.api.common.Message.prototype.toObject>;
            target?: number;
        }): SCRecvMessage {
            const message = new SCRecvMessage({});
            if (data.msg != null) {
                message.msg = dependency_2.api.common.Message.fromObject(data.msg);
            }
            if (data.target != null) {
                message.target = data.target;
            }
            return message;
        }
        toObject() {
            const data: {
                msg?: ReturnType<typeof dependency_2.api.common.Message.prototype.toObject>;
                target?: number;
            } = {};
            if (this.msg != null) {
                data.msg = this.msg.toObject();
            }
            if (this.target != null) {
                data.target = this.target;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_msg)
                writer.writeMessage(1, this.msg, () => this.msg.serialize(writer));
            if (this.target != 0)
                writer.writeInt64(2, this.target);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SCRecvMessage {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SCRecvMessage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.msg, () => message.msg = dependency_2.api.common.Message.deserialize(reader));
                        break;
                    case 2:
                        message.target = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SCRecvMessage {
            return SCRecvMessage.deserialize(bytes);
        }
    }
    export class CSRecvMessage extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            chat_id?: number;
            msg_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("chat_id" in data && data.chat_id != undefined) {
                    this.chat_id = data.chat_id;
                }
                if ("msg_id" in data && data.msg_id != undefined) {
                    this.msg_id = data.msg_id;
                }
            }
        }
        get chat_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set chat_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get msg_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set msg_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            chat_id?: number;
            msg_id?: number;
        }): CSRecvMessage {
            const message = new CSRecvMessage({});
            if (data.chat_id != null) {
                message.chat_id = data.chat_id;
            }
            if (data.msg_id != null) {
                message.msg_id = data.msg_id;
            }
            return message;
        }
        toObject() {
            const data: {
                chat_id?: number;
                msg_id?: number;
            } = {};
            if (this.chat_id != null) {
                data.chat_id = this.chat_id;
            }
            if (this.msg_id != null) {
                data.msg_id = this.msg_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.chat_id != 0)
                writer.writeInt64(1, this.chat_id);
            if (this.msg_id != 0)
                writer.writeInt64(2, this.msg_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CSRecvMessage {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CSRecvMessage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.chat_id = reader.readInt64();
                        break;
                    case 2:
                        message.msg_id = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CSRecvMessage {
            return CSRecvMessage.deserialize(bytes);
        }
    }
    export class CSReadMessage extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            chat_id?: number;
            msg_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("chat_id" in data && data.chat_id != undefined) {
                    this.chat_id = data.chat_id;
                }
                if ("msg_id" in data && data.msg_id != undefined) {
                    this.msg_id = data.msg_id;
                }
            }
        }
        get chat_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set chat_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get msg_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set msg_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            chat_id?: number;
            msg_id?: number;
        }): CSReadMessage {
            const message = new CSReadMessage({});
            if (data.chat_id != null) {
                message.chat_id = data.chat_id;
            }
            if (data.msg_id != null) {
                message.msg_id = data.msg_id;
            }
            return message;
        }
        toObject() {
            const data: {
                chat_id?: number;
                msg_id?: number;
            } = {};
            if (this.chat_id != null) {
                data.chat_id = this.chat_id;
            }
            if (this.msg_id != null) {
                data.msg_id = this.msg_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.chat_id != 0)
                writer.writeInt64(1, this.chat_id);
            if (this.msg_id != 0)
                writer.writeInt64(2, this.msg_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CSReadMessage {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CSReadMessage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.chat_id = reader.readInt64();
                        break;
                    case 2:
                        message.msg_id = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CSReadMessage {
            return CSReadMessage.deserialize(bytes);
        }
    }
    export class SCReadMessage extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            chat_id?: number;
            msg_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("chat_id" in data && data.chat_id != undefined) {
                    this.chat_id = data.chat_id;
                }
                if ("msg_id" in data && data.msg_id != undefined) {
                    this.msg_id = data.msg_id;
                }
            }
        }
        get chat_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set chat_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get msg_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set msg_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            chat_id?: number;
            msg_id?: number;
        }): SCReadMessage {
            const message = new SCReadMessage({});
            if (data.chat_id != null) {
                message.chat_id = data.chat_id;
            }
            if (data.msg_id != null) {
                message.msg_id = data.msg_id;
            }
            return message;
        }
        toObject() {
            const data: {
                chat_id?: number;
                msg_id?: number;
            } = {};
            if (this.chat_id != null) {
                data.chat_id = this.chat_id;
            }
            if (this.msg_id != null) {
                data.msg_id = this.msg_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.chat_id != 0)
                writer.writeInt64(1, this.chat_id);
            if (this.msg_id != 0)
                writer.writeInt64(2, this.msg_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SCReadMessage {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SCReadMessage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.chat_id = reader.readInt64();
                        break;
                    case 2:
                        message.msg_id = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SCReadMessage {
            return SCReadMessage.deserialize(bytes);
        }
    }
    export class InputtingBegin extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            self?: number;
            target?: number;
            msg_fmt?: dependency_2.api.common.MessageFormat;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("self" in data && data.self != undefined) {
                    this.self = data.self;
                }
                if ("target" in data && data.target != undefined) {
                    this.target = data.target;
                }
                if ("msg_fmt" in data && data.msg_fmt != undefined) {
                    this.msg_fmt = data.msg_fmt;
                }
            }
        }
        get self() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set self(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get target() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set target(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get msg_fmt() {
            return pb_1.Message.getFieldWithDefault(this, 3, dependency_2.api.common.MessageFormat.MSG_TEXT) as dependency_2.api.common.MessageFormat;
        }
        set msg_fmt(value: dependency_2.api.common.MessageFormat) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            self?: number;
            target?: number;
            msg_fmt?: dependency_2.api.common.MessageFormat;
        }): InputtingBegin {
            const message = new InputtingBegin({});
            if (data.self != null) {
                message.self = data.self;
            }
            if (data.target != null) {
                message.target = data.target;
            }
            if (data.msg_fmt != null) {
                message.msg_fmt = data.msg_fmt;
            }
            return message;
        }
        toObject() {
            const data: {
                self?: number;
                target?: number;
                msg_fmt?: dependency_2.api.common.MessageFormat;
            } = {};
            if (this.self != null) {
                data.self = this.self;
            }
            if (this.target != null) {
                data.target = this.target;
            }
            if (this.msg_fmt != null) {
                data.msg_fmt = this.msg_fmt;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.self != 0)
                writer.writeInt64(1, this.self);
            if (this.target != 0)
                writer.writeInt64(2, this.target);
            if (this.msg_fmt != dependency_2.api.common.MessageFormat.MSG_TEXT)
                writer.writeEnum(3, this.msg_fmt);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InputtingBegin {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InputtingBegin();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.self = reader.readInt64();
                        break;
                    case 2:
                        message.target = reader.readInt64();
                        break;
                    case 3:
                        message.msg_fmt = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): InputtingBegin {
            return InputtingBegin.deserialize(bytes);
        }
    }
    export class InputtingEnd extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            self?: number;
            target?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("self" in data && data.self != undefined) {
                    this.self = data.self;
                }
                if ("target" in data && data.target != undefined) {
                    this.target = data.target;
                }
            }
        }
        get self() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set self(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get target() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set target(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            self?: number;
            target?: number;
        }): InputtingEnd {
            const message = new InputtingEnd({});
            if (data.self != null) {
                message.self = data.self;
            }
            if (data.target != null) {
                message.target = data.target;
            }
            return message;
        }
        toObject() {
            const data: {
                self?: number;
                target?: number;
            } = {};
            if (this.self != null) {
                data.self = this.self;
            }
            if (this.target != null) {
                data.target = this.target;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.self != 0)
                writer.writeInt64(1, this.self);
            if (this.target != 0)
                writer.writeInt64(2, this.target);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InputtingEnd {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InputtingEnd();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.self = reader.readInt64();
                        break;
                    case 2:
                        message.target = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): InputtingEnd {
            return InputtingEnd.deserialize(bytes);
        }
    }
    export class WorkerTransfer extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            msg?: dependency_2.api.common.Message;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("msg" in data && data.msg != undefined) {
                    this.msg = data.msg;
                }
            }
        }
        get msg() {
            return pb_1.Message.getWrapperField(this, dependency_2.api.common.Message, 1) as dependency_2.api.common.Message;
        }
        set msg(value: dependency_2.api.common.Message) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_msg() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            msg?: ReturnType<typeof dependency_2.api.common.Message.prototype.toObject>;
        }): WorkerTransfer {
            const message = new WorkerTransfer({});
            if (data.msg != null) {
                message.msg = dependency_2.api.common.Message.fromObject(data.msg);
            }
            return message;
        }
        toObject() {
            const data: {
                msg?: ReturnType<typeof dependency_2.api.common.Message.prototype.toObject>;
            } = {};
            if (this.msg != null) {
                data.msg = this.msg.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_msg)
                writer.writeMessage(1, this.msg, () => this.msg.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WorkerTransfer {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WorkerTransfer();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.msg, () => message.msg = dependency_2.api.common.Message.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WorkerTransfer {
            return WorkerTransfer.deserialize(bytes);
        }
    }
    export class SCChatChanged extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            from?: dependency_2.api.common.ChatState;
            to?: dependency_2.api.common.ChatState;
            chat_id?: number;
            chat?: dependency_4.api.common.ChatItem;
            target?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("from" in data && data.from != undefined) {
                    this.from = data.from;
                }
                if ("to" in data && data.to != undefined) {
                    this.to = data.to;
                }
                if ("chat_id" in data && data.chat_id != undefined) {
                    this.chat_id = data.chat_id;
                }
                if ("chat" in data && data.chat != undefined) {
                    this.chat = data.chat;
                }
                if ("target" in data && data.target != undefined) {
                    this.target = data.target;
                }
            }
        }
        get from() {
            return pb_1.Message.getFieldWithDefault(this, 1, dependency_2.api.common.ChatState.CHAT_STATE_COMMON) as dependency_2.api.common.ChatState;
        }
        set from(value: dependency_2.api.common.ChatState) {
            pb_1.Message.setField(this, 1, value);
        }
        get to() {
            return pb_1.Message.getFieldWithDefault(this, 2, dependency_2.api.common.ChatState.CHAT_STATE_COMMON) as dependency_2.api.common.ChatState;
        }
        set to(value: dependency_2.api.common.ChatState) {
            pb_1.Message.setField(this, 2, value);
        }
        get chat_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set chat_id(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get chat() {
            return pb_1.Message.getWrapperField(this, dependency_4.api.common.ChatItem, 4) as dependency_4.api.common.ChatItem;
        }
        set chat(value: dependency_4.api.common.ChatItem) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_chat() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get target() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set target(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            from?: dependency_2.api.common.ChatState;
            to?: dependency_2.api.common.ChatState;
            chat_id?: number;
            chat?: ReturnType<typeof dependency_4.api.common.ChatItem.prototype.toObject>;
            target?: number;
        }): SCChatChanged {
            const message = new SCChatChanged({});
            if (data.from != null) {
                message.from = data.from;
            }
            if (data.to != null) {
                message.to = data.to;
            }
            if (data.chat_id != null) {
                message.chat_id = data.chat_id;
            }
            if (data.chat != null) {
                message.chat = dependency_4.api.common.ChatItem.fromObject(data.chat);
            }
            if (data.target != null) {
                message.target = data.target;
            }
            return message;
        }
        toObject() {
            const data: {
                from?: dependency_2.api.common.ChatState;
                to?: dependency_2.api.common.ChatState;
                chat_id?: number;
                chat?: ReturnType<typeof dependency_4.api.common.ChatItem.prototype.toObject>;
                target?: number;
            } = {};
            if (this.from != null) {
                data.from = this.from;
            }
            if (this.to != null) {
                data.to = this.to;
            }
            if (this.chat_id != null) {
                data.chat_id = this.chat_id;
            }
            if (this.chat != null) {
                data.chat = this.chat.toObject();
            }
            if (this.target != null) {
                data.target = this.target;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.from != dependency_2.api.common.ChatState.CHAT_STATE_COMMON)
                writer.writeEnum(1, this.from);
            if (this.to != dependency_2.api.common.ChatState.CHAT_STATE_COMMON)
                writer.writeEnum(2, this.to);
            if (this.chat_id != 0)
                writer.writeInt64(3, this.chat_id);
            if (this.has_chat)
                writer.writeMessage(4, this.chat, () => this.chat.serialize(writer));
            if (this.target != 0)
                writer.writeInt64(5, this.target);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SCChatChanged {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SCChatChanged();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.from = reader.readEnum();
                        break;
                    case 2:
                        message.to = reader.readEnum();
                        break;
                    case 3:
                        message.chat_id = reader.readInt64();
                        break;
                    case 4:
                        reader.readMessage(message.chat, () => message.chat = dependency_4.api.common.ChatItem.deserialize(reader));
                        break;
                    case 5:
                        message.target = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SCChatChanged {
            return SCChatChanged.deserialize(bytes);
        }
    }
    export class SCUserConnectionChanged extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            client_id?: number;
            conn?: dependency_3.api.common.ConnectState;
            target?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("client_id" in data && data.client_id != undefined) {
                    this.client_id = data.client_id;
                }
                if ("conn" in data && data.conn != undefined) {
                    this.conn = data.conn;
                }
                if ("target" in data && data.target != undefined) {
                    this.target = data.target;
                }
            }
        }
        get client_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set client_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get conn() {
            return pb_1.Message.getFieldWithDefault(this, 2, dependency_3.api.common.ConnectState.CONNECT_STATE_OFFLINE) as dependency_3.api.common.ConnectState;
        }
        set conn(value: dependency_3.api.common.ConnectState) {
            pb_1.Message.setField(this, 2, value);
        }
        get target() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set target(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            client_id?: number;
            conn?: dependency_3.api.common.ConnectState;
            target?: number;
        }): SCUserConnectionChanged {
            const message = new SCUserConnectionChanged({});
            if (data.client_id != null) {
                message.client_id = data.client_id;
            }
            if (data.conn != null) {
                message.conn = data.conn;
            }
            if (data.target != null) {
                message.target = data.target;
            }
            return message;
        }
        toObject() {
            const data: {
                client_id?: number;
                conn?: dependency_3.api.common.ConnectState;
                target?: number;
            } = {};
            if (this.client_id != null) {
                data.client_id = this.client_id;
            }
            if (this.conn != null) {
                data.conn = this.conn;
            }
            if (this.target != null) {
                data.target = this.target;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.client_id != 0)
                writer.writeInt64(1, this.client_id);
            if (this.conn != dependency_3.api.common.ConnectState.CONNECT_STATE_OFFLINE)
                writer.writeEnum(2, this.conn);
            if (this.target != 0)
                writer.writeInt64(3, this.target);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SCUserConnectionChanged {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SCUserConnectionChanged();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.client_id = reader.readInt64();
                        break;
                    case 2:
                        message.conn = reader.readEnum();
                        break;
                    case 3:
                        message.target = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SCUserConnectionChanged {
            return SCUserConnectionChanged.deserialize(bytes);
        }
    }
    export class SCWorkerChanged extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            worker_id?: number;
            worker_name?: string;
            worker_avatar?: string;
            target?: number;
            reason?: WorkerChangedReason;
            consult_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("worker_id" in data && data.worker_id != undefined) {
                    this.worker_id = data.worker_id;
                }
                if ("worker_name" in data && data.worker_name != undefined) {
                    this.worker_name = data.worker_name;
                }
                if ("worker_avatar" in data && data.worker_avatar != undefined) {
                    this.worker_avatar = data.worker_avatar;
                }
                if ("target" in data && data.target != undefined) {
                    this.target = data.target;
                }
                if ("reason" in data && data.reason != undefined) {
                    this.reason = data.reason;
                }
                if ("consult_id" in data && data.consult_id != undefined) {
                    this.consult_id = data.consult_id;
                }
            }
        }
        get worker_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set worker_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get worker_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set worker_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get worker_avatar() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set worker_avatar(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get target() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set target(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get reason() {
            return pb_1.Message.getFieldWithDefault(this, 5, WorkerChangedReason.WorkerChangedReasonUnknown) as WorkerChangedReason;
        }
        set reason(value: WorkerChangedReason) {
            pb_1.Message.setField(this, 5, value);
        }
        get consult_id() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set consult_id(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            worker_id?: number;
            worker_name?: string;
            worker_avatar?: string;
            target?: number;
            reason?: WorkerChangedReason;
            consult_id?: number;
        }): SCWorkerChanged {
            const message = new SCWorkerChanged({});
            if (data.worker_id != null) {
                message.worker_id = data.worker_id;
            }
            if (data.worker_name != null) {
                message.worker_name = data.worker_name;
            }
            if (data.worker_avatar != null) {
                message.worker_avatar = data.worker_avatar;
            }
            if (data.target != null) {
                message.target = data.target;
            }
            if (data.reason != null) {
                message.reason = data.reason;
            }
            if (data.consult_id != null) {
                message.consult_id = data.consult_id;
            }
            return message;
        }
        toObject() {
            const data: {
                worker_id?: number;
                worker_name?: string;
                worker_avatar?: string;
                target?: number;
                reason?: WorkerChangedReason;
                consult_id?: number;
            } = {};
            if (this.worker_id != null) {
                data.worker_id = this.worker_id;
            }
            if (this.worker_name != null) {
                data.worker_name = this.worker_name;
            }
            if (this.worker_avatar != null) {
                data.worker_avatar = this.worker_avatar;
            }
            if (this.target != null) {
                data.target = this.target;
            }
            if (this.reason != null) {
                data.reason = this.reason;
            }
            if (this.consult_id != null) {
                data.consult_id = this.consult_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.worker_id != 0)
                writer.writeInt32(1, this.worker_id);
            if (this.worker_name.length)
                writer.writeString(2, this.worker_name);
            if (this.worker_avatar.length)
                writer.writeString(3, this.worker_avatar);
            if (this.target != 0)
                writer.writeInt64(4, this.target);
            if (this.reason != WorkerChangedReason.WorkerChangedReasonUnknown)
                writer.writeEnum(5, this.reason);
            if (this.consult_id != 0)
                writer.writeInt64(6, this.consult_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SCWorkerChanged {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SCWorkerChanged();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.worker_id = reader.readInt32();
                        break;
                    case 2:
                        message.worker_name = reader.readString();
                        break;
                    case 3:
                        message.worker_avatar = reader.readString();
                        break;
                    case 4:
                        message.target = reader.readInt64();
                        break;
                    case 5:
                        message.reason = reader.readEnum();
                        break;
                    case 6:
                        message.consult_id = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SCWorkerChanged {
            return SCWorkerChanged.deserialize(bytes);
        }
    }
    export class SCKick extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            target?: number;
            reason?: KickReason;
            socket_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("target" in data && data.target != undefined) {
                    this.target = data.target;
                }
                if ("reason" in data && data.reason != undefined) {
                    this.reason = data.reason;
                }
                if ("socket_id" in data && data.socket_id != undefined) {
                    this.socket_id = data.socket_id;
                }
            }
        }
        get target() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set target(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get reason() {
            return pb_1.Message.getFieldWithDefault(this, 2, KickReason.KickReasonCommon) as KickReason;
        }
        set reason(value: KickReason) {
            pb_1.Message.setField(this, 2, value);
        }
        get socket_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set socket_id(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            target?: number;
            reason?: KickReason;
            socket_id?: number;
        }): SCKick {
            const message = new SCKick({});
            if (data.target != null) {
                message.target = data.target;
            }
            if (data.reason != null) {
                message.reason = data.reason;
            }
            if (data.socket_id != null) {
                message.socket_id = data.socket_id;
            }
            return message;
        }
        toObject() {
            const data: {
                target?: number;
                reason?: KickReason;
                socket_id?: number;
            } = {};
            if (this.target != null) {
                data.target = this.target;
            }
            if (this.reason != null) {
                data.reason = this.reason;
            }
            if (this.socket_id != null) {
                data.socket_id = this.socket_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.target != 0)
                writer.writeInt64(1, this.target);
            if (this.reason != KickReason.KickReasonCommon)
                writer.writeEnum(2, this.reason);
            if (this.socket_id != 0)
                writer.writeUint64(3, this.socket_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SCKick {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SCKick();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.target = reader.readInt64();
                        break;
                    case 2:
                        message.reason = reader.readEnum();
                        break;
                    case 3:
                        message.socket_id = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SCKick {
            return SCKick.deserialize(bytes);
        }
    }
    export class SCSimSendMessage extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            msgs?: dependency_2.api.common.Message[];
            worker?: number;
            target?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("msgs" in data && data.msgs != undefined) {
                    this.msgs = data.msgs;
                }
                if ("worker" in data && data.worker != undefined) {
                    this.worker = data.worker;
                }
                if ("target" in data && data.target != undefined) {
                    this.target = data.target;
                }
            }
        }
        get msgs() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.api.common.Message, 1) as dependency_2.api.common.Message[];
        }
        set msgs(value: dependency_2.api.common.Message[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get worker() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set worker(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get target() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set target(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            msgs?: ReturnType<typeof dependency_2.api.common.Message.prototype.toObject>[];
            worker?: number;
            target?: number;
        }): SCSimSendMessage {
            const message = new SCSimSendMessage({});
            if (data.msgs != null) {
                message.msgs = data.msgs.map(item => dependency_2.api.common.Message.fromObject(item));
            }
            if (data.worker != null) {
                message.worker = data.worker;
            }
            if (data.target != null) {
                message.target = data.target;
            }
            return message;
        }
        toObject() {
            const data: {
                msgs?: ReturnType<typeof dependency_2.api.common.Message.prototype.toObject>[];
                worker?: number;
                target?: number;
            } = {};
            if (this.msgs != null) {
                data.msgs = this.msgs.map((item: dependency_2.api.common.Message) => item.toObject());
            }
            if (this.worker != null) {
                data.worker = this.worker;
            }
            if (this.target != null) {
                data.target = this.target;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.msgs.length)
                writer.writeRepeatedMessage(1, this.msgs, (item: dependency_2.api.common.Message) => item.serialize(writer));
            if (this.worker != 0)
                writer.writeInt64(2, this.worker);
            if (this.target != 0)
                writer.writeInt64(3, this.target);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SCSimSendMessage {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SCSimSendMessage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.msgs, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_2.api.common.Message.deserialize(reader), dependency_2.api.common.Message));
                        break;
                    case 2:
                        message.worker = reader.readInt64();
                        break;
                    case 3:
                        message.target = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SCSimSendMessage {
            return SCSimSendMessage.deserialize(bytes);
        }
    }
    export class SCSimSendMessageToWorker extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            msgs?: dependency_2.api.common.Message[];
            target?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("msgs" in data && data.msgs != undefined) {
                    this.msgs = data.msgs;
                }
                if ("target" in data && data.target != undefined) {
                    this.target = data.target;
                }
            }
        }
        get msgs() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.api.common.Message, 1) as dependency_2.api.common.Message[];
        }
        set msgs(value: dependency_2.api.common.Message[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get target() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set target(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            msgs?: ReturnType<typeof dependency_2.api.common.Message.prototype.toObject>[];
            target?: number;
        }): SCSimSendMessageToWorker {
            const message = new SCSimSendMessageToWorker({});
            if (data.msgs != null) {
                message.msgs = data.msgs.map(item => dependency_2.api.common.Message.fromObject(item));
            }
            if (data.target != null) {
                message.target = data.target;
            }
            return message;
        }
        toObject() {
            const data: {
                msgs?: ReturnType<typeof dependency_2.api.common.Message.prototype.toObject>[];
                target?: number;
            } = {};
            if (this.msgs != null) {
                data.msgs = this.msgs.map((item: dependency_2.api.common.Message) => item.toObject());
            }
            if (this.target != null) {
                data.target = this.target;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.msgs.length)
                writer.writeRepeatedMessage(1, this.msgs, (item: dependency_2.api.common.Message) => item.serialize(writer));
            if (this.target != 0)
                writer.writeInt64(2, this.target);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SCSimSendMessageToWorker {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SCSimSendMessageToWorker();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.msgs, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_2.api.common.Message.deserialize(reader), dependency_2.api.common.Message));
                        break;
                    case 2:
                        message.target = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SCSimSendMessageToWorker {
            return SCSimSendMessageToWorker.deserialize(bytes);
        }
    }
    export class SystemMessage extends pb_1.Message {
        #one_of_decls: number[][] = [[2]];
        constructor(data?: any[] | ({
            target?: number;
        } & (({
            StateChange?: WorkerStateChange;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("target" in data && data.target != undefined) {
                    this.target = data.target;
                }
                if ("StateChange" in data && data.StateChange != undefined) {
                    this.StateChange = data.StateChange;
                }
            }
        }
        get target() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set target(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get StateChange() {
            return pb_1.Message.getWrapperField(this, WorkerStateChange, 2) as WorkerStateChange;
        }
        set StateChange(value: WorkerStateChange) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_StateChange() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get content() {
            const cases: {
                [index: number]: "none" | "StateChange";
            } = {
                0: "none",
                2: "StateChange"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        static fromObject(data: {
            target?: number;
            StateChange?: ReturnType<typeof WorkerStateChange.prototype.toObject>;
        }): SystemMessage {
            const message = new SystemMessage({});
            if (data.target != null) {
                message.target = data.target;
            }
            if (data.StateChange != null) {
                message.StateChange = WorkerStateChange.fromObject(data.StateChange);
            }
            return message;
        }
        toObject() {
            const data: {
                target?: number;
                StateChange?: ReturnType<typeof WorkerStateChange.prototype.toObject>;
            } = {};
            if (this.target != null) {
                data.target = this.target;
            }
            if (this.StateChange != null) {
                data.StateChange = this.StateChange.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.target != 0)
                writer.writeInt64(1, this.target);
            if (this.has_StateChange)
                writer.writeMessage(2, this.StateChange, () => this.StateChange.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SystemMessage {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SystemMessage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.target = reader.readInt64();
                        break;
                    case 2:
                        reader.readMessage(message.StateChange, () => message.StateChange = WorkerStateChange.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SystemMessage {
            return SystemMessage.deserialize(bytes);
        }
    }
    export class WorkerStateChange extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            from?: dependency_3.api.common.OnlineState;
            to?: dependency_3.api.common.OnlineState;
            access?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("from" in data && data.from != undefined) {
                    this.from = data.from;
                }
                if ("to" in data && data.to != undefined) {
                    this.to = data.to;
                }
                if ("access" in data && data.access != undefined) {
                    this.access = data.access;
                }
            }
        }
        get from() {
            return pb_1.Message.getFieldWithDefault(this, 1, dependency_3.api.common.OnlineState.ONLINE_STATE_IDLE) as dependency_3.api.common.OnlineState;
        }
        set from(value: dependency_3.api.common.OnlineState) {
            pb_1.Message.setField(this, 1, value);
        }
        get to() {
            return pb_1.Message.getFieldWithDefault(this, 2, dependency_3.api.common.OnlineState.ONLINE_STATE_IDLE) as dependency_3.api.common.OnlineState;
        }
        set to(value: dependency_3.api.common.OnlineState) {
            pb_1.Message.setField(this, 2, value);
        }
        get access() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set access(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            from?: dependency_3.api.common.OnlineState;
            to?: dependency_3.api.common.OnlineState;
            access?: boolean;
        }): WorkerStateChange {
            const message = new WorkerStateChange({});
            if (data.from != null) {
                message.from = data.from;
            }
            if (data.to != null) {
                message.to = data.to;
            }
            if (data.access != null) {
                message.access = data.access;
            }
            return message;
        }
        toObject() {
            const data: {
                from?: dependency_3.api.common.OnlineState;
                to?: dependency_3.api.common.OnlineState;
                access?: boolean;
            } = {};
            if (this.from != null) {
                data.from = this.from;
            }
            if (this.to != null) {
                data.to = this.to;
            }
            if (this.access != null) {
                data.access = this.access;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.from != dependency_3.api.common.OnlineState.ONLINE_STATE_IDLE)
                writer.writeEnum(1, this.from);
            if (this.to != dependency_3.api.common.OnlineState.ONLINE_STATE_IDLE)
                writer.writeEnum(2, this.to);
            if (this.access != false)
                writer.writeBool(3, this.access);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WorkerStateChange {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WorkerStateChange();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.from = reader.readEnum();
                        break;
                    case 2:
                        message.to = reader.readEnum();
                        break;
                    case 3:
                        message.access = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WorkerStateChange {
            return WorkerStateChange.deserialize(bytes);
        }
    }
}
