syntax = "proto3";
package api.core;

option go_package = "wcs/api/core;core";
option java_package = "com.teneasyChat.api.core";
import "api/option.proto";
import "api/common/c_worker.proto";
import "api/common/c_base.proto";
import "google/protobuf/empty.proto";
import "validate/validate.proto";

option(api.info) = {
  authors: ["jeff"],
  date: "2022-12-06",
};

// 查询组
message WorkerGroupQueryByPermRequest {
  // 禁用/启用
  optional common.DisableStatus disable_status = 1;
}

// 查询组
message WorkerGroupQueryResponse {
  repeated common.WorkerGroup items = 1;
}


// 创建分组
message WorkerGroupCreateRequest {
  // 组名称
  string name = 1[(validate.rules).string = {min_len: 1, max_len: 20}];
  // 显示优先级
  int32 priority = 2[(validate.rules).int32 = {gte:0, lt: 1000}];
  repeated common.WorkerGroup children=3;
}

message WorkerGroupCreateResponse {
  int64 id = 1;
  string name = 2;
  int32 priority = 3;
  repeated common.WorkerGroup children=4;
}

// 更新分组内容
message WorkerGroupUpdateRequest {
  // 指定分组id
  int64 id = 1;
  // 全量更新
  string name = 2[(validate.rules).string = {min_len: 1, max_len: 20}];
  int32 priority = 3[(validate.rules).int32 = {gte:0, lt: 1000}];
  repeated common.WorkerGroup children=4;
}

message WorkerGroupUpdateResponse {
  int64 id = 1;
  string name = 2;
  int32 priority = 3;
  repeated common.WorkerGroup children=4;
}

// 删除分组
message WorkerGroupDeleteRequest {
  // 指定分组id
  int64 id = 1[(validate.rules).int64.gt = 0];
}

// 禁用/启用分组
message WorkerGroupDisableRequest {
  // 指定分组id
  int64 id = 1[(validate.rules).int64.gt = 0];
  // 禁用/启用
  common.DisableStatus disable_status = 2[(validate.rules).enum = {}];
}

message GroupQueryModel {
  int64 id   =1;
  string name    =2;
  int32 priority  =3;
  int32 count =4;
  repeated string GroupAdmin =5;
  repeated string GroupLeader =6;
  repeated common.WorkerGroup child=7;
  // 禁用/启用
  common.DisableStatus disable_status = 8;
}

message WorkerGroupQueryRequest {
    optional int64 group_pid=1;
    optional int64 group_cid=2;
    common.Batch batch = 3;
    // 禁用/启用
    optional common.DisableStatus disable_status = 4;
}


message WorkerGroupQueryResp {
    repeated GroupQueryModel items=1;
    common.Batch batch = 2;
    int32 total = 3;
}

message QueryWorksByGroupReq{
  int64 group_pid=1;
}
message QueryWorksByGroupResp{
  repeated common.Worker items=1;
}

service WorkerGroup {
  option (api.service) = {
    path: "/tenant/worker-group",
    tags: ["worker_group"],
    auth: [AUTH_ROLE_TENANT],
  };

  rpc Query(WorkerGroupQueryRequest) returns (WorkerGroupQueryResp) {
    option (api.method) = {
      id: 400,
      path: "query",
      ready:true
    };
  }

  rpc Create(WorkerGroupCreateRequest) returns (WorkerGroupCreateResponse) {
    option (api.method) = {
      id: 401,
      path: "create",
      ready:true
    };
  }

  rpc Update(WorkerGroupUpdateRequest) returns (WorkerGroupUpdateResponse) {
    option (api.method) = {
      id: 402,
      path: "update",
      ready:true
    };
  }

  rpc Delete(WorkerGroupDeleteRequest) returns (google.protobuf.Empty) {
    option (api.method) = {
      id: 403,
      path: "delete",
      ready:true
    };
  }

  rpc QueryByPerm(WorkerGroupQueryByPermRequest) returns (WorkerGroupQueryResponse) {
    option (api.method) = {
      id: 404,
      path: "query-by-perm",
      ready:true
    };
  }

  rpc QueryWorksByGroup(QueryWorksByGroupReq) returns(QueryWorksByGroupResp){
    option (api.method) = {
      id: 405,
      path: "query-group-works",
      ready:true
    };
  }

  // 禁用/启用分组
  rpc Disable(WorkerGroupDisableRequest) returns (google.protobuf.Empty) {
    option (api.method) = {
      id: 406,
      path: "disable",
      ready:true
    };
  }
}
