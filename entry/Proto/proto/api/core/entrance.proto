syntax = "proto3";
package api.core;

option go_package = "wcs/api/core;core";
option java_package = "com.teneasyChat.api.core";
import "api/option.proto";
import "google/protobuf/empty.proto";
import "validate/validate.proto";
import "api/common/c_entrance.proto";
import "api/common/c_worker.proto";
import "api/common/c_reply.proto";
import "api/common/c_base.proto";

option(api.info) = {
  authors: ["mango,bland"],
  date: "2022-12-12",
};

message EntranceQueryResponse{
  repeated common.Entrance entrances = 1;
  int32 total = 2;
}

message DomainItem {
  string domain_name = 1;
}

message DownloadDomainResponse{
  repeated DomainItem domain_item = 1;
}

message CreateEntranceRequest {
  common.Entrance entrances = 1[(validate.rules).message.required = true];
}

message CreateEntranceResponse {
  uint32 id = 1;
}

message UpdateEntranceRequest {
  common.Entrance entrances = 1[(validate.rules).message.required = true];
}

message DeleteEntranceRequest {
  uint32 id = 1[(validate.rules).uint32.gt = 0];
}

// 禁用/启用入口
message DisableEntranceRequest {
  uint32 id = 1[(validate.rules).uint32.gt = 0];
  // 禁用/启用
  common.DisableStatus disable_status = 2[(validate.rules).enum = {}];
}

message GetDistributionResponse {
  int32 tenant_id = 1;
  string distribution_type = 2;
}

message SaveDistributionRequest {
  repeated common.DistributionType distribution_type = 3;
}

message EntranceExistsRequest {
  oneof based {
    int32 entrance_id = 1;
    int64 client_id = 2;
  }
}

// 用户入口
service Entrance {
  option (api.service) = {
    path: "tenant/entrance",
    tags: ["entrance"],
    auth: [AUTH_ROLE_TENANT],
  };

  // 获取老用户分配机制
  rpc GetDistributionMechanism(google.protobuf.Empty) returns (GetDistributionResponse) {
    option (api.method) = {
      id: 604,
      path:"get-distribution-mechanism",
      ready: true
    };
  }

  // 保存老用户重连分配机制
  rpc SaveDistributionMechanism(SaveDistributionRequest) returns (DownloadDomainResponse) {
    option (api.method) = {
      id: 604,
      path:"save-distribution-mechanism",
      ready: true
    };
  }

  // 下载域名
  rpc DownloadDomain(google.protobuf.Empty) returns (DownloadDomainResponse) {
    option (api.method) = {
      id: 604,
      path:"download-domain",
      ready: true
    };
  }

  // 查询
  rpc QueryEntrance(google.protobuf.Empty) returns (EntranceQueryResponse) {
    option (api.method) = {
      id: 600,
      path:"query-entrance",
      ready: true
    };
  }

  // 查询
  rpc QueryEntranceV1(common.Page) returns (EntranceQueryResponse) {
    option (api.method) = {
      id: 600,
      path:"query-entrancev1",
      ready: true
    };
  }

  // 创建
  rpc CreateEntrance(CreateEntranceRequest) returns (CreateEntranceResponse) {
    option (api.method) = {
      id: 601,
      path:"create-entrance",
      ready: true
    };
  }

  // 更新
  rpc UpdateEntrance(UpdateEntranceRequest) returns (google.protobuf.Empty) {
    option (api.method) = {
      id: 602,
      path:"update-entrance",
      ready: true
    };
  }

  // 删除
  rpc DeleteEntrance(DeleteEntranceRequest) returns (google.protobuf.Empty) {
    option (api.method) = {
      id: 603,
      path:"delete-entrance",
      ready: true
    };
  }

  // 检查入口是否存在
  rpc Exists(EntranceExistsRequest) returns (google.protobuf.Empty) {
    option (api.method) = {
      id: 604,
      path:"exists",
      auth: [AUTH_ROLE_SERVICE],
      ready: true
    };
  }

  // 禁用/启用入口
  rpc DisableEntrance(DisableEntranceRequest) returns (google.protobuf.Empty) {
    option (api.method) = {
      id: 605,
      path:"disable-entrance",
      ready: true
    };
  }
}