syntax = "proto3";
package api.core;

option go_package = "wcs/api/core;core";
option java_package = "com.teneasyChat.api.core";
import "api/option.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "validate/validate.proto";
import "api/common/c_worker.proto";
import "api/common/c_base.proto";
import "api/common/c_entrance.proto";
import "api/common/c_tenant.proto";
option(api.info) = {
  authors: ["calvin"],
  date: "2022-12-03",
};

// 分页参数
message PageParam{
  // 每页数量
  uint32 size = 1;
  // 当前页
  int64 page = 2;
}

//线路选择
//0客服，1用户，2混合
enum RoleRoute {
  Role_ROUTE_WORKER = 0;
  Role_ROUTE_CUSTOMER = 1;
  Role_ROUTE_ALL = 2;
}

message RouteRequest {
  // 角色id
  int32 role_id = 1;
}


message RouteItem {
  
  string route_name = 1;
  string route_url = 2;
  int32 route_role = 3;
  
  
}

message RouteResponse {
  repeated RouteItem routes = 1;
}


message LoginRequest {
  // 用户名最多16个中文字符（字母、数字、特殊符号中包含两种）（必填）
  string account = 1[(validate.rules).string = {min_len:3, max_len:16}];
  string password = 2[(validate.rules).string = {min_bytes:6, max_bytes:31}];
}

message LoginResponse {
  // 拿到 token 后, 在需要鉴权的请求中填入Header, Key为X-Token
  string token = 1;
  // 客服信息
  common.Worker items = 2;
  // 过期时间（分）
  int32 chat_expire_time = 3;
  bool bind_gl=4;
  // 后台线路
  string background_line = 21;
  int32 clique = 22;
}

// 登录下级账号
message ManagerLoginRequest {
  int32 worker_id = 1[(validate.rules).int32.gt = 0];
}

message ManagerLoginResponse {
  // 拿到 token 后, 在需要鉴权的请求中填入Header, Key为X-Token
  string token = 1;
  // 客服信息, 此处字段名和 LoginResponse 保持一致
  common.Worker items = 2;
}

message TenantCreateRequest {
  // 商户名 商户名称最少1位，最多16个字符
  string name = 1[(validate.rules).string = {min_len:1, max_len:16}];
  // 商户账号 用户名最少3位，最多16个字符
  string account = 2[(validate.rules).string = {min_len:3, max_len:16}];
  // 密码最少6位最多20个字符，至少包括字母、数字、特殊符号其中两种。
  string password = 3[(validate.rules).string = {min_bytes:6, max_bytes:16}];
  // 客服数量最高9999
  int32 worker_capacity = 4[(validate.rules).int32 = {gte:0, lte:9999}];
  // 每日接待人数
  int32 daily_service_capacity = 5[(validate.rules).int32 = {gte:0}];
  // 商户分组
  int32 clique_id = 6[(validate.rules).int32.gte = 0];
  // 线路组id
  int32  line_group_id = 7[(validate.rules).int32.gte = 0];
  // h5线路
  string h5_line = 8;
  // 后台线路
  string background_line = 9;
  // 备注
  string  remark = 10;
}

message TenantQueryRequest {
  common.Batch batch = 1[(validate.rules).message.required = true];
  int32 group_id = 2;
  string keyword = 3[(validate.rules).string.max_len = 64];
}

message TenantQueryResponse {
  common.Batch batch = 1;
  int32 group_id = 2;
  string keyword = 3[(validate.rules).string.max_len = 64];
  repeated TenantItem tenant_item = 4;
  int32 total = 5;
}

message DeleteTenantRequest {
  uint32 tenant_id = 1[(validate.rules).uint32 = {gt:0, lte:32767}];
  string password = 2[(validate.rules).string = {min_len:1, max_len:32}];
}

message TenantItem {
  // 商户id
  uint32 tenant_id = 1;
  // 商户绑定公钥
  string tenant_public_key = 2;
  // 商户名称
  string name = 3;
  // 最大工作人员数量
  int32 workers_capacity = 4;
  // 每日服务数量
  int32 daily_service_capacity = 5;
  // 入口数量
  int32 entrance_num = 6;
  // 用户名(商户账号)
  string user_name = 7;
  // 月均咨询量
  int32 average_monthly = 8;
  // 累计咨询量
  int32 cumulative_volume = 9;
  // 商户账号密码
  string password = 10;
  // 创建时间
  google.protobuf.Timestamp create_at = 11;
  // 删除时间（依次判断是否已删除）
  google.protobuf.Timestamp delete_at = 12;
  // 所在分组名称
  string group_name = 13;
  // 所在分组名称
  int32 clique_Id = 14;
  string api_request_url = 15;
  string api_name = 16 ;
  string api_pwd = 17 ;
  string api_pubKey = 18;
  // api充值订单请求url
  string api_recharge_request_url = 19;
  // 线路组id
  int32  line_group_id = 20;
  // h5线路
  string h5_line = 21;
  // 后台线路
  string background_line = 22;
  // 线路组
  common.TenantsLineGroup  line_group = 23;
  // 修改时间
  google.protobuf.Timestamp update_at = 24;
  // h5域名+证书
  string h5_domain_cert = 25;
  // 备注
  string  remark = 26;
}

message AdminLoginRequest {
  string account = 1;
  string password = 2;
}

message AdminLoginResponse {
  // 拿到 token 后, 在需要鉴权的请求中填入Header, Key为X-Token
  string token = 1;
}

// TODO: 修改商户登录账号和密码
message UpdateTenantRequest {
  // 商户id
  uint32 tenant_id = 1[(validate.rules).uint32 = {gt:0, lte:32767}];
  // 商户名称
  string name = 2[(validate.rules).string = {min_len:1, max_len:16}];
  // 客服数量
  int32 worker_capacity = 3[(validate.rules).int32 = {gte:0, lte:9999}];
  // 每日服务数量
  int32 daily_service_capacity = 4[(validate.rules).int32 = {gte:0}];
  // 商户账号密码(密码调整)
  string password = 5[(validate.rules).string = {min_bytes:5, max_bytes:100}];
  // 商户分组
  int32 clique_id = 6[(validate.rules).int32.gte = 0];
  // 商户云信前缀
  string nimprex = 7;
  // 线路组id
  int32  line_group_id = 8;
  // h5线路
  string h5_line = 9;
  // 后台线路
  string background_line = 10;
  // 备注
  string  remark = 11;
}

message PublicKeyResponse {
  //key
  string token = 1;
}

message QueryTenantInfoResponse{
  TenantItem item =1;
}


// TODO: 更新云信信息
message UpdateNimInfoRequest {
  int32 workerId = 1;
  string nimid = 2;
  string nimsession = 3;
}


// TODO: 更新云信信息
message VersionRequest {
  optional int32 version_id = 1;
  common.OperationsType  optype = 2;
  string softname = 3;
  string major_version = 4;
  string miner_version = 5;
  bool force = 6;
  string  download_url = 7;
  string  plist_url = 8;
  string  remark = 9;
  int32 status = 10;
}
message VersionResponse {
  int32 version_id = 1;
  common.OperationsType  optype = 2;
  string softname = 3;
  string major_version = 4;
  string miner_version = 5;
  bool force = 6;
  string  download_url = 7;
  string  plist_url = 8;
  string  remark = 9;
  // 创建时间
  google.protobuf.Timestamp create_at = 10;
  // 更新时间
  google.protobuf.Timestamp update_at = 11;

  int32 status = 12;
  string operator  = 13;
}

message CreateVersionResponse {
  int32 version_id = 1;
  common.OperationsType  optype = 2;
  string softname = 3;
  string major_version = 4;
  string miner_version = 5;
  bool force = 6;
  string  download_url = 7;
  string  plist_url = 8;
  string  remark = 9;
}

message UpdateVersionResponse {
  int32 version_id = 1;
  common.OperationsType  optype = 2;
  string softname = 3;
  string major_version = 4;
  string miner_version = 5;
  bool force = 6;
  string  download_url = 7;
  string  plist_url = 8;
  string  remark = 9;
  // 创建时间
  google.protobuf.Timestamp create_at = 10;
  // 更新时间
  google.protobuf.Timestamp update_at = 11;
}

message GetVersionResponse {
  // 分配一线客服
  repeated VersionResponse list = 1;

}

message TenantThirdSetting {
  // 商户id
  uint32 tenant_id = 1[(validate.rules).uint32 = {gt:0, lte:32767}];
  string api_request_url = 2;
  string api_name = 3 ;
  string api_pwd = 4 ;
  string api_pubKey = 5;
  // api充值订单请求url
  string api_recharge_request_url = 6;
}

// 线路组列表请求参数
message LineGroupListRequest {
  // 分页参数
  common.Batch batch = 1[(validate.rules).message.required = true];
  // 线路组名称
  optional string name = 2;
  // 删除状态
  optional common.DisableStatus disable_status = 3;
}

// 线路组列表响应参数
message LineGroupListResponse {
  // 分页参数
  common.Batch batch = 1;
  // 线路组列表
  repeated common.TenantsLineGroup list = 2;
  // 总数
  int32 total = 3;
}

// 线路组创建请求参数
message LineGroupCreateRequest {
  // 线路组名称
  string name = 1[(validate.rules).string = {min_len:1, max_len:100}];
  // H5线路
  common.ListString h5_lines = 2[(validate.rules).message.required = true];
  // 后台线路
  common.ListString background_lines = 3[(validate.rules).message.required = true];
}

// 线路组更新请求参数
message LineGroupUpdateRequest {
  // 线路组id
  int32 id = 1[(validate.rules).int32 = {gt:0}];
  // 线路组名称
  string name = 2[(validate.rules).string = {min_len:1, max_len:100}];
  // H5线路
  common.ListString h5_lines = 3[(validate.rules).message.required = true];
  // 后台线路
  common.ListString background_lines = 4[(validate.rules).message.required = true];
}

// 线路组删除请求参数
message LineGroupDeleteRequest {
  // 线路组id
  int32 id = 1[(validate.rules).int32 = {gt:0}];
}

// 商户查询客服请求参数
message TenantWorkerQueryRequest {
  common.Batch batch = 1[(validate.rules).message.required = true];
  int32 tenant_id  = 2;
  string name = 3;
  common.WorkerState worker_state = 4 [(validate.rules).enum = {defined_only: true}];
}

// 商户查询客服响应
message TenantWorkerQueryResponse {
  repeated WorkerWithState items = 1;
  common.Batch batch = 2;
  // 分页客服数量
  int32 total = 3;
  // 在线客服数量
  int32 online_total = 4;
  // 总客服数量
  int32 all_total = 5;
  // 最大工作人员数量
  int32 workers_capacity = 6;
}

message WorkerWithState {
  common.Worker worker = 1;
  common.WorkerState worker_state = 2;
}

message TenantLogReq {
  common.Batch batch = 1;
  int32 query_type =2;
  string user_name =3;
  int32 role =4;
  optional string ip =5;
  string date =6;
}

message TenantLogItem {
  int32 id =1;
  int32 user_id=2;
  string user_account=3;
  string role =4;
  int64  create_time =5;
  string detail=6;
  string ip=7;
}

message TenantLogResp {
  common.Batch batch = 1;
  repeated TenantLogItem logs = 2;
  int32 total = 3;
}

service Tenant {
  option (api.service) = {
    path: "/tenant",
    auth: [AUTH_ROLE_TENANT],
    tags: ["tenant"],
  };

  // 总管理员登录 TODO:待删除
  rpc AdminLogin(AdminLoginRequest) returns (AdminLoginResponse){
    option (api.method) = {
      id: 107,
      path: "admin-login",
      auth: [AUTH_ROLE_DEVICE],
      ready: true,
      date: "2022-12-10"
    };
  }

  // 商户客服登陆接口
  rpc Login(LoginRequest) returns (LoginResponse){
    option (api.method) = {
      id: 100,
      auth: [AUTH_ROLE_DEVICE],
      path: "login",
      ready: true,
      date: "2022-12-10"
    };
  }

  // 商户客服登出接口(优雅登出)
  rpc Logout(google.protobuf.Empty) returns (google.protobuf.Empty){
    option (api.method) = {
      id: 101,
      auth: [AUTH_ROLE_DEVICE],
      path: "logout",
      ready: true,
      date: "2022-12-10"
    };
  }

  // (临时)新增商户
  // TODO: 管理后台实现后删除
  rpc Create(TenantCreateRequest) returns (google.protobuf.Empty) {
    option (api.method) = {
      id: 102,
      auth: [AUTH_ROLE_DEVICE],
      path: "create",
      ready: true,
      date: "2022-12-10"
    };
  }

  // 商户列表查询
  rpc Query(TenantQueryRequest) returns (TenantQueryResponse) {
    option (api.method) = {
      id: 104,
      auth: [AUTH_ROLE_ADMIN],
      path: "query",
      ready: true,
      date: "2022-12-10"
    };
  }

  // 修改商户
  rpc UpdateTenant(UpdateTenantRequest) returns (google.protobuf.Empty) {
    option (api.method) = {
      id: 105,
      auth: [AUTH_ROLE_ADMIN],
      path: "update",
      ready: true,
      date: "2022-12-10"
    };
  }

  // 删除商户
  rpc DeleteTenant(DeleteTenantRequest) returns (google.protobuf.Empty) {
    option (api.method) = {
      id: 106,
      auth: [AUTH_ROLE_ADMIN],
      path: "delete",
      ready: true,
      date: "2022-12-10"
    };
  }

  // 管理登录, 登录下级账号
  rpc ManagerLogin(ManagerLoginRequest) returns (ManagerLoginResponse){
    option (api.method) = {
      id: 103,
      path: "manager-login",
      ready: true,
      date: "2022-12-12"
    };
  }

  

  // 获取路由
  rpc GetRoutes(RouteRequest) returns (RouteResponse){
    option (api.method) = {
      id: 108,
      auth: [AUTH_ROLE_NONE],
      path: "getroutes",
      ready: true,
      date: "2023-04-06"
      
    };
  }


  // 更新publickey
  rpc CreatePublicKey(google.protobuf.Empty) returns (PublicKeyResponse){
    option (api.method) = {
      id: 109,
      auth: [AUTH_ROLE_NONE],
      path: "create-publickey",
      ready: true,
      date: "2023-09-28"

    };
  }

  // 查看商户信息
  rpc QuerySelfInfo(google.protobuf.Empty) returns (QueryTenantInfoResponse){
    option (api.method) = {
      id: 110,
      auth: [AUTH_ROLE_NONE],
      path: "query-selfinfo",
      ready: true,
      date: "2023-09-28"

    };
  }


  // 客服绑定云信信息
  rpc UpdateNimInfo(UpdateNimInfoRequest) returns (google.protobuf.Empty){
    option (api.method) = {
      id: 111,
      auth: [AUTH_ROLE_NONE],
      path: "update-niminfo",
      ready: true,
      date: "2023-12-22"

    };
  }

  // 客服绑定云信信息
  rpc ExportUsersList(google.protobuf.Empty) returns (google.protobuf.Empty){
    option (api.method) = {
      id: 112,
      auth: [AUTH_ROLE_NONE],
      path: "export-userslist",
      ready: true,
      date: "2024-2-12"

    };
  }


  rpc create_version(VersionRequest) returns (CreateVersionResponse){
    option (api.method) = {
      id: 113,
      auth: [AUTH_ROLE_ADMIN],
      path: "create-version",
      ready: true,
      date: "2024-2-12"

    };
  }

  rpc update_version(VersionRequest) returns (UpdateVersionResponse){
    option (api.method) = {
      id: 114,
      auth: [AUTH_ROLE_ADMIN],
      path: "update-version",
      ready: true,
      date: "2024-2-12"

    };
  }
  rpc getallversion(google.protobuf.Empty) returns (GetVersionResponse){
    option (api.method) = {
      id: 115,
      auth: [AUTH_ROLE_NONE],
      path: "getall-version",
      ready: true,
      date: "2024-2-12"

    };
  }

  rpc version(google.protobuf.Empty) returns (GetVersionResponse){
    option (api.method) = {
      id: 116,
      auth: [AUTH_ROLE_NONE],
      path: "version",
      ready: true,
      date: "2024-2-12"

    };
  }

  rpc api_set(TenantThirdSetting) returns (google.protobuf.Empty){
    option (api.method) = {
      id: 117,
      auth: [AUTH_ROLE_ADMIN],
      path: "api-set",
      ready: true,
      date: "2024-4-11"
    };
  }

  // 线路组列表
  rpc LineGroupList(LineGroupListRequest) returns (LineGroupListResponse){
    option (api.method) = {
      id: 118,
      auth: [AUTH_ROLE_ADMIN],
      path: "line-group/list",
      ready: true,
      date: "2024-4-11"
    };
  }

  // 线路组创建
  rpc LineGroupCreate(LineGroupCreateRequest) returns (google.protobuf.Empty){
    option (api.method) = {
      id: 119,
      auth: [AUTH_ROLE_ADMIN],
      path: "line-group/create",
      ready: true,
      date: "2024-4-11"
    };
  }

  // 线路组更新
  rpc LineGroupUpdate(LineGroupUpdateRequest) returns (google.protobuf.Empty){
    option (api.method) = {
      id: 120,
      auth: [AUTH_ROLE_ADMIN],
      path: "line-group/update",
      ready: true,
      date: "2024-4-11"
    };
  }

  // 线路组删除
  rpc LineGroupDelete(LineGroupDeleteRequest) returns (google.protobuf.Empty){
    option (api.method) = {
      id: 121,
      auth: [AUTH_ROLE_ADMIN],
      path: "line-group/delete",
      ready: true,
      date: "2024-4-11"
    };
  }

  // 商家客服列表
  rpc TenantWorkerQuery(TenantWorkerQueryRequest) returns (TenantWorkerQueryResponse){
    option (api.method) = {
      id: 122,
      auth: [AUTH_ROLE_ADMIN],
      path: "tenant-worker/query",
      ready: true,
      date: "2024-4-11"
    };
  }

  rpc TenantLogQuery(TenantLogReq) returns (TenantLogResp) {
    option (api.method) = {
      id: 123,
      auth: [AUTH_ROLE_ADMIN],
      path:"tenant_log/query",
      ready: true,
      date: "2024-7-5"
    };
  }
}
