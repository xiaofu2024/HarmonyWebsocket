syntax = "proto3";
package api.core;

option go_package = "wcs/api/core;core";
option java_package = "com.teneasyChat.api.core";
import "api/option.proto";
import "google/protobuf/empty.proto";
import "validate/validate.proto";
import "google/protobuf/timestamp.proto";
import "api/common/c_entrance.proto";
import "api/common/c_reply.proto";
import "api/common/c_chat.proto";
import "api/common/c_worker.proto";
import "api/core/worker.proto";

option(api.info) = {
  authors: ["mango"],
  date: "2022-12-12",
};


message AutoReplyRequest {
  // 咨询id
  uint32 consult_id = 1 [(validate.rules).uint32 = {gt:0}];
  // 客服id
  uint32 worker_id = 2;
}

message AssignWorkerRequest {
  // 咨询id
  uint32 consult_id = 1 [(validate.rules).uint32 = {gt:0}];
}

message AssignWorkerResponse {
  // 昵称
  string nick = 1;
  // 头像
  string avatar = 2;
  // id
  int32 worker_id = 3;
  // nimid
  string nimid = 4;
  // tips
  string tips = 5;
  // 聊天id
  int64 chat_id = 6;
}

message AssignWorkerItem {
  // 昵称
  string nick = 1;
  // 头像
  string avatar = 2;
  // id
  int32 worker_id = 3;
  // 云信账号
  string nim_id = 4;
  //连接
  common.ConnectState connect_state = 5;
  //在线
  common.OnlineState online_state = 6;
}

message QueryEntranceResponse {
  // 入口名称
  string name = 1;
  // 用户昵称
  string nick = 2;
  // 用户头像
  string avatar = 3;
  // 咨询类型引导文案
  string  guide = 4;
  // 默认咨询文案id
  int32 default_consult_id = 5;
  // 转默认咨询文案的时间 需/10
  string change_default_time = 6;
  // 该入口咨询类型
  repeated ConsultItem consults = 7;



}

message QueryAutoReplyRequest {
  // id
  int32 worker_id = 1;
}

message QueryAutoReplyResponse {
  common.AutoReplyItem autoReplyItem = 1;
}

message BindWorkerRequest{
  // id
  int32 worker_id = 1;

  // userid 用户注册id
  optional int32 userid = 4;
  // timestamp 时间戳
  optional int32 timestamp = 5;
  // sign 签名字符串
  optional string sign = 6;

}

message BindWorkerResponse{
  // 昵称
  string nick = 1;
  // 头像
  string avatar = 2;
  // id
  int32 worker_id = 3;
  // token
  string worker_token = 4;
}

message ConsultItem {
  // 咨询id
  uint32 consult_id = 1;
  // 咨询类型名称
  string name = 2;
  // 咨询类型文案
  string guide = 3;
  // 客服列表
  repeated AssignWorkerItem Works = 4;
  //未读提示
  int32 unread = 5 ;
  // 排序
  int32 priority = 6;
}

// 商户请求用户token
// 不填id, 将生成匿名用户
message CreateAnonUserRequest {
  int32 tenant_id = 1;
  int32 entrance_id = 2;
  string ip = 3;
}

message CreateAnonUserResponse {
  string token = 1;
  string name = 2;
  string avatar = 3;
}

message CustomerDataRequest {
  // 对于持久化, 可作为 分区 id
  int64 chat_id = 1;
}

// TODO: H5链接（web链接，内嵌来源，客服联盟App）
message CustomerDataResponse {
  // 入口名称
  string name = 1;
  //用户来源
  string user_source = 2;
  //IP地址
  string ip_address = 3;
  //首次联系时间
  google.protobuf.Timestamp first_contact_time = 4;
  //最后联系时间
  google.protobuf.Timestamp last_contact_time = 5;
  //用户称呼
  string user_name = 6;
  //用户诉求
  string user_appeal = 7;
}

//查询 客服号
message QueryWorkerRequest {
  optional int32 worker_id = 1;
  optional string nim_id = 2;
}

message QueryWorkerResponse {
  int32 worker_id = 1;
  string worker_name = 2;
  string worker_avatar = 3;
  string tips =4;
}

message QueryChatRequest {
  repeated int64 chat_id = 1;
  // 咨询id
  uint32 consult_id = 2;
}

message QueryChatResponse {
  repeated common.ChatItem chats = 1;
}

message UpdateUserAppealRequest {
  int64  chat_id = 1;
  string user_name = 2;
  string user_appeal = 3;
}

message PingPongRequest {
  int64 local = 1;
}

message PingPongResponse {
  int64 local = 1;
}

message ReplyRequest {
  int64 msg_id = 1[(validate.rules).int64.gt = 0];
}

//verify
message VerifyRequest {
  string gns_id = 1;
  int32 tenant_id = 2[(validate.rules).int32.gt = 0];
}

message VerifyResponse {
  string gns_id = 1;
  int32 tenant_id = 2;
}

// 客户标记已读
message ClientMarkReadRequest {
  // 咨询类型
  int64 consult_id = 1[(validate.rules).int64.gt=0];
}

// 客户调用接口
service Front {
  option (api.service) = {
    path: "api",
    tags: ["front"],
    auth: [AUTH_ROLE_ACCOUNT, AUTH_ROLE_SERVICE],
  };

  // 用户资料
  rpc CustomerInfo(CustomerDataRequest) returns (CustomerDataResponse) {
    option (api.method) = {
      id: 905,
      path:"customer-info",
      ready: true
    };
  }

  // 分配客服
  rpc AssignWorker(AssignWorkerRequest) returns (AssignWorkerResponse) {
    option (api.method) = {
      id: 901,
      path:"assign-worker",
      ready: true
    };
  }

  // 请求入口
  rpc QueryEntrance(google.protobuf.Empty) returns (QueryEntranceResponse) {
    option (api.method) = {
      id: 902,
      path:"query-entrance",
      ready: true,
      auth: [AUTH_ROLE_DEVICE,AUTH_ROLE_SERVICE],
    };
  }

  // 自动回复
  rpc QueryAutoReply(AutoReplyRequest) returns (QueryAutoReplyResponse) {
    option (api.method) = {
      id: 903,
      path:"query-auto-reply",
      auth: [AUTH_ROLE_DEVICE]
      ready: true
    };
  }


  // 创建匿名用户
  rpc CreateAnonUser(CreateAnonUserRequest) returns (CreateAnonUserResponse){
    option (api.method) = {
      id: 905,
      auth: [AUTH_ROLE_SERVICE],
      path: "create-anon-user",
      ready: true,
      date: "2022-12-31"
    };
  }

  // 查询客服信息(名/头像)
  rpc QueryWorker(QueryWorkerRequest) returns (QueryWorkerResponse){
    option (api.method) = {
      id: 906,
      auth: [AUTH_ROLE_SERVICE],
      path: "query-worker",
      ready: true,
      date: "2023-01-05"
    };
  }

  // 查询聊天会话信息
  rpc QueryChat(QueryChatRequest) returns (QueryChatResponse){
    option (api.method) = {
      id: 907,
      auth: [AUTH_ROLE_SERVICE, AUTH_ROLE_TENANT],
      path: "query-chat",
      ready: true,
      date: "2023-01-05"
    };
  }

  // 修改用户诉求和称呼
  rpc UpdateUserAppeal(UpdateUserAppealRequest) returns (google.protobuf.Empty){
    option (api.method) = {
      id: 907,
      auth: [AUTH_ROLE_SERVICE, AUTH_ROLE_TENANT],
      path: "update-user-appeal",
      ready: true,
      date: "2023-01-05"
    };
  }

  rpc Ping(google.protobuf.Empty) returns (google.protobuf.Empty){
    option (api.method) = {
      id: 908,
      auth: [AUTH_ROLE_TENANT, AUTH_ROLE_SERVICE],
      path: "ping",
      ready: true,
      date: "2023-02-08"
    };
  }

  rpc PingPong(PingPongRequest) returns (PingPongResponse){
    option (api.method) = {
      id: 908,
      auth: [AUTH_ROLE_DEVICE],
      path: "ping-pong",
      ready: true,
      date: "2023-02-08"
    };
  }

  rpc ReplyPls(ReplyRequest) returns (google.protobuf.Empty){
    option (api.method) = {
      id: 909,
      path: "reply",
      ready: true,
      date: "2023-02-15"
    };
  }
  // 自动回复
  rpc QueryWorkerAutoReply(QueryAutoReplyRequest) returns (QueryAutoReplyResponse) {
    option (api.method) = {
      id: 910,
      path:"query-worker-auto-reply",
      auth: [AUTH_ROLE_DEVICE],
      ready: true
    };
  }
  //
  rpc verify(VerifyRequest) returns (VerifyResponse){
    option (api.method) = {
      id: 908,
      auth: [AUTH_ROLE_DEVICE,AUTH_ROLE_SERVICE],
      path: "verify",
      ready: true,
      date: "2024-04-22"
    };
  }
  // 客户标记已读
  rpc MarkRead(ClientMarkReadRequest) returns (google.protobuf.Empty){
    option (api.method) = {
      id: 909,
      path: "chat/mark-read",
      ready: true,
      date: "2024-04-22"
    };
  }
  rpc NotifyMsg(NotifyMessageRequest) returns (google.protobuf.Empty){
    option (api.method) = {
      id: 910,
      auth:[AUTH_ROLE_DEVICE,AUTH_ROLE_SERVICE],
      path: "notify-msg",
      ready: true,
      date: "2024-08-01"
    };
  }
}
