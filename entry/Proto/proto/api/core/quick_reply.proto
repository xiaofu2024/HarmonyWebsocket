syntax = "proto3";
package api.core;

option go_package = "wcs/api/core;core";
option java_package = "com.teneasyChat.api.core";
import "api/option.proto";
import "google/protobuf/empty.proto";
import "validate/validate.proto";
import "api/common/c_message.proto";
import "api/common/c_base.proto";


option(api.info) = {
  authors: ["mango", "jeff"],
  date: "2022-12-10",
};

// -------------------------------- 标签组 --------------------------------

// 针对前端cooked的便签组
// 避免前端摸不透结构
message QuickReplyGroupItem {
  string name = 1 [(validate.rules).string.min_bytes = 1];
  int32 priority = 2 [(validate.rules).int32 = {gt:-2}];
  int64 group_id = 3 ;  //客服组id
}

// 查询便签组
message QuickReplyGroupQueryResponse {
  repeated QuickReplyGroupItem items = 1;
}

// 创建便签组
message QuickReplyGroupCreateRequest {
  string name = 1 [(validate.rules).string.min_bytes = 1];
  int32 priority = 2 [(validate.rules).int32 = {gt:-2}];
}

// 更新便签组(全量更新)
message QuickReplyGroupUpdateRequest {
  // 旧群名
  string old_name = 1 [(validate.rules).string.min_bytes = 1];
  // 新群名 如未调整 则与旧群名一致
  string new_name = 2 [(validate.rules).string.min_bytes = 1];
  int32 priority = 3 [(validate.rules).int32 = {gt:-2}];
}

// 删除便签组
message QuickReplyGroupDeleteRequest {
//   string name = 1 [(validate.rules).string.min_bytes = 1];
  repeated string name = 1 [(validate.rules).repeated.min_items = 1];
}

// -------------------------------- 标签 --------------------------------

// 针对前端cooked的便签
// 避免前端摸不透结构
message QuickReplyItem {
  // 创建时不需要填
  int64 id = 1;
  // 便签 名称
  string name = 2 [(validate.rules).string.min_bytes = 1];
  // 便签分组名称
  string group_name = 3 [(validate.rules).string.min_bytes = 1];
  // 便签 展示优先级
  int32 priority = 4 [(validate.rules).int32 = {gt:-2}];
  // 便签内容
  string content = 5;
  // 回复消息 图片 + 文字
  repeated common.Message items = 6;
  // 客服添加到 **常用** 组的便签
  // 如果为true:
  // 在 常用组 时: 显示 **X** 按钮, 可以从常用组移除
  // 在 非常用组 时: 显示 **取消** 按钮, 可以从常用组移除
  // 如果为false:
  // 在 常用组 时: 不显示 删除 按钮
  // 在 非常用组 时: 显示 **常用** 按钮, 可以加入到常用组
  bool is_custom = 7;
  //组id
  int64 group_id = 8;
  // 客服组name
  string customer_group_name = 9;
}

// 查询便签参数
message QuickReplyGroupQueryRequest {
  string reply_group_name = 1 ; //便签组名称
  int64 worker_group_id = 2 ;  //客服组id
  common.Batch batch = 3[(validate.rules).message.required = true];
}

// 查询便签
message QuickReplyQueryResponse {
  repeated QuickReplyItem items = 1;
  int32 total = 2;
}

// 创建便签
message CreateQuickReplyRequest {
  QuickReplyItem reply = 1;
}

message CreateQuickReplyResponse {
  QuickReplyItem reply = 1;
}

// 创建便签
message CreateQuickReplyRequestV1 {
  repeated QuickReplyItem reply = 1;
}

message CreateQuickReplyResponseV1 {
  repeated QuickReplyItem reply = 1;
}

// 更新标签(全量更新)
message UpdateQuickReplyRequest {
  QuickReplyItem reply = 1;
  // 旧的群名
  string old_group_name = 2 [(validate.rules).string.min_bytes = 1];
}

message DQuickReply{
  int64 id =1;
  string name=2;
}

// 删除标签
message DeleteQuickReplyRequest {
   repeated DQuickReply items = 1 ;
}

message PushCommonRequest {
  repeated int64 quick_reply_id = 1[(validate.rules).repeated = {min_items:1}];
}

message PopCommonRequest {
  repeated int64 quick_reply_id = 1[(validate.rules).repeated = {min_items:1}];
}

message QueryCommonResponse {
  // 显示在常用组的便签
  repeated QuickReplyItem quick_reply = 1;
}

message QuickReplyItemGroup {
  string group_name = 1;
  int32 priority = 2;
  repeated QuickReplyItemWithRepeatName items = 3;
}

message QuickReplyItemWithRepeatName {
  // 创建时不需要填
  int64 id = 1;
  // 便签 名称
  string name = 2;
  // 便签分组名称
  string group_name = 3;
  // 便签 展示优先级
  int32 priority = 4;
  // 便签内容
  string content = 5;
  // 回复消息 图片 + 文字
  repeated common.Message items = 6;
  // 客服添加到 **常用** 组的便签
  // 如果为true:
  // 在 常用组 时: 显示 **X** 按钮, 可以从常用组移除
  // 在 非常用组 时: 显示 **取消** 按钮, 可以从常用组移除
  // 如果为false:
  // 在 常用组 时: 不显示 删除 按钮
  // 在 非常用组 时: 显示 **常用** 按钮, 可以加入到常用组
  bool is_custom = 7;
  //组id
  int64 group_id = 8;
  // 客服组name
  string customer_group_name = 9;
  // 便签内容数组
  repeated QuickReplyItemWithRepeatNameContents contents = 10;
}

message QuickReplyItemWithRepeatNameContents {
  int64 id = 1;
  // 便签内容
  string content = 2;
}

message QueryByWorkerRequest {
  // 显示在常用组的便签
  common.Batch batch = 3[(validate.rules).message.required = true];
}

message QueryByWorkerResponse {
  // 显示在常用组的便签
  repeated QuickReplyItemGroup group = 1;
  int32 total = 2;
}

service QuickReply {
  option (api.service) = {
    path: "/tenant/quick-reply",
    tags: ["quick_reply"],
    auth: [AUTH_ROLE_TENANT],
  };

  // 查询便签组, 全量
  rpc QueryGroup(google.protobuf.Empty) returns (QuickReplyGroupQueryResponse) {
    option (api.method) = {
      id: 300,
      readonly: true,
      path:"query-group",
      ready:true

    };
  }

  // 创建便签组
  rpc CreateGroup(QuickReplyGroupCreateRequest) returns (google.protobuf.Empty) {
    option (api.method) = {
      id: 301,
      path:"create-group",
      ready:true

    };
  }

  // 更新便签组
  rpc UpdateGroup(QuickReplyGroupUpdateRequest) returns (google.protobuf.Empty) {
    option (api.method) = {
      id: 302,
      path:"update-group",
      ready:true

    };
  }

  // 删除便签组
  rpc DeleteGroup(QuickReplyGroupDeleteRequest) returns (google.protobuf.Empty) {
    option (api.method) = {
      id: 303,
      path:"delete-group",
      ready:true

    };
  }

  // 查询便签
  rpc QueryReply(QuickReplyGroupQueryRequest) returns (QuickReplyQueryResponse) {
    option (api.method) = {
      id: 304,
      path:"query-reply",
      ready:true

    };
  }

  // 创建便签
  rpc CreateReply(CreateQuickReplyRequest) returns (CreateQuickReplyResponse) {
    option (api.method) = {
      id: 305,
      path:"create-reply",
      ready:true

    };
  }

  // 创建便签
  rpc CreateReplyV1(CreateQuickReplyRequestV1) returns (CreateQuickReplyResponseV1) {
    option (api.method) = {
      id: 305,
      path:"create-replyv1",
      ready:true

    };
  }

  // 更新便签
  rpc UpdateReply(UpdateQuickReplyRequest) returns (google.protobuf.Empty) {
    option (api.method) = {
      id: 306,
      path:"update-reply",
      ready:true

    };
  }

  // 删除便签
  rpc DeleteReply(DeleteQuickReplyRequest) returns (google.protobuf.Empty) {
    option (api.method) = {
      id: 307,
      path:"delete-reply",
      ready:true

    };
  }

  // 初始化便签组
  rpc InitGroup(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (api.method) = {
      id: 308,
      path:"init-group",
      ready:true

    };
  }

  // 添加进个人常用组
  // 操作表 worker_quick_reply
  rpc PushCommon(PushCommonRequest) returns (google.protobuf.Empty) {
    option (api.method) = {
      id: 309,
      path:"push-common",
      ready:true

    };
  }

  // 从个人常用组移除
  // 操作表 worker_quick_reply
  rpc PopCommon(PopCommonRequest) returns (google.protobuf.Empty) {
    option (api.method) = {
      id: 310,
      path:"pop-common",
      ready:true
    };
  }

  // 查询个人自定义的常用组
  rpc QueryCommon(google.protobuf.Empty) returns (QueryCommonResponse) {
    option (api.method) = {
      id: 311,
      path:"query-common",
      ready:true
    };
  }

  // 根据客服查询便签组
  rpc QueryByWorker(QueryByWorkerRequest) returns (QueryByWorkerResponse) {
    option (api.method) = {
      id: 312,
      path:"query-by-worker",
      ready:true
    };
  }
}