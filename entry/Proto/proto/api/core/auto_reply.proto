syntax = "proto3";
package api.core;

option go_package = "wcs/api/core;core";
option java_package = "com.teneasyChat.api.core";

import "api/option.proto";
import "google/protobuf/empty.proto";
import "validate/validate.proto";

import "api/common/c_reply.proto";
import "api/common/c_base.proto";

option(api.info) = {
  authors: ["mango", "jeff"],
  date: "2022-12-10",
};

// 查询自动回复的字段
enum AutoReplyField {
  AUTO_REPLY_FIELD_ALL = 0;
  // 如果只查询 自动回复 名称: json_extract(store, '$.name')
  AUTO_REPLY_FIELD_NAME = 1;
}

// 商户全部自动回复
message AutoReplyTenantResponse {
  repeated common.AutoReplyItem items = 1;
  int32 total = 2;
}

// 查询指定客服
message AutoReplyWorkerRequest {
  // 查询字段
  AutoReplyField field = 1 [(validate.rules).enum.defined_only = true];
  // 客服Id
  repeated int32 worker_id = 2 [(validate.rules).repeated = {unique:true, min_items:1, max_items:100}];
}

message AutoReplyWorkerResponse {
  // 查询字段
  AutoReplyField field = 1 [(validate.rules).enum.defined_only = true];
  // 客服Id, 如果只查询指定字段的话, 只返回指定字段的值
  map<int32, common.AutoReplyItem> items = 2;
}

// 创建
message AutoReplyCreateRequest {
  common.AutoReplyItem item = 1;
  // 客服Id
  repeated int32 worker_id = 2 [(validate.rules).repeated = {unique:true, min_items:0, max_items:100}];
}

message AutoReplyCreateResponse {
  int64 id = 1;
}

// 删除
message AutoReplyDeleteRequest {
  int64 id = 1 [(validate.rules).int64 = {not_in: [0]}];
}

// 全量更新
message AutoReplyUpdateRequest {
  common.AutoReplyItem item = 1;
  // 客服Id
  repeated int32 worker_id = 2 [(validate.rules).repeated = {unique:true, min_items:1, max_items:100}];
}

service AutoReply {
  option (api.service) = {
    path: "/tenant/auto-reply",
    tags: ["auto_reply"],
    auth: [AUTH_ROLE_TENANT],
  };

  // 根据商户查询, 全量
  rpc QueryTenant(common.Page) returns (AutoReplyTenantResponse) {
    option (api.method) = {
      id: 200,
      path:"tenant",
      ready:true
    };
  }

  // 根据客服查询
  rpc QueryWorker(AutoReplyWorkerRequest) returns (AutoReplyWorkerResponse) {
    option (api.method) = {
      id: 201,
      auth: [AUTH_ROLE_TENANT, AUTH_ROLE_SERVICE],
      path:"worker",
      ready:true
    };
  }

  // 创建自动回复
  rpc Create(AutoReplyCreateRequest) returns (AutoReplyCreateResponse) {
    option (api.method) = {
      id: 202,
      path:"create",
      ready:true
    };
  }

  // 删除自动回复
  rpc Delete(AutoReplyDeleteRequest) returns (google.protobuf.Empty) {
    option (api.method) = {
      id: 203,
      path:"delete",
      ready:true
    };
  }

  // 更新自动回复
  rpc Update(AutoReplyUpdateRequest) returns (google.protobuf.Empty) {
    option (api.method) = {
      id: 204,
      path:"update",
      ready:true
    };
  }
}